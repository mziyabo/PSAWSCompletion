
$MaximumFunctionCount=32500

function Register-AWSCompleter {

    [scriptblock]$GetCompletions = {
        param($wordToComplete, $commandAst, $cursorPosition)

        $commandElements = $commandAst.CommandElements | ForEach-Object { $_.Extent.ToString() };
        $lastCommand = Get-LastCommand($commandAst.ToString());
        $commands = Get-Commands($commandAst.ToString());

        $script:cmdLn = @{
            Commands       = $commands;
            WordToComplete = $wordToComplete
        };

        if ($commands.Count -gt 2) {

            if((Get-AvailableOptions($lastCommand)).Contains($cmdLn.Commands[2])){
                $lastCommand = $lastCommand + "-" + $cmdLn.Commands[2];
            }

            $matches = (Get-AvailableOptions($lastCommand)).Where( { $_ -like "$wordToComplete*" });

            if ($matches.Count -eq 0) {
                return Get-AvailableOptions($lastCommand) |
                Where-Object { $_ -notin $commandElements } |
                ForEach-Object { $_ };
            }
            else {
                return $matches |
                Where-Object { $_.StartsWith($wordToComplete) -and $_ -notin $commandElements } |
                ForEach-Object { $_ };
            }
        }
        else {
            [string[]]$result = Get-RootCompletionOptions;

            if ($wordToComplete -eq [string]::Empty -and $lastCommand -eq [string]::Empty) {
                return $result | ForEach-Object { $_ };
            }
            elseIf ($result.Contains($lastCommand)) {
                if ($commandAst.ToString().Length -eq $cursorPosition) {
                    return $null;
                }

                $completions = Get-AvailableOptions($lastCommand) |
                Where-Object { $_ -notin $commandElements -and $_.StartsWith($wordToComplete)} |
                ForEach-Object { $_ };
                return $completions;
            }
            else {
                return $result |
                Where-Object { $_.StartsWith($wordToComplete) } |
                ForEach-Object { $_ };
            }
        }
    }

    $rootCommands = ('aws', 'aws.cmd');
    $aliases = (get-alias).Where( { $_.Definition -in $rootCommands }).Name;
    if ($aliases) { $rootCommands += $aliases }
    Register-ArgumentCompleter -CommandName $rootCommands -ScriptBlock $GetCompletions -Native
}

function Remove-CommandFlags($parameterName) {
    $cmd = $parameterName.Trim();

    $flags = Select-String '\s-{1,2}[\w-]*[=?|\s+]?[\w1-9_:/-]*' -InputObject $cmd -AllMatches;
    $flags.Matches.Value | ForEach-Object { $cmd = $cmd.Replace($_, " ") };

    return $cmd;
}

function Get-LastCommand($parameterName) {
    $cmd = Remove-CommandFlags($parameterName);
    $options = $cmd.Trim().Split(' ');

    if ($options.Count -lt 2) {
        return [string]::Empty;
    }

    return $options[1];
}

function Get-Commands($parameterName) {
    $cmd = Remove-CommandFlags($parameterName);
    $commands = $cmd.Split(' ') | Where-Object { $_ -ne [string]::Empty };

    return $commands;
}

function Get-AWSCommonFlags(){
    $flags = [System.Collections.ArrayList]@();
    
$flags+=("--debug")
$flags+=("--endpoint-url")
$flags+=("--no-verify-ssl")
$flags+=("--no-paginate")
$flags+=("--output")
$flags+=("--query")
$flags+=("--profile")
$flags+=("--region")
$flags+=("--version")
$flags+=("--color")
$flags+=("--no-sign-request")
$flags+=("--ca-bundle")
$flags+=("--cli-read-timeout")
$flags+=("--cli-connect-timeout")
$flags+=("--cli-binary-format")

return $flags;
}

function Get-AvailableOptions($lastCommand) {
    $completions = [System.Collections.ArrayList]@();

    if ($lastCommand -in ("aws", "aws.cmd")) {
         $completions += Get-RootCompletionOptions($wordToComplete);
         $completions += Get-AWSCommonFlags;
         return $completions;
    }

    $completions = Invoke-Expression "Get-$lastCommand" -ErrorAction Ignore;
    $completions += Get-AWSCommonFlags;
    return $completions;
}

function Get-RootCompletionOptions {
    $commands = [System.Collections.ArrayList]@();

    $commands += ("accessanalyzer");
    $commands += ("acm");
    $commands += ("acm-pca");
    $commands += ("alexaforbusiness");
    $commands += ("amplify");
    $commands += ("apigateway");
    $commands += ("apigatewaymanagementapi");
    $commands += ("apigatewayv2");
    $commands += ("appconfig");
    $commands += ("application-autoscaling");
    $commands += ("application-insights");
    $commands += ("appmesh");
    $commands += ("appstream");
    $commands += ("appsync");
    $commands += ("athena");
    $commands += ("autoscaling");
    $commands += ("autoscaling-plans");
    $commands += ("backup");
    $commands += ("batch");
    $commands += ("budgets");
    $commands += ("ce");
    $commands += ("chime");
    $commands += ("cloud9");
    $commands += ("clouddirectory");
    $commands += ("cloudformation");
    $commands += ("cloudfront");
    $commands += ("cloudhsm");
    $commands += ("cloudhsmv2");
    $commands += ("cloudsearch");
    $commands += ("cloudsearchdomain");
    $commands += ("cloudtrail");
    $commands += ("cloudwatch");
    $commands += ("codebuild");
    $commands += ("codecommit");
    $commands += ("codeguru-reviewer");
    $commands += ("codeguruprofiler");
    $commands += ("codepipeline");
    $commands += ("codestar");
    $commands += ("codestar-connections");
    $commands += ("codestar-notifications");
    $commands += ("cognito-identity");
    $commands += ("cognito-idp");
    $commands += ("cognito-sync");
    $commands += ("comprehend");
    $commands += ("comprehendmedical");
    $commands += ("compute-optimizer");
    $commands += ("configservice");
    $commands += ("configure");
    $commands += ("connect");
    $commands += ("connectparticipant");
    $commands += ("cur");
    $commands += ("dataexchange");
    $commands += ("datapipeline");
    $commands += ("datasync");
    $commands += ("dax");
    $commands += ("deploy");
    $commands += ("detective");
    $commands += ("devicefarm");
    $commands += ("directconnect");
    $commands += ("discovery");
    $commands += ("dlm");
    $commands += ("dms");
    $commands += ("docdb");
    $commands += ("ds");
    $commands += ("dynamodb");
    $commands += ("dynamodbstreams");
    $commands += ("ebs");
    $commands += ("ec2");
    $commands += ("ec2-instance-connect");
    $commands += ("ecr");
    $commands += ("ecs");
    $commands += ("efs");
    $commands += ("eks");
    $commands += ("elastic-inference");
    $commands += ("elasticache");
    $commands += ("elasticbeanstalk");
    $commands += ("elastictranscoder");
    $commands += ("elb");
    $commands += ("elbv2");
    $commands += ("emr");
    $commands += ("es");
    $commands += ("events");
    $commands += ("firehose");
    $commands += ("fms");
    $commands += ("forecast");
    $commands += ("forecastquery");
    $commands += ("frauddetector");
    $commands += ("fsx");
    $commands += ("gamelift");
    $commands += ("glacier");
    $commands += ("globalaccelerator");
    $commands += ("glue");
    $commands += ("greengrass");
    $commands += ("groundstation");
    $commands += ("guardduty");
    $commands += ("health");
    $commands += ("history");
    $commands += ("iam");
    $commands += ("imagebuilder");
    $commands += ("importexport");
    $commands += ("inspector");
    $commands += ("iot");
    $commands += ("iot-data");
    $commands += ("iot-jobs-data");
    $commands += ("iot1click-devices");
    $commands += ("iot1click-projects");
    $commands += ("iotanalytics");
    $commands += ("iotevents");
    $commands += ("iotevents-data");
    $commands += ("iotsecuretunneling");
    $commands += ("iotsitewise");
    $commands += ("iotthingsgraph");
    $commands += ("kafka");
    $commands += ("kendra");
    $commands += ("kinesis");
    $commands += ("kinesis-video-archived-media");
    $commands += ("kinesis-video-media");
    $commands += ("kinesis-video-signaling");
    $commands += ("kinesisanalytics");
    $commands += ("kinesisanalyticsv2");
    $commands += ("kinesisvideo");
    $commands += ("kms");
    $commands += ("lakeformation");
    $commands += ("lambda");
    $commands += ("lex-models");
    $commands += ("lex-runtime");
    $commands += ("license-manager");
    $commands += ("lightsail");
    $commands += ("logs");
    $commands += ("machinelearning");
    $commands += ("macie");
    $commands += ("managedblockchain");
    $commands += ("marketplace-catalog");
    $commands += ("marketplace-entitlement");
    $commands += ("marketplacecommerceanalytics");
    $commands += ("mediaconnect");
    $commands += ("mediaconvert");
    $commands += ("medialive");
    $commands += ("mediapackage");
    $commands += ("mediapackage-vod");
    $commands += ("mediastore");
    $commands += ("mediastore-data");
    $commands += ("mediatailor");
    $commands += ("meteringmarketplace");
    $commands += ("mgh");
    $commands += ("migrationhub-config");
    $commands += ("mobile");
    $commands += ("mq");
    $commands += ("mturk");
    $commands += ("neptune");
    $commands += ("networkmanager");
    $commands += ("opsworks");
    $commands += ("opsworks-cm");
    $commands += ("organizations");
    $commands += ("outposts");
    $commands += ("personalize");
    $commands += ("personalize-events");
    $commands += ("personalize-runtime");
    $commands += ("pi");
    $commands += ("pinpoint");
    $commands += ("pinpoint-email");
    $commands += ("pinpoint-sms-voice");
    $commands += ("polly");
    $commands += ("pricing");
    $commands += ("qldb");
    $commands += ("qldb-session");
    $commands += ("quicksight");
    $commands += ("ram");
    $commands += ("rds");
    $commands += ("rds-data");
    $commands += ("redshift");
    $commands += ("rekognition");
    $commands += ("resource-groups");
    $commands += ("resourcegroupstaggingapi");
    $commands += ("robomaker");
    $commands += ("route53");
    $commands += ("route53domains");
    $commands += ("route53resolver");
    $commands += ("s3");
    $commands += ("s3api");
    $commands += ("s3control");
    $commands += ("sagemaker");
    $commands += ("sagemaker-a2i-runtime");
    $commands += ("sagemaker-runtime");
    $commands += ("savingsplans");
    $commands += ("schemas");
    $commands += ("sdb");
    $commands += ("secretsmanager");
    $commands += ("securityhub");
    $commands += ("serverlessrepo");
    $commands += ("service-quotas");
    $commands += ("servicecatalog");
    $commands += ("servicediscovery");
    $commands += ("ses");
    $commands += ("sesv2");
    $commands += ("shield");
    $commands += ("signer");
    $commands += ("sms");
    $commands += ("snowball");
    $commands += ("sns");
    $commands += ("sqs");
    $commands += ("ssm");
    $commands += ("sso");
    $commands += ("sso-oidc");
    $commands += ("stepfunctions");
    $commands += ("storagegateway");
    $commands += ("sts");
    $commands += ("support");
    $commands += ("swf");
    $commands += ("synthetics");
    $commands += ("textract");
    $commands += ("transcribe");
    $commands += ("transfer");
    $commands += ("translate");
    $commands += ("waf");
    $commands += ("waf-regional");
    $commands += ("wafv2");
    $commands += ("workdocs");
    $commands += ("worklink");
    $commands += ("workmail");
    $commands += ("workmailmessageflow");
    $commands += ("workspaces");
    $commands += ("xray");

    $commands += Get-AWSCommonFlags;

    return $commands;
}

function Get-accessanalyzer {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-analyzer"); 
$commands+=("create-archive-rule"); 
$commands+=("delete-analyzer"); 
$commands+=("delete-archive-rule"); 
$commands+=("get-analyzed-resource"); 
$commands+=("get-analyzer"); 
$commands+=("get-archive-rule"); 
$commands+=("get-finding"); 
$commands+=("list-analyzed-resources"); 
$commands+=("list-analyzers"); 
$commands+=("list-archive-rules"); 
$commands+=("list-findings"); 
$commands+=("list-tags-for-resource"); 
$commands+=("start-resource-scan"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-archive-rule"); 
$commands+=("update-findings");

return $commands;
}

 function Get-accessanalyzer-create-analyzer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--analyzer-name"); 
$flags+=("--archive-rules"); 
$flags+=("--client-token"); 
$flags+=("--tags"); 
$flags+=("--type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-accessanalyzer-create-archive-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--analyzer-name"); 
$flags+=("--client-token"); 
$flags+=("--filter"); 
$flags+=("--rule-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-accessanalyzer-delete-analyzer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--analyzer-name"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-accessanalyzer-delete-archive-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--analyzer-name"); 
$flags+=("--client-token"); 
$flags+=("--rule-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-accessanalyzer-get-analyzed-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--analyzer-arn"); 
$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-accessanalyzer-get-analyzer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--analyzer-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-accessanalyzer-get-archive-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--analyzer-name"); 
$flags+=("--rule-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-accessanalyzer-get-finding {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--analyzer-arn"); 
$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-accessanalyzer-list-analyzed-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--analyzer-arn"); 
$flags+=("--resource-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-accessanalyzer-list-analyzers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-accessanalyzer-list-archive-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--analyzer-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-accessanalyzer-list-findings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--analyzer-arn"); 
$flags+=("--filter"); 
$flags+=("--sort"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-accessanalyzer-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-accessanalyzer-start-resource-scan {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--analyzer-arn"); 
$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-accessanalyzer-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-accessanalyzer-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-accessanalyzer-update-archive-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--analyzer-name"); 
$flags+=("--client-token"); 
$flags+=("--filter"); 
$flags+=("--rule-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-accessanalyzer-update-findings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--analyzer-arn"); 
$flags+=("--client-token"); 
$flags+=("--ids"); 
$flags+=("--resource-arn"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-tags-to-certificate"); 
$commands+=("delete-certificate"); 
$commands+=("describe-certificate"); 
$commands+=("export-certificate"); 
$commands+=("get-certificate"); 
$commands+=("import-certificate"); 
$commands+=("list-certificates"); 
$commands+=("list-tags-for-certificate"); 
$commands+=("remove-tags-from-certificate"); 
$commands+=("renew-certificate"); 
$commands+=("request-certificate"); 
$commands+=("resend-validation-email"); 
$commands+=("update-certificate-options"); 
$commands+=("wait");

return $commands;
}

 function Get-acm-add-tags-to-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-delete-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-describe-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-export-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-arn"); 
$flags+=("--passphrase"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-get-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-import-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-arn"); 
$flags+=("--certificate"); 
$flags+=("--private-key"); 
$flags+=("--certificate-chain"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-list-certificates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-statuses"); 
$flags+=("--includes"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-list-tags-for-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-remove-tags-from-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-renew-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-request-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--validation-method"); 
$flags+=("--subject-alternative-names"); 
$flags+=("--idempotency-token"); 
$flags+=("--domain-validation-options"); 
$flags+=("--options"); 
$flags+=("--certificate-authority-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-resend-validation-email {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-arn"); 
$flags+=("--domain"); 
$flags+=("--validation-domain"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-update-certificate-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-arn"); 
$flags+=("--options"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-acm-pca {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-certificate-authority"); 
$commands+=("create-certificate-authority-audit-report"); 
$commands+=("create-permission"); 
$commands+=("delete-certificate-authority"); 
$commands+=("delete-permission"); 
$commands+=("describe-certificate-authority"); 
$commands+=("describe-certificate-authority-audit-report"); 
$commands+=("get-certificate"); 
$commands+=("get-certificate-authority-certificate"); 
$commands+=("get-certificate-authority-csr"); 
$commands+=("import-certificate-authority-certificate"); 
$commands+=("issue-certificate"); 
$commands+=("list-certificate-authorities"); 
$commands+=("list-permissions"); 
$commands+=("list-tags"); 
$commands+=("restore-certificate-authority"); 
$commands+=("revoke-certificate"); 
$commands+=("tag-certificate-authority"); 
$commands+=("untag-certificate-authority"); 
$commands+=("update-certificate-authority"); 
$commands+=("wait");

return $commands;
}

 function Get-acm-pca-create-certificate-authority {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-authority-configuration"); 
$flags+=("--revocation-configuration"); 
$flags+=("--certificate-authority-type"); 
$flags+=("--idempotency-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-pca-create-certificate-authority-audit-report {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-authority-arn"); 
$flags+=("--s"); 
$flags+=("--audit-report-response-format"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-pca-create-permission {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-authority-arn"); 
$flags+=("--principal"); 
$flags+=("--source-account"); 
$flags+=("--actions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-pca-delete-certificate-authority {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-authority-arn"); 
$flags+=("--permanent-deletion-time-in-days"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-pca-delete-permission {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-authority-arn"); 
$flags+=("--principal"); 
$flags+=("--source-account"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-pca-describe-certificate-authority {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-authority-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-pca-describe-certificate-authority-audit-report {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-authority-arn"); 
$flags+=("--audit-report-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-pca-get-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-authority-arn"); 
$flags+=("--certificate-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-pca-get-certificate-authority-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-authority-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-pca-get-certificate-authority-csr {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-authority-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-pca-import-certificate-authority-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-authority-arn"); 
$flags+=("--certificate"); 
$flags+=("--certificate-chain"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-pca-issue-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-authority-arn"); 
$flags+=("--csr"); 
$flags+=("--signing-algorithm"); 
$flags+=("--template-arn"); 
$flags+=("--validity"); 
$flags+=("--idempotency-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-pca-list-certificate-authorities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-pca-list-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-authority-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-pca-list-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-authority-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-pca-restore-certificate-authority {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-authority-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-pca-revoke-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-authority-arn"); 
$flags+=("--certificate-serial"); 
$flags+=("--revocation-reason"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-pca-tag-certificate-authority {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-authority-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-pca-untag-certificate-authority {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-authority-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-pca-update-certificate-authority {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-authority-arn"); 
$flags+=("--revocation-configuration"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-acm-pca-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-alexaforbusiness {
    $commands = [System.Collections.ArrayList]@();

$commands+=("approve-skill"); 
$commands+=("associate-contact-with-address-book"); 
$commands+=("associate-device-with-network-profile"); 
$commands+=("associate-device-with-room"); 
$commands+=("associate-skill-group-with-room"); 
$commands+=("associate-skill-with-skill-group"); 
$commands+=("associate-skill-with-users"); 
$commands+=("create-address-book"); 
$commands+=("create-business-report-schedule"); 
$commands+=("create-conference-provider"); 
$commands+=("create-contact"); 
$commands+=("create-gateway-group"); 
$commands+=("create-network-profile"); 
$commands+=("create-profile"); 
$commands+=("create-room"); 
$commands+=("create-skill-group"); 
$commands+=("create-user"); 
$commands+=("delete-address-book"); 
$commands+=("delete-business-report-schedule"); 
$commands+=("delete-conference-provider"); 
$commands+=("delete-contact"); 
$commands+=("delete-device"); 
$commands+=("delete-device-usage-data"); 
$commands+=("delete-gateway-group"); 
$commands+=("delete-network-profile"); 
$commands+=("delete-profile"); 
$commands+=("delete-room"); 
$commands+=("delete-room-skill-parameter"); 
$commands+=("delete-skill-authorization"); 
$commands+=("delete-skill-group"); 
$commands+=("delete-user"); 
$commands+=("disassociate-contact-from-address-book"); 
$commands+=("disassociate-device-from-room"); 
$commands+=("disassociate-skill-from-skill-group"); 
$commands+=("disassociate-skill-from-users"); 
$commands+=("disassociate-skill-group-from-room"); 
$commands+=("forget-smart-home-appliances"); 
$commands+=("get-address-book"); 
$commands+=("get-conference-preference"); 
$commands+=("get-conference-provider"); 
$commands+=("get-contact"); 
$commands+=("get-device"); 
$commands+=("get-gateway"); 
$commands+=("get-gateway-group"); 
$commands+=("get-invitation-configuration"); 
$commands+=("get-network-profile"); 
$commands+=("get-profile"); 
$commands+=("get-room"); 
$commands+=("get-room-skill-parameter"); 
$commands+=("get-skill-group"); 
$commands+=("list-business-report-schedules"); 
$commands+=("list-conference-providers"); 
$commands+=("list-device-events"); 
$commands+=("list-gateway-groups"); 
$commands+=("list-gateways"); 
$commands+=("list-skills"); 
$commands+=("list-skills-store-categories"); 
$commands+=("list-skills-store-skills-by-category"); 
$commands+=("list-smart-home-appliances"); 
$commands+=("list-tags"); 
$commands+=("put-conference-preference"); 
$commands+=("put-invitation-configuration"); 
$commands+=("put-room-skill-parameter"); 
$commands+=("put-skill-authorization"); 
$commands+=("register-avs-device"); 
$commands+=("reject-skill"); 
$commands+=("resolve-room"); 
$commands+=("revoke-invitation"); 
$commands+=("search-address-books"); 
$commands+=("search-contacts"); 
$commands+=("search-devices"); 
$commands+=("search-network-profiles"); 
$commands+=("search-profiles"); 
$commands+=("search-rooms"); 
$commands+=("search-skill-groups"); 
$commands+=("search-users"); 
$commands+=("send-announcement"); 
$commands+=("send-invitation"); 
$commands+=("start-device-sync"); 
$commands+=("start-smart-home-appliance-discovery"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-address-book"); 
$commands+=("update-business-report-schedule"); 
$commands+=("update-conference-provider"); 
$commands+=("update-contact"); 
$commands+=("update-device"); 
$commands+=("update-gateway"); 
$commands+=("update-gateway-group"); 
$commands+=("update-network-profile"); 
$commands+=("update-profile"); 
$commands+=("update-room"); 
$commands+=("update-skill-group");

return $commands;
}

 function Get-alexaforbusiness-approve-skill {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--skill-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-associate-contact-with-address-book {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--contact-arn"); 
$flags+=("--address-book-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-associate-device-with-network-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-arn"); 
$flags+=("--network-profile-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-associate-device-with-room {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-arn"); 
$flags+=("--room-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-associate-skill-group-with-room {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--skill-group-arn"); 
$flags+=("--room-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-associate-skill-with-skill-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--skill-group-arn"); 
$flags+=("--skill-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-associate-skill-with-users {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--skill-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-create-address-book {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-create-business-report-schedule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schedule-name"); 
$flags+=("--s"); 
$flags+=("--s"); 
$flags+=("--format"); 
$flags+=("--content-range"); 
$flags+=("--recurrence"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-create-conference-provider {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--conference-provider-name"); 
$flags+=("--conference-provider-type"); 
$flags+=("--ip-dial-in"); 
$flags+=("--pstn-dial-in"); 
$flags+=("--meeting-setting"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-create-contact {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--display-name"); 
$flags+=("--first-name"); 
$flags+=("--last-name"); 
$flags+=("--phone-number"); 
$flags+=("--phone-numbers"); 
$flags+=("--sip-addresses"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-create-gateway-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-create-network-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--network-profile-name"); 
$flags+=("--description"); 
$flags+=("--ssid"); 
$flags+=("--security-type"); 
$flags+=("--eap-method"); 
$flags+=("--current-password"); 
$flags+=("--next-password"); 
$flags+=("--certificate-authority-arn"); 
$flags+=("--trust-anchors"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-create-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--profile-name"); 
$flags+=("--timezone"); 
$flags+=("--address"); 
$flags+=("--distance-unit"); 
$flags+=("--temperature-unit"); 
$flags+=("--wake-word"); 
$flags+=("--locale"); 
$flags+=("--client-request-token"); 
$flags+=("--setup-mode-disabled"); 
$flags+=("--no-setup-mode-disabled"); 
$flags+=("--max-volume-limit"); 
$flags+=("--pstn-enabled"); 
$flags+=("--no-pstn-enabled"); 
$flags+=("--meeting-room-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-create-room {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--room-name"); 
$flags+=("--description"); 
$flags+=("--profile-arn"); 
$flags+=("--provider-calendar-id"); 
$flags+=("--client-request-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-create-skill-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--skill-group-name"); 
$flags+=("--description"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-create-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-id"); 
$flags+=("--first-name"); 
$flags+=("--last-name"); 
$flags+=("--email"); 
$flags+=("--client-request-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-delete-address-book {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--address-book-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-delete-business-report-schedule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schedule-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-delete-conference-provider {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--conference-provider-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-delete-contact {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--contact-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-delete-device {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-delete-device-usage-data {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-arn"); 
$flags+=("--device-usage-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-delete-gateway-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-delete-network-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--network-profile-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-delete-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--profile-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-delete-room {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--room-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-delete-room-skill-parameter {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--room-arn"); 
$flags+=("--skill-id"); 
$flags+=("--parameter-key"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-delete-skill-authorization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--skill-id"); 
$flags+=("--room-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-delete-skill-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--skill-group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-delete-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-arn"); 
$flags+=("--enrollment-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-disassociate-contact-from-address-book {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--contact-arn"); 
$flags+=("--address-book-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-disassociate-device-from-room {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-disassociate-skill-from-skill-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--skill-group-arn"); 
$flags+=("--skill-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-disassociate-skill-from-users {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--skill-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-disassociate-skill-group-from-room {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--skill-group-arn"); 
$flags+=("--room-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-forget-smart-home-appliances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--room-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-get-address-book {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--address-book-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-get-conference-preference {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-get-conference-provider {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--conference-provider-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-get-contact {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--contact-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-get-device {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-get-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-get-gateway-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-get-invitation-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-get-network-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--network-profile-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-get-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--profile-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-get-room {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--room-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-get-room-skill-parameter {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--room-arn"); 
$flags+=("--skill-id"); 
$flags+=("--parameter-key"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-get-skill-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--skill-group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-list-business-report-schedules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-list-conference-providers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-list-device-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-arn"); 
$flags+=("--event-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-list-gateway-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-list-gateways {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-group-arn"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-list-skills {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--skill-group-arn"); 
$flags+=("--enablement-type"); 
$flags+=("--skill-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-list-skills-store-categories {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-list-skills-store-skills-by-category {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--category-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-list-smart-home-appliances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--room-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-list-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-put-conference-preference {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--conference-preference"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-put-invitation-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-name"); 
$flags+=("--contact-email"); 
$flags+=("--private-skill-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-put-room-skill-parameter {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--room-arn"); 
$flags+=("--skill-id"); 
$flags+=("--room-skill-parameter"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-put-skill-authorization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authorization-result"); 
$flags+=("--skill-id"); 
$flags+=("--room-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-register-avs-device {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-id"); 
$flags+=("--user-code"); 
$flags+=("--product-id"); 
$flags+=("--device-serial-number"); 
$flags+=("--amazon-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-reject-skill {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--skill-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-resolve-room {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-id"); 
$flags+=("--skill-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-revoke-invitation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-arn"); 
$flags+=("--enrollment-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-search-address-books {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--sort-criteria"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-search-contacts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--sort-criteria"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-search-devices {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--sort-criteria"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-search-network-profiles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--filters"); 
$flags+=("--sort-criteria"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-search-profiles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--sort-criteria"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-search-rooms {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--sort-criteria"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-search-skill-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--sort-criteria"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-search-users {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--sort-criteria"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-send-announcement {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--room-filters"); 
$flags+=("--content"); 
$flags+=("--time-to-live-in-seconds"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-send-invitation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-start-device-sync {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--room-arn"); 
$flags+=("--device-arn"); 
$flags+=("--features"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-start-smart-home-appliance-discovery {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--room-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-update-address-book {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--address-book-arn"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-update-business-report-schedule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schedule-arn"); 
$flags+=("--s"); 
$flags+=("--s"); 
$flags+=("--format"); 
$flags+=("--schedule-name"); 
$flags+=("--recurrence"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-update-conference-provider {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--conference-provider-arn"); 
$flags+=("--conference-provider-type"); 
$flags+=("--ip-dial-in"); 
$flags+=("--pstn-dial-in"); 
$flags+=("--meeting-setting"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-update-contact {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--contact-arn"); 
$flags+=("--display-name"); 
$flags+=("--first-name"); 
$flags+=("--last-name"); 
$flags+=("--phone-number"); 
$flags+=("--phone-numbers"); 
$flags+=("--sip-addresses"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-update-device {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-arn"); 
$flags+=("--device-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-update-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--software-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-update-gateway-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-group-arn"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-update-network-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--network-profile-arn"); 
$flags+=("--network-profile-name"); 
$flags+=("--description"); 
$flags+=("--current-password"); 
$flags+=("--next-password"); 
$flags+=("--certificate-authority-arn"); 
$flags+=("--trust-anchors"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-update-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--profile-arn"); 
$flags+=("--profile-name"); 
$flags+=("--is-default"); 
$flags+=("--no-is-default"); 
$flags+=("--timezone"); 
$flags+=("--address"); 
$flags+=("--distance-unit"); 
$flags+=("--temperature-unit"); 
$flags+=("--wake-word"); 
$flags+=("--locale"); 
$flags+=("--setup-mode-disabled"); 
$flags+=("--no-setup-mode-disabled"); 
$flags+=("--max-volume-limit"); 
$flags+=("--pstn-enabled"); 
$flags+=("--no-pstn-enabled"); 
$flags+=("--meeting-room-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-update-room {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--room-arn"); 
$flags+=("--room-name"); 
$flags+=("--description"); 
$flags+=("--provider-calendar-id"); 
$flags+=("--profile-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-alexaforbusiness-update-skill-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--skill-group-arn"); 
$flags+=("--skill-group-name"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-app"); 
$commands+=("create-backend-environment"); 
$commands+=("create-branch"); 
$commands+=("create-deployment"); 
$commands+=("create-domain-association"); 
$commands+=("create-webhook"); 
$commands+=("delete-app"); 
$commands+=("delete-backend-environment"); 
$commands+=("delete-branch"); 
$commands+=("delete-domain-association"); 
$commands+=("delete-job"); 
$commands+=("delete-webhook"); 
$commands+=("generate-access-logs"); 
$commands+=("get-app"); 
$commands+=("get-artifact-url"); 
$commands+=("get-backend-environment"); 
$commands+=("get-branch"); 
$commands+=("get-domain-association"); 
$commands+=("get-job"); 
$commands+=("get-webhook"); 
$commands+=("list-apps"); 
$commands+=("list-artifacts"); 
$commands+=("list-backend-environments"); 
$commands+=("list-branches"); 
$commands+=("list-domain-associations"); 
$commands+=("list-jobs"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-webhooks"); 
$commands+=("start-deployment"); 
$commands+=("start-job"); 
$commands+=("stop-job"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-app"); 
$commands+=("update-branch"); 
$commands+=("update-domain-association"); 
$commands+=("update-webhook");

return $commands;
}

 function Get-amplify-create-app {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--repository"); 
$flags+=("--platform"); 
$flags+=("--iam-service-role-arn"); 
$flags+=("--oauth-token"); 
$flags+=("--access-token"); 
$flags+=("--environment-variables"); 
$flags+=("--enable-branch-auto-build"); 
$flags+=("--no-enable-branch-auto-build"); 
$flags+=("--enable-basic-auth"); 
$flags+=("--no-enable-basic-auth"); 
$flags+=("--basic-auth-credentials"); 
$flags+=("--custom-rules"); 
$flags+=("--tags"); 
$flags+=("--build-spec"); 
$flags+=("--enable-auto-branch-creation"); 
$flags+=("--no-enable-auto-branch-creation"); 
$flags+=("--auto-branch-creation-patterns"); 
$flags+=("--auto-branch-creation-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-create-backend-environment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--environment-name"); 
$flags+=("--stack-name"); 
$flags+=("--deployment-artifacts"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-create-branch {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--branch-name"); 
$flags+=("--description"); 
$flags+=("--stage"); 
$flags+=("--framework"); 
$flags+=("--enable-notification"); 
$flags+=("--no-enable-notification"); 
$flags+=("--enable-auto-build"); 
$flags+=("--no-enable-auto-build"); 
$flags+=("--environment-variables"); 
$flags+=("--basic-auth-credentials"); 
$flags+=("--enable-basic-auth"); 
$flags+=("--no-enable-basic-auth"); 
$flags+=("--tags"); 
$flags+=("--build-spec"); 
$flags+=("--ttl"); 
$flags+=("--display-name"); 
$flags+=("--enable-pull-request-preview"); 
$flags+=("--no-enable-pull-request-preview"); 
$flags+=("--pull-request-environment-name"); 
$flags+=("--backend-environment-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-create-deployment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--branch-name"); 
$flags+=("--file-map"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-create-domain-association {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--domain-name"); 
$flags+=("--enable-auto-sub-domain"); 
$flags+=("--no-enable-auto-sub-domain"); 
$flags+=("--sub-domain-settings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-create-webhook {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--branch-name"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-delete-app {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-delete-backend-environment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--environment-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-delete-branch {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--branch-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-delete-domain-association {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-delete-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--branch-name"); 
$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-delete-webhook {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--webhook-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-generate-access-logs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--domain-name"); 
$flags+=("--app-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-get-app {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-get-artifact-url {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--artifact-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-get-backend-environment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--environment-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-get-branch {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--branch-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-get-domain-association {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-get-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--branch-name"); 
$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-get-webhook {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--webhook-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-list-apps {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-list-artifacts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--branch-name"); 
$flags+=("--job-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-list-backend-environments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--environment-name"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-list-branches {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-list-domain-associations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-list-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--branch-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-list-webhooks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-start-deployment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--branch-name"); 
$flags+=("--job-id"); 
$flags+=("--source-url"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-start-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--branch-name"); 
$flags+=("--job-id"); 
$flags+=("--job-type"); 
$flags+=("--job-reason"); 
$flags+=("--commit-id"); 
$flags+=("--commit-message"); 
$flags+=("--commit-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-stop-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--branch-name"); 
$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-update-app {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--platform"); 
$flags+=("--iam-service-role-arn"); 
$flags+=("--environment-variables"); 
$flags+=("--enable-branch-auto-build"); 
$flags+=("--no-enable-branch-auto-build"); 
$flags+=("--enable-basic-auth"); 
$flags+=("--no-enable-basic-auth"); 
$flags+=("--basic-auth-credentials"); 
$flags+=("--custom-rules"); 
$flags+=("--build-spec"); 
$flags+=("--enable-auto-branch-creation"); 
$flags+=("--no-enable-auto-branch-creation"); 
$flags+=("--auto-branch-creation-patterns"); 
$flags+=("--auto-branch-creation-config"); 
$flags+=("--repository"); 
$flags+=("--oauth-token"); 
$flags+=("--access-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-update-branch {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--branch-name"); 
$flags+=("--description"); 
$flags+=("--framework"); 
$flags+=("--stage"); 
$flags+=("--enable-notification"); 
$flags+=("--no-enable-notification"); 
$flags+=("--enable-auto-build"); 
$flags+=("--no-enable-auto-build"); 
$flags+=("--environment-variables"); 
$flags+=("--basic-auth-credentials"); 
$flags+=("--enable-basic-auth"); 
$flags+=("--no-enable-basic-auth"); 
$flags+=("--build-spec"); 
$flags+=("--ttl"); 
$flags+=("--display-name"); 
$flags+=("--enable-pull-request-preview"); 
$flags+=("--no-enable-pull-request-preview"); 
$flags+=("--pull-request-environment-name"); 
$flags+=("--backend-environment-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-update-domain-association {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--domain-name"); 
$flags+=("--enable-auto-sub-domain"); 
$flags+=("--no-enable-auto-sub-domain"); 
$flags+=("--sub-domain-settings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-amplify-update-webhook {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--webhook-id"); 
$flags+=("--branch-name"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-api-key"); 
$commands+=("create-authorizer"); 
$commands+=("create-base-path-mapping"); 
$commands+=("create-deployment"); 
$commands+=("create-documentation-part"); 
$commands+=("create-documentation-version"); 
$commands+=("create-domain-name"); 
$commands+=("create-model"); 
$commands+=("create-request-validator"); 
$commands+=("create-resource"); 
$commands+=("create-rest-api"); 
$commands+=("create-stage"); 
$commands+=("create-usage-plan"); 
$commands+=("create-usage-plan-key"); 
$commands+=("create-vpc-link"); 
$commands+=("delete-api-key"); 
$commands+=("delete-authorizer"); 
$commands+=("delete-base-path-mapping"); 
$commands+=("delete-client-certificate"); 
$commands+=("delete-deployment"); 
$commands+=("delete-documentation-part"); 
$commands+=("delete-documentation-version"); 
$commands+=("delete-domain-name"); 
$commands+=("delete-gateway-response"); 
$commands+=("delete-integration"); 
$commands+=("delete-integration-response"); 
$commands+=("delete-method"); 
$commands+=("delete-method-response"); 
$commands+=("delete-model"); 
$commands+=("delete-request-validator"); 
$commands+=("delete-resource"); 
$commands+=("delete-rest-api"); 
$commands+=("delete-stage"); 
$commands+=("delete-usage-plan"); 
$commands+=("delete-usage-plan-key"); 
$commands+=("delete-vpc-link"); 
$commands+=("flush-stage-authorizers-cache"); 
$commands+=("flush-stage-cache"); 
$commands+=("generate-client-certificate"); 
$commands+=("get-account"); 
$commands+=("get-api-key"); 
$commands+=("get-api-keys"); 
$commands+=("get-authorizer"); 
$commands+=("get-authorizers"); 
$commands+=("get-base-path-mapping"); 
$commands+=("get-base-path-mappings"); 
$commands+=("get-client-certificate"); 
$commands+=("get-client-certificates"); 
$commands+=("get-deployment"); 
$commands+=("get-deployments"); 
$commands+=("get-documentation-part"); 
$commands+=("get-documentation-parts"); 
$commands+=("get-documentation-version"); 
$commands+=("get-documentation-versions"); 
$commands+=("get-domain-name"); 
$commands+=("get-domain-names"); 
$commands+=("get-export"); 
$commands+=("get-gateway-response"); 
$commands+=("get-gateway-responses"); 
$commands+=("get-integration"); 
$commands+=("get-integration-response"); 
$commands+=("get-method"); 
$commands+=("get-method-response"); 
$commands+=("get-model"); 
$commands+=("get-model-template"); 
$commands+=("get-models"); 
$commands+=("get-request-validator"); 
$commands+=("get-request-validators"); 
$commands+=("get-resource"); 
$commands+=("get-resources"); 
$commands+=("get-rest-api"); 
$commands+=("get-rest-apis"); 
$commands+=("get-sdk"); 
$commands+=("get-sdk-type"); 
$commands+=("get-sdk-types"); 
$commands+=("get-stage"); 
$commands+=("get-stages"); 
$commands+=("get-tags"); 
$commands+=("get-usage"); 
$commands+=("get-usage-plan"); 
$commands+=("get-usage-plan-key"); 
$commands+=("get-usage-plan-keys"); 
$commands+=("get-usage-plans"); 
$commands+=("get-vpc-link"); 
$commands+=("get-vpc-links"); 
$commands+=("import-api-keys"); 
$commands+=("import-documentation-parts"); 
$commands+=("import-rest-api"); 
$commands+=("put-gateway-response"); 
$commands+=("put-integration"); 
$commands+=("put-integration-response"); 
$commands+=("put-method"); 
$commands+=("put-method-response"); 
$commands+=("put-rest-api"); 
$commands+=("tag-resource"); 
$commands+=("test-invoke-authorizer"); 
$commands+=("test-invoke-method"); 
$commands+=("untag-resource"); 
$commands+=("update-account"); 
$commands+=("update-api-key"); 
$commands+=("update-authorizer"); 
$commands+=("update-base-path-mapping"); 
$commands+=("update-client-certificate"); 
$commands+=("update-deployment"); 
$commands+=("update-documentation-part"); 
$commands+=("update-documentation-version"); 
$commands+=("update-domain-name"); 
$commands+=("update-gateway-response"); 
$commands+=("update-integration"); 
$commands+=("update-integration-response"); 
$commands+=("update-method"); 
$commands+=("update-method-response"); 
$commands+=("update-model"); 
$commands+=("update-request-validator"); 
$commands+=("update-resource"); 
$commands+=("update-rest-api"); 
$commands+=("update-stage"); 
$commands+=("update-usage"); 
$commands+=("update-usage-plan"); 
$commands+=("update-vpc-link");

return $commands;
}

 function Get-apigateway-create-api-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--enabled"); 
$flags+=("--no-enabled"); 
$flags+=("--generate-distinct-id"); 
$flags+=("--no-generate-distinct-id"); 
$flags+=("--value"); 
$flags+=("--stage-keys"); 
$flags+=("--customer-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-create-authorizer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--name"); 
$flags+=("--type"); 
$flags+=("--provider-arns"); 
$flags+=("--auth-type"); 
$flags+=("--authorizer-uri"); 
$flags+=("--authorizer-credentials"); 
$flags+=("--identity-source"); 
$flags+=("--identity-validation-expression"); 
$flags+=("--authorizer-result-ttl-in-seconds"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-create-base-path-mapping {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--base-path"); 
$flags+=("--rest-api-id"); 
$flags+=("--stage"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-create-deployment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--stage-name"); 
$flags+=("--stage-description"); 
$flags+=("--description"); 
$flags+=("--cache-cluster-enabled"); 
$flags+=("--no-cache-cluster-enabled"); 
$flags+=("--cache-cluster-size"); 
$flags+=("--variables"); 
$flags+=("--canary-settings"); 
$flags+=("--tracing-enabled"); 
$flags+=("--no-tracing-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-create-documentation-part {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--location"); 
$flags+=("--properties"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-create-documentation-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--documentation-version"); 
$flags+=("--stage-name"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-create-domain-name {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--certificate-name"); 
$flags+=("--certificate-body"); 
$flags+=("--certificate-private-key"); 
$flags+=("--certificate-chain"); 
$flags+=("--certificate-arn"); 
$flags+=("--regional-certificate-name"); 
$flags+=("--regional-certificate-arn"); 
$flags+=("--endpoint-configuration"); 
$flags+=("--tags"); 
$flags+=("--security-policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-create-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--schema"); 
$flags+=("--content-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-create-request-validator {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--name"); 
$flags+=("--validate-request-body"); 
$flags+=("--no-validate-request-body"); 
$flags+=("--validate-request-parameters"); 
$flags+=("--no-validate-request-parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-create-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--parent-id"); 
$flags+=("--path-part"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-create-rest-api {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--clone-from"); 
$flags+=("--binary-media-types"); 
$flags+=("--minimum-compression-size"); 
$flags+=("--api-key-source"); 
$flags+=("--endpoint-configuration"); 
$flags+=("--policy"); 
$flags+=("--tags"); 
$flags+=("--api-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-create-stage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--stage-name"); 
$flags+=("--deployment-id"); 
$flags+=("--description"); 
$flags+=("--cache-cluster-enabled"); 
$flags+=("--no-cache-cluster-enabled"); 
$flags+=("--cache-cluster-size"); 
$flags+=("--variables"); 
$flags+=("--documentation-version"); 
$flags+=("--canary-settings"); 
$flags+=("--tracing-enabled"); 
$flags+=("--no-tracing-enabled"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-create-usage-plan {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--api-stages"); 
$flags+=("--throttle"); 
$flags+=("--quota"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-create-usage-plan-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--usage-plan-id"); 
$flags+=("--key-id"); 
$flags+=("--key-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-create-vpc-link {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--target-arns"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-delete-api-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-key"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-delete-authorizer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--authorizer-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-delete-base-path-mapping {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--base-path"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-delete-client-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-certificate-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-delete-deployment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--deployment-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-delete-documentation-part {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--documentation-part-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-delete-documentation-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--documentation-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-delete-domain-name {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-delete-gateway-response {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--response-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-delete-integration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--resource-id"); 
$flags+=("--http-method"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-delete-integration-response {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--resource-id"); 
$flags+=("--http-method"); 
$flags+=("--status-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-delete-method {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--resource-id"); 
$flags+=("--http-method"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-delete-method-response {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--resource-id"); 
$flags+=("--http-method"); 
$flags+=("--status-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-delete-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--model-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-delete-request-validator {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--request-validator-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-delete-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--resource-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-delete-rest-api {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-delete-stage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--stage-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-delete-usage-plan {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--usage-plan-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-delete-usage-plan-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--usage-plan-id"); 
$flags+=("--key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-delete-vpc-link {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vpc-link-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-flush-stage-authorizers-cache {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--stage-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-flush-stage-cache {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--stage-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-generate-client-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-api-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-key"); 
$flags+=("--include-value"); 
$flags+=("--no-include-value"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-api-keys {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name-query"); 
$flags+=("--customer-id"); 
$flags+=("--include-values"); 
$flags+=("--no-include-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-authorizer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--authorizer-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-authorizers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-base-path-mapping {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--base-path"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-base-path-mappings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-client-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-certificate-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-client-certificates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-deployment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--deployment-id"); 
$flags+=("--embed"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-deployments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-documentation-part {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--documentation-part-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-documentation-parts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--type"); 
$flags+=("--name-query"); 
$flags+=("--path"); 
$flags+=("--location-status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-documentation-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--documentation-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-documentation-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-domain-name {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-domain-names {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-export {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--stage-name"); 
$flags+=("--export-type"); 
$flags+=("--parameters"); 
$flags+=("--accepts");

return $flags;
}

 function Get-apigateway-get-gateway-response {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--response-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-gateway-responses {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-integration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--resource-id"); 
$flags+=("--http-method"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-integration-response {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--resource-id"); 
$flags+=("--http-method"); 
$flags+=("--status-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-method {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--resource-id"); 
$flags+=("--http-method"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-method-response {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--resource-id"); 
$flags+=("--http-method"); 
$flags+=("--status-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--model-name"); 
$flags+=("--flatten"); 
$flags+=("--no-flatten"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-model-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--model-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-models {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-request-validator {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--request-validator-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-request-validators {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--resource-id"); 
$flags+=("--embed"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--embed"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-rest-api {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-rest-apis {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-sdk {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--stage-name"); 
$flags+=("--sdk-type"); 
$flags+=("--parameters");

return $flags;
}

 function Get-apigateway-get-sdk-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-sdk-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-stage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--stage-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-stages {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--deployment-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--position"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-usage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--usage-plan-id"); 
$flags+=("--key-id"); 
$flags+=("--start-date"); 
$flags+=("--end-date"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-usage-plan {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--usage-plan-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-usage-plan-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--usage-plan-id"); 
$flags+=("--key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-usage-plan-keys {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--usage-plan-id"); 
$flags+=("--name-query"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-usage-plans {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-vpc-link {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vpc-link-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-get-vpc-links {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-import-api-keys {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--body"); 
$flags+=("--format"); 
$flags+=("--fail-on-warnings"); 
$flags+=("--no-fail-on-warnings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-import-documentation-parts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--mode"); 
$flags+=("--fail-on-warnings"); 
$flags+=("--no-fail-on-warnings"); 
$flags+=("--body"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-import-rest-api {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fail-on-warnings"); 
$flags+=("--no-fail-on-warnings"); 
$flags+=("--parameters"); 
$flags+=("--body"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-put-gateway-response {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--response-type"); 
$flags+=("--status-code"); 
$flags+=("--response-parameters"); 
$flags+=("--response-templates"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-put-integration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--resource-id"); 
$flags+=("--http-method"); 
$flags+=("--type"); 
$flags+=("--integration-http-method"); 
$flags+=("--uri"); 
$flags+=("--connection-type"); 
$flags+=("--connection-id"); 
$flags+=("--credentials"); 
$flags+=("--request-parameters"); 
$flags+=("--request-templates"); 
$flags+=("--passthrough-behavior"); 
$flags+=("--cache-namespace"); 
$flags+=("--cache-key-parameters"); 
$flags+=("--content-handling"); 
$flags+=("--timeout-in-millis"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-put-integration-response {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--resource-id"); 
$flags+=("--http-method"); 
$flags+=("--status-code"); 
$flags+=("--selection-pattern"); 
$flags+=("--response-parameters"); 
$flags+=("--response-templates"); 
$flags+=("--content-handling"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-put-method {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--resource-id"); 
$flags+=("--http-method"); 
$flags+=("--authorization-type"); 
$flags+=("--authorizer-id"); 
$flags+=("--api-key-required"); 
$flags+=("--no-api-key-required"); 
$flags+=("--operation-name"); 
$flags+=("--request-parameters"); 
$flags+=("--request-models"); 
$flags+=("--request-validator-id"); 
$flags+=("--authorization-scopes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-put-method-response {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--resource-id"); 
$flags+=("--http-method"); 
$flags+=("--status-code"); 
$flags+=("--response-parameters"); 
$flags+=("--response-models"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-put-rest-api {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--mode"); 
$flags+=("--fail-on-warnings"); 
$flags+=("--no-fail-on-warnings"); 
$flags+=("--parameters"); 
$flags+=("--body"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-test-invoke-authorizer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--authorizer-id"); 
$flags+=("--headers"); 
$flags+=("--multi-value-headers"); 
$flags+=("--path-with-query-string"); 
$flags+=("--body"); 
$flags+=("--stage-variables"); 
$flags+=("--additional-context"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-test-invoke-method {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--resource-id"); 
$flags+=("--http-method"); 
$flags+=("--path-with-query-string"); 
$flags+=("--body"); 
$flags+=("--headers"); 
$flags+=("--multi-value-headers"); 
$flags+=("--client-certificate-id"); 
$flags+=("--stage-variables"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-update-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--patch-operations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-update-api-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-key"); 
$flags+=("--patch-operations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-update-authorizer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--authorizer-id"); 
$flags+=("--patch-operations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-update-base-path-mapping {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--base-path"); 
$flags+=("--patch-operations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-update-client-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-certificate-id"); 
$flags+=("--patch-operations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-update-deployment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--deployment-id"); 
$flags+=("--patch-operations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-update-documentation-part {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--documentation-part-id"); 
$flags+=("--patch-operations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-update-documentation-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--documentation-version"); 
$flags+=("--patch-operations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-update-domain-name {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--patch-operations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-update-gateway-response {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--response-type"); 
$flags+=("--patch-operations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-update-integration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--resource-id"); 
$flags+=("--http-method"); 
$flags+=("--patch-operations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-update-integration-response {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--resource-id"); 
$flags+=("--http-method"); 
$flags+=("--status-code"); 
$flags+=("--patch-operations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-update-method {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--resource-id"); 
$flags+=("--http-method"); 
$flags+=("--patch-operations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-update-method-response {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--resource-id"); 
$flags+=("--http-method"); 
$flags+=("--status-code"); 
$flags+=("--patch-operations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-update-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--model-name"); 
$flags+=("--patch-operations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-update-request-validator {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--request-validator-id"); 
$flags+=("--patch-operations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-update-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--resource-id"); 
$flags+=("--patch-operations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-update-rest-api {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--patch-operations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-update-stage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rest-api-id"); 
$flags+=("--stage-name"); 
$flags+=("--patch-operations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-update-usage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--usage-plan-id"); 
$flags+=("--key-id"); 
$flags+=("--patch-operations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-update-usage-plan {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--usage-plan-id"); 
$flags+=("--patch-operations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigateway-update-vpc-link {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vpc-link-id"); 
$flags+=("--patch-operations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewaymanagementapi {
    $commands = [System.Collections.ArrayList]@();

$commands+=("delete-connection"); 
$commands+=("get-connection"); 
$commands+=("post-to-connection");

return $commands;
}

 function Get-apigatewaymanagementapi-delete-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewaymanagementapi-get-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewaymanagementapi-post-to-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--data"); 
$flags+=("--connection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2 {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-api"); 
$commands+=("create-api-mapping"); 
$commands+=("create-authorizer"); 
$commands+=("create-deployment"); 
$commands+=("create-domain-name"); 
$commands+=("create-integration"); 
$commands+=("create-integration-response"); 
$commands+=("create-model"); 
$commands+=("create-route"); 
$commands+=("create-route-response"); 
$commands+=("create-stage"); 
$commands+=("create-vpc-link"); 
$commands+=("delete-access-log-settings"); 
$commands+=("delete-api"); 
$commands+=("delete-api-mapping"); 
$commands+=("delete-authorizer"); 
$commands+=("delete-cors-configuration"); 
$commands+=("delete-deployment"); 
$commands+=("delete-domain-name"); 
$commands+=("delete-integration"); 
$commands+=("delete-integration-response"); 
$commands+=("delete-model"); 
$commands+=("delete-route"); 
$commands+=("delete-route-request-parameter"); 
$commands+=("delete-route-response"); 
$commands+=("delete-route-settings"); 
$commands+=("delete-stage"); 
$commands+=("delete-vpc-link"); 
$commands+=("export-api"); 
$commands+=("get-api"); 
$commands+=("get-api-mapping"); 
$commands+=("get-api-mappings"); 
$commands+=("get-apis"); 
$commands+=("get-authorizer"); 
$commands+=("get-authorizers"); 
$commands+=("get-deployment"); 
$commands+=("get-deployments"); 
$commands+=("get-domain-name"); 
$commands+=("get-domain-names"); 
$commands+=("get-integration"); 
$commands+=("get-integration-response"); 
$commands+=("get-integration-responses"); 
$commands+=("get-integrations"); 
$commands+=("get-model"); 
$commands+=("get-model-template"); 
$commands+=("get-models"); 
$commands+=("get-route"); 
$commands+=("get-route-response"); 
$commands+=("get-route-responses"); 
$commands+=("get-routes"); 
$commands+=("get-stage"); 
$commands+=("get-stages"); 
$commands+=("get-tags"); 
$commands+=("get-vpc-link"); 
$commands+=("get-vpc-links"); 
$commands+=("import-api"); 
$commands+=("reimport-api"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-api"); 
$commands+=("update-api-mapping"); 
$commands+=("update-authorizer"); 
$commands+=("update-deployment"); 
$commands+=("update-domain-name"); 
$commands+=("update-integration"); 
$commands+=("update-integration-response"); 
$commands+=("update-model"); 
$commands+=("update-route"); 
$commands+=("update-route-response"); 
$commands+=("update-stage"); 
$commands+=("update-vpc-link");

return $commands;
}

 function Get-apigatewayv2-create-api {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-key-selection-expression"); 
$flags+=("--cors-configuration"); 
$flags+=("--credentials-arn"); 
$flags+=("--description"); 
$flags+=("--disable-schema-validation"); 
$flags+=("--no-disable-schema-validation"); 
$flags+=("--name"); 
$flags+=("--protocol-type"); 
$flags+=("--route-key"); 
$flags+=("--route-selection-expression"); 
$flags+=("--tags"); 
$flags+=("--target"); 
$flags+=("--api-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-create-api-mapping {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--api-mapping-key"); 
$flags+=("--domain-name"); 
$flags+=("--stage"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-create-authorizer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--authorizer-credentials-arn"); 
$flags+=("--authorizer-result-ttl-in-seconds"); 
$flags+=("--authorizer-type"); 
$flags+=("--authorizer-uri"); 
$flags+=("--identity-source"); 
$flags+=("--identity-validation-expression"); 
$flags+=("--jwt-configuration"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-create-deployment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--description"); 
$flags+=("--stage-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-create-domain-name {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--domain-name-configurations"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-create-integration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--connection-id"); 
$flags+=("--connection-type"); 
$flags+=("--content-handling-strategy"); 
$flags+=("--credentials-arn"); 
$flags+=("--description"); 
$flags+=("--integration-method"); 
$flags+=("--integration-type"); 
$flags+=("--integration-uri"); 
$flags+=("--passthrough-behavior"); 
$flags+=("--payload-format-version"); 
$flags+=("--request-parameters"); 
$flags+=("--request-templates"); 
$flags+=("--template-selection-expression"); 
$flags+=("--timeout-in-millis"); 
$flags+=("--tls-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-create-integration-response {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--content-handling-strategy"); 
$flags+=("--integration-id"); 
$flags+=("--integration-response-key"); 
$flags+=("--response-parameters"); 
$flags+=("--response-templates"); 
$flags+=("--template-selection-expression"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-create-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--content-type"); 
$flags+=("--description"); 
$flags+=("--name"); 
$flags+=("--schema"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-create-route {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--api-key-required"); 
$flags+=("--no-api-key-required"); 
$flags+=("--authorization-scopes"); 
$flags+=("--authorization-type"); 
$flags+=("--authorizer-id"); 
$flags+=("--model-selection-expression"); 
$flags+=("--operation-name"); 
$flags+=("--request-models"); 
$flags+=("--request-parameters"); 
$flags+=("--route-key"); 
$flags+=("--route-response-selection-expression"); 
$flags+=("--target"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-create-route-response {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--model-selection-expression"); 
$flags+=("--response-models"); 
$flags+=("--response-parameters"); 
$flags+=("--route-id"); 
$flags+=("--route-response-key"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-create-stage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--access-log-settings"); 
$flags+=("--api-id"); 
$flags+=("--auto-deploy"); 
$flags+=("--no-auto-deploy"); 
$flags+=("--client-certificate-id"); 
$flags+=("--default-route-settings"); 
$flags+=("--deployment-id"); 
$flags+=("--description"); 
$flags+=("--route-settings"); 
$flags+=("--stage-name"); 
$flags+=("--stage-variables"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-create-vpc-link {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--security-group-ids"); 
$flags+=("--subnet-ids"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-delete-access-log-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--stage-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-delete-api {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-delete-api-mapping {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-mapping-id"); 
$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-delete-authorizer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--authorizer-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-delete-cors-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-delete-deployment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--deployment-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-delete-domain-name {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-delete-integration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--integration-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-delete-integration-response {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--integration-id"); 
$flags+=("--integration-response-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-delete-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--model-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-delete-route {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--route-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-delete-route-request-parameter {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--request-parameter-key"); 
$flags+=("--route-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-delete-route-response {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--route-id"); 
$flags+=("--route-response-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-delete-route-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--route-key"); 
$flags+=("--stage-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-delete-stage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--stage-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-delete-vpc-link {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vpc-link-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-export-api {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--export-version"); 
$flags+=("--include-extensions"); 
$flags+=("--no-include-extensions"); 
$flags+=("--output-type"); 
$flags+=("--specification"); 
$flags+=("--stage-name");

return $flags;
}

 function Get-apigatewayv2-get-api {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-api-mapping {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-mapping-id"); 
$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-api-mappings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-apis {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-authorizer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--authorizer-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-authorizers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-deployment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--deployment-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-deployments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-domain-name {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-domain-names {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-integration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--integration-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-integration-response {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--integration-id"); 
$flags+=("--integration-response-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-integration-responses {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--integration-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-integrations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--model-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-model-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--model-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-models {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-route {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--route-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-route-response {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--route-id"); 
$flags+=("--route-response-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-route-responses {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--route-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-routes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-stage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--stage-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-stages {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-vpc-link {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vpc-link-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-get-vpc-links {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-import-api {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--basepath"); 
$flags+=("--body"); 
$flags+=("--fail-on-warnings"); 
$flags+=("--no-fail-on-warnings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-reimport-api {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--basepath"); 
$flags+=("--body"); 
$flags+=("--fail-on-warnings"); 
$flags+=("--no-fail-on-warnings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-update-api {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--api-key-selection-expression"); 
$flags+=("--cors-configuration"); 
$flags+=("--credentials-arn"); 
$flags+=("--description"); 
$flags+=("--disable-schema-validation"); 
$flags+=("--no-disable-schema-validation"); 
$flags+=("--name"); 
$flags+=("--route-key"); 
$flags+=("--route-selection-expression"); 
$flags+=("--target"); 
$flags+=("--api-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-update-api-mapping {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--api-mapping-id"); 
$flags+=("--api-mapping-key"); 
$flags+=("--domain-name"); 
$flags+=("--stage"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-update-authorizer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--authorizer-credentials-arn"); 
$flags+=("--authorizer-id"); 
$flags+=("--authorizer-result-ttl-in-seconds"); 
$flags+=("--authorizer-type"); 
$flags+=("--authorizer-uri"); 
$flags+=("--identity-source"); 
$flags+=("--identity-validation-expression"); 
$flags+=("--jwt-configuration"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-update-deployment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--deployment-id"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-update-domain-name {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--domain-name-configurations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-update-integration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--connection-id"); 
$flags+=("--connection-type"); 
$flags+=("--content-handling-strategy"); 
$flags+=("--credentials-arn"); 
$flags+=("--description"); 
$flags+=("--integration-id"); 
$flags+=("--integration-method"); 
$flags+=("--integration-type"); 
$flags+=("--integration-uri"); 
$flags+=("--passthrough-behavior"); 
$flags+=("--payload-format-version"); 
$flags+=("--request-parameters"); 
$flags+=("--request-templates"); 
$flags+=("--template-selection-expression"); 
$flags+=("--timeout-in-millis"); 
$flags+=("--tls-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-update-integration-response {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--content-handling-strategy"); 
$flags+=("--integration-id"); 
$flags+=("--integration-response-id"); 
$flags+=("--integration-response-key"); 
$flags+=("--response-parameters"); 
$flags+=("--response-templates"); 
$flags+=("--template-selection-expression"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-update-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--content-type"); 
$flags+=("--description"); 
$flags+=("--model-id"); 
$flags+=("--name"); 
$flags+=("--schema"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-update-route {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--api-key-required"); 
$flags+=("--no-api-key-required"); 
$flags+=("--authorization-scopes"); 
$flags+=("--authorization-type"); 
$flags+=("--authorizer-id"); 
$flags+=("--model-selection-expression"); 
$flags+=("--operation-name"); 
$flags+=("--request-models"); 
$flags+=("--request-parameters"); 
$flags+=("--route-id"); 
$flags+=("--route-key"); 
$flags+=("--route-response-selection-expression"); 
$flags+=("--target"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-update-route-response {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--model-selection-expression"); 
$flags+=("--response-models"); 
$flags+=("--response-parameters"); 
$flags+=("--route-id"); 
$flags+=("--route-response-id"); 
$flags+=("--route-response-key"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-update-stage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--access-log-settings"); 
$flags+=("--api-id"); 
$flags+=("--auto-deploy"); 
$flags+=("--no-auto-deploy"); 
$flags+=("--client-certificate-id"); 
$flags+=("--default-route-settings"); 
$flags+=("--deployment-id"); 
$flags+=("--description"); 
$flags+=("--route-settings"); 
$flags+=("--stage-name"); 
$flags+=("--stage-variables"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-apigatewayv2-update-vpc-link {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--vpc-link-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-application"); 
$commands+=("create-configuration-profile"); 
$commands+=("create-deployment-strategy"); 
$commands+=("create-environment"); 
$commands+=("delete-application"); 
$commands+=("delete-configuration-profile"); 
$commands+=("delete-deployment-strategy"); 
$commands+=("delete-environment"); 
$commands+=("get-application"); 
$commands+=("get-configuration"); 
$commands+=("get-configuration-profile"); 
$commands+=("get-deployment"); 
$commands+=("get-deployment-strategy"); 
$commands+=("get-environment"); 
$commands+=("list-applications"); 
$commands+=("list-configuration-profiles"); 
$commands+=("list-deployment-strategies"); 
$commands+=("list-deployments"); 
$commands+=("list-environments"); 
$commands+=("list-tags-for-resource"); 
$commands+=("start-deployment"); 
$commands+=("stop-deployment"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-application"); 
$commands+=("update-configuration-profile"); 
$commands+=("update-deployment-strategy"); 
$commands+=("update-environment"); 
$commands+=("validate-configuration");

return $commands;
}

 function Get-appconfig-create-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-create-configuration-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--location-uri"); 
$flags+=("--retrieval-role-arn"); 
$flags+=("--validators"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-create-deployment-strategy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--deployment-duration-in-minutes"); 
$flags+=("--final-bake-time-in-minutes"); 
$flags+=("--growth-factor"); 
$flags+=("--growth-type"); 
$flags+=("--replicate-to"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-create-environment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--monitors"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-delete-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-delete-configuration-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--configuration-profile-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-delete-deployment-strategy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--deployment-strategy-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-delete-environment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--environment-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-get-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-get-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application"); 
$flags+=("--environment"); 
$flags+=("--configuration"); 
$flags+=("--client-id"); 
$flags+=("--client-configuration-version");

return $flags;
}

 function Get-appconfig-get-configuration-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--configuration-profile-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-get-deployment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--environment-id"); 
$flags+=("--deployment-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-get-deployment-strategy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--deployment-strategy-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-get-environment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--environment-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-list-applications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-list-configuration-profiles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-list-deployment-strategies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-list-deployments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--environment-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-list-environments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-start-deployment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--environment-id"); 
$flags+=("--deployment-strategy-id"); 
$flags+=("--configuration-profile-id"); 
$flags+=("--configuration-version"); 
$flags+=("--description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-stop-deployment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--environment-id"); 
$flags+=("--deployment-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-update-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-update-configuration-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--configuration-profile-id"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--retrieval-role-arn"); 
$flags+=("--validators"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-update-deployment-strategy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--deployment-strategy-id"); 
$flags+=("--description"); 
$flags+=("--deployment-duration-in-minutes"); 
$flags+=("--final-bake-time-in-minutes"); 
$flags+=("--growth-factor"); 
$flags+=("--growth-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-update-environment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--environment-id"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--monitors"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appconfig-validate-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--configuration-profile-id"); 
$flags+=("--configuration-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-autoscaling {
    $commands = [System.Collections.ArrayList]@();

$commands+=("delete-scaling-policy"); 
$commands+=("delete-scheduled-action"); 
$commands+=("deregister-scalable-target"); 
$commands+=("describe-scalable-targets"); 
$commands+=("describe-scaling-activities"); 
$commands+=("describe-scaling-policies"); 
$commands+=("describe-scheduled-actions"); 
$commands+=("put-scaling-policy"); 
$commands+=("put-scheduled-action"); 
$commands+=("register-scalable-target");

return $commands;
}

 function Get-application-autoscaling-delete-scaling-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-name"); 
$flags+=("--service-namespace"); 
$flags+=("--resource-id"); 
$flags+=("--scalable-dimension"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-autoscaling-delete-scheduled-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-namespace"); 
$flags+=("--scheduled-action-name"); 
$flags+=("--resource-id"); 
$flags+=("--scalable-dimension"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-autoscaling-deregister-scalable-target {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-namespace"); 
$flags+=("--resource-id"); 
$flags+=("--scalable-dimension"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-autoscaling-describe-scalable-targets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-namespace"); 
$flags+=("--resource-ids"); 
$flags+=("--scalable-dimension"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-autoscaling-describe-scaling-activities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-namespace"); 
$flags+=("--resource-id"); 
$flags+=("--scalable-dimension"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-autoscaling-describe-scaling-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-names"); 
$flags+=("--service-namespace"); 
$flags+=("--resource-id"); 
$flags+=("--scalable-dimension"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-autoscaling-describe-scheduled-actions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--scheduled-action-names"); 
$flags+=("--service-namespace"); 
$flags+=("--resource-id"); 
$flags+=("--scalable-dimension"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-autoscaling-put-scaling-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-name"); 
$flags+=("--service-namespace"); 
$flags+=("--resource-id"); 
$flags+=("--scalable-dimension"); 
$flags+=("--policy-type"); 
$flags+=("--step-scaling-policy-configuration"); 
$flags+=("--target-tracking-scaling-policy-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-autoscaling-put-scheduled-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-namespace"); 
$flags+=("--schedule"); 
$flags+=("--scheduled-action-name"); 
$flags+=("--resource-id"); 
$flags+=("--scalable-dimension"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--scalable-target-action"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-autoscaling-register-scalable-target {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-namespace"); 
$flags+=("--resource-id"); 
$flags+=("--scalable-dimension"); 
$flags+=("--min-capacity"); 
$flags+=("--max-capacity"); 
$flags+=("--role-arn"); 
$flags+=("--suspended-state"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-application"); 
$commands+=("create-component"); 
$commands+=("create-log-pattern"); 
$commands+=("delete-application"); 
$commands+=("delete-component"); 
$commands+=("delete-log-pattern"); 
$commands+=("describe-application"); 
$commands+=("describe-component"); 
$commands+=("describe-component-configuration"); 
$commands+=("describe-component-configuration-recommendation"); 
$commands+=("describe-log-pattern"); 
$commands+=("describe-observation"); 
$commands+=("describe-problem"); 
$commands+=("describe-problem-observations"); 
$commands+=("list-applications"); 
$commands+=("list-components"); 
$commands+=("list-configuration-history"); 
$commands+=("list-log-pattern-sets"); 
$commands+=("list-log-patterns"); 
$commands+=("list-problems"); 
$commands+=("list-tags-for-resource"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-application"); 
$commands+=("update-component"); 
$commands+=("update-component-configuration"); 
$commands+=("update-log-pattern");

return $commands;
}

 function Get-application-insights-create-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-group-name"); 
$flags+=("--ops-center-enabled"); 
$flags+=("--no-ops-center-enabled"); 
$flags+=("--cwe-monitor-enabled"); 
$flags+=("--no-cwe-monitor-enabled"); 
$flags+=("--ops-item-sns-topic-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-create-component {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-group-name"); 
$flags+=("--component-name"); 
$flags+=("--resource-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-create-log-pattern {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-group-name"); 
$flags+=("--pattern-set-name"); 
$flags+=("--pattern-name"); 
$flags+=("--pattern"); 
$flags+=("--rank"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-delete-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-delete-component {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-group-name"); 
$flags+=("--component-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-delete-log-pattern {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-group-name"); 
$flags+=("--pattern-set-name"); 
$flags+=("--pattern-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-describe-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-describe-component {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-group-name"); 
$flags+=("--component-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-describe-component-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-group-name"); 
$flags+=("--component-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-describe-component-configuration-recommendation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-group-name"); 
$flags+=("--component-name"); 
$flags+=("--tier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-describe-log-pattern {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-group-name"); 
$flags+=("--pattern-set-name"); 
$flags+=("--pattern-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-describe-observation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--observation-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-describe-problem {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--problem-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-describe-problem-observations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--problem-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-list-applications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-list-components {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-group-name"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-list-configuration-history {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-group-name"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--event-status"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-list-log-pattern-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-group-name"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-list-log-patterns {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-group-name"); 
$flags+=("--pattern-set-name"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-list-problems {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-group-name"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-update-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-group-name"); 
$flags+=("--ops-center-enabled"); 
$flags+=("--no-ops-center-enabled"); 
$flags+=("--cwe-monitor-enabled"); 
$flags+=("--no-cwe-monitor-enabled"); 
$flags+=("--ops-item-sns-topic-arn"); 
$flags+=("--remove-sns-topic"); 
$flags+=("--no-remove-sns-topic"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-update-component {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-group-name"); 
$flags+=("--component-name"); 
$flags+=("--new-component-name"); 
$flags+=("--resource-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-update-component-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-group-name"); 
$flags+=("--component-name"); 
$flags+=("--monitor"); 
$flags+=("--no-monitor"); 
$flags+=("--tier"); 
$flags+=("--component-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-application-insights-update-log-pattern {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-group-name"); 
$flags+=("--pattern-set-name"); 
$flags+=("--pattern-name"); 
$flags+=("--pattern"); 
$flags+=("--rank"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-mesh"); 
$commands+=("create-route"); 
$commands+=("create-virtual-node"); 
$commands+=("create-virtual-router"); 
$commands+=("create-virtual-service"); 
$commands+=("delete-mesh"); 
$commands+=("delete-route"); 
$commands+=("delete-virtual-node"); 
$commands+=("delete-virtual-router"); 
$commands+=("delete-virtual-service"); 
$commands+=("describe-mesh"); 
$commands+=("describe-route"); 
$commands+=("describe-virtual-node"); 
$commands+=("describe-virtual-router"); 
$commands+=("describe-virtual-service"); 
$commands+=("list-meshes"); 
$commands+=("list-routes"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-virtual-nodes"); 
$commands+=("list-virtual-routers"); 
$commands+=("list-virtual-services"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-mesh"); 
$commands+=("update-route"); 
$commands+=("update-virtual-node"); 
$commands+=("update-virtual-router"); 
$commands+=("update-virtual-service");

return $commands;
}

 function Get-appmesh-create-mesh {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-token"); 
$flags+=("--mesh-name"); 
$flags+=("--spec"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-create-route {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-token"); 
$flags+=("--mesh-name"); 
$flags+=("--mesh-owner"); 
$flags+=("--route-name"); 
$flags+=("--spec"); 
$flags+=("--tags"); 
$flags+=("--virtual-router-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-create-virtual-node {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-token"); 
$flags+=("--mesh-name"); 
$flags+=("--mesh-owner"); 
$flags+=("--spec"); 
$flags+=("--tags"); 
$flags+=("--virtual-node-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-create-virtual-router {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-token"); 
$flags+=("--mesh-name"); 
$flags+=("--mesh-owner"); 
$flags+=("--spec"); 
$flags+=("--tags"); 
$flags+=("--virtual-router-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-create-virtual-service {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-token"); 
$flags+=("--mesh-name"); 
$flags+=("--mesh-owner"); 
$flags+=("--spec"); 
$flags+=("--tags"); 
$flags+=("--virtual-service-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-delete-mesh {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--mesh-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-delete-route {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--mesh-name"); 
$flags+=("--mesh-owner"); 
$flags+=("--route-name"); 
$flags+=("--virtual-router-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-delete-virtual-node {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--mesh-name"); 
$flags+=("--mesh-owner"); 
$flags+=("--virtual-node-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-delete-virtual-router {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--mesh-name"); 
$flags+=("--mesh-owner"); 
$flags+=("--virtual-router-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-delete-virtual-service {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--mesh-name"); 
$flags+=("--mesh-owner"); 
$flags+=("--virtual-service-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-describe-mesh {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--mesh-name"); 
$flags+=("--mesh-owner"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-describe-route {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--mesh-name"); 
$flags+=("--mesh-owner"); 
$flags+=("--route-name"); 
$flags+=("--virtual-router-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-describe-virtual-node {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--mesh-name"); 
$flags+=("--mesh-owner"); 
$flags+=("--virtual-node-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-describe-virtual-router {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--mesh-name"); 
$flags+=("--mesh-owner"); 
$flags+=("--virtual-router-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-describe-virtual-service {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--mesh-name"); 
$flags+=("--mesh-owner"); 
$flags+=("--virtual-service-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-list-meshes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-list-routes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--mesh-name"); 
$flags+=("--mesh-owner"); 
$flags+=("--virtual-router-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-list-virtual-nodes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--mesh-name"); 
$flags+=("--mesh-owner"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-list-virtual-routers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--mesh-name"); 
$flags+=("--mesh-owner"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-list-virtual-services {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--mesh-name"); 
$flags+=("--mesh-owner"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-update-mesh {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-token"); 
$flags+=("--mesh-name"); 
$flags+=("--spec"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-update-route {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-token"); 
$flags+=("--mesh-name"); 
$flags+=("--mesh-owner"); 
$flags+=("--route-name"); 
$flags+=("--spec"); 
$flags+=("--virtual-router-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-update-virtual-node {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-token"); 
$flags+=("--mesh-name"); 
$flags+=("--mesh-owner"); 
$flags+=("--spec"); 
$flags+=("--virtual-node-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-update-virtual-router {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-token"); 
$flags+=("--mesh-name"); 
$flags+=("--mesh-owner"); 
$flags+=("--spec"); 
$flags+=("--virtual-router-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appmesh-update-virtual-service {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-token"); 
$flags+=("--mesh-name"); 
$flags+=("--mesh-owner"); 
$flags+=("--spec"); 
$flags+=("--virtual-service-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-fleet"); 
$commands+=("batch-associate-user-stack"); 
$commands+=("batch-disassociate-user-stack"); 
$commands+=("copy-image"); 
$commands+=("create-directory-config"); 
$commands+=("create-fleet"); 
$commands+=("create-image-builder"); 
$commands+=("create-image-builder-streaming-url"); 
$commands+=("create-stack"); 
$commands+=("create-streaming-url"); 
$commands+=("create-usage-report-subscription"); 
$commands+=("create-user"); 
$commands+=("delete-directory-config"); 
$commands+=("delete-fleet"); 
$commands+=("delete-image"); 
$commands+=("delete-image-builder"); 
$commands+=("delete-image-permissions"); 
$commands+=("delete-stack"); 
$commands+=("delete-usage-report-subscription"); 
$commands+=("delete-user"); 
$commands+=("describe-directory-configs"); 
$commands+=("describe-fleets"); 
$commands+=("describe-image-builders"); 
$commands+=("describe-image-permissions"); 
$commands+=("describe-images"); 
$commands+=("describe-sessions"); 
$commands+=("describe-stacks"); 
$commands+=("describe-usage-report-subscriptions"); 
$commands+=("describe-user-stack-associations"); 
$commands+=("describe-users"); 
$commands+=("disable-user"); 
$commands+=("disassociate-fleet"); 
$commands+=("enable-user"); 
$commands+=("expire-session"); 
$commands+=("list-associated-fleets"); 
$commands+=("list-associated-stacks"); 
$commands+=("list-tags-for-resource"); 
$commands+=("start-fleet"); 
$commands+=("start-image-builder"); 
$commands+=("stop-fleet"); 
$commands+=("stop-image-builder"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-directory-config"); 
$commands+=("update-fleet"); 
$commands+=("update-image-permissions"); 
$commands+=("update-stack"); 
$commands+=("wait");

return $commands;
}

 function Get-appstream-associate-fleet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-name"); 
$flags+=("--stack-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-batch-associate-user-stack {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-stack-associations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-batch-disassociate-user-stack {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-stack-associations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-copy-image {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-image-name"); 
$flags+=("--destination-image-name"); 
$flags+=("--destination-region"); 
$flags+=("--destination-image-description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-create-directory-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-name"); 
$flags+=("--organizational-unit-distinguished-names"); 
$flags+=("--service-account-credentials"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-create-fleet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--image-name"); 
$flags+=("--image-arn"); 
$flags+=("--instance-type"); 
$flags+=("--fleet-type"); 
$flags+=("--compute-capacity"); 
$flags+=("--vpc-config"); 
$flags+=("--max-user-duration-in-seconds"); 
$flags+=("--disconnect-timeout-in-seconds"); 
$flags+=("--description"); 
$flags+=("--display-name"); 
$flags+=("--enable-default-internet-access"); 
$flags+=("--no-enable-default-internet-access"); 
$flags+=("--domain-join-info"); 
$flags+=("--tags"); 
$flags+=("--idle-disconnect-timeout-in-seconds"); 
$flags+=("--iam-role-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-create-image-builder {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--image-name"); 
$flags+=("--image-arn"); 
$flags+=("--instance-type"); 
$flags+=("--description"); 
$flags+=("--display-name"); 
$flags+=("--vpc-config"); 
$flags+=("--iam-role-arn"); 
$flags+=("--enable-default-internet-access"); 
$flags+=("--no-enable-default-internet-access"); 
$flags+=("--domain-join-info"); 
$flags+=("--appstream-agent-version"); 
$flags+=("--tags"); 
$flags+=("--access-endpoints"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-create-image-builder-streaming-url {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--validity"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-create-stack {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--display-name"); 
$flags+=("--storage-connectors"); 
$flags+=("--redirect-url"); 
$flags+=("--feedback-url"); 
$flags+=("--user-settings"); 
$flags+=("--application-settings"); 
$flags+=("--tags"); 
$flags+=("--access-endpoints"); 
$flags+=("--embed-host-domains"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-create-streaming-url {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-name"); 
$flags+=("--fleet-name"); 
$flags+=("--user-id"); 
$flags+=("--application-id"); 
$flags+=("--validity"); 
$flags+=("--session-context"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-create-usage-report-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-create-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--message-action"); 
$flags+=("--first-name"); 
$flags+=("--last-name"); 
$flags+=("--authentication-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-delete-directory-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-delete-fleet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-delete-image {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-delete-image-builder {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-delete-image-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--shared-account-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-delete-stack {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-delete-usage-report-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-delete-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--authentication-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-describe-directory-configs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-describe-fleets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--names"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-describe-image-builders {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--names"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-describe-image-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--max-results"); 
$flags+=("--shared-aws-account-ids"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-describe-images {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--names"); 
$flags+=("--arns"); 
$flags+=("--type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-describe-sessions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-name"); 
$flags+=("--fleet-name"); 
$flags+=("--user-id"); 
$flags+=("--authentication-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-describe-stacks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--names"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-describe-usage-report-subscriptions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-describe-user-stack-associations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-name"); 
$flags+=("--user-name"); 
$flags+=("--authentication-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-describe-users {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-disable-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--authentication-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-disassociate-fleet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-name"); 
$flags+=("--stack-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-enable-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--authentication-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-expire-session {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--session-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-list-associated-fleets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-list-associated-stacks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-start-fleet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-start-image-builder {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--appstream-agent-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-stop-fleet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-stop-image-builder {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-update-directory-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-name"); 
$flags+=("--organizational-unit-distinguished-names"); 
$flags+=("--service-account-credentials"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-update-fleet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image-name"); 
$flags+=("--image-arn"); 
$flags+=("--name"); 
$flags+=("--instance-type"); 
$flags+=("--compute-capacity"); 
$flags+=("--vpc-config"); 
$flags+=("--max-user-duration-in-seconds"); 
$flags+=("--disconnect-timeout-in-seconds"); 
$flags+=("--delete-vpc-config"); 
$flags+=("--no-delete-vpc-config"); 
$flags+=("--description"); 
$flags+=("--display-name"); 
$flags+=("--enable-default-internet-access"); 
$flags+=("--no-enable-default-internet-access"); 
$flags+=("--domain-join-info"); 
$flags+=("--idle-disconnect-timeout-in-seconds"); 
$flags+=("--attributes-to-delete"); 
$flags+=("--iam-role-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-update-image-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--shared-account-id"); 
$flags+=("--image-permissions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-update-stack {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--display-name"); 
$flags+=("--description"); 
$flags+=("--name"); 
$flags+=("--storage-connectors"); 
$flags+=("--delete-storage-connectors"); 
$flags+=("--no-delete-storage-connectors"); 
$flags+=("--redirect-url"); 
$flags+=("--feedback-url"); 
$flags+=("--attributes-to-delete"); 
$flags+=("--user-settings"); 
$flags+=("--application-settings"); 
$flags+=("--access-endpoints"); 
$flags+=("--embed-host-domains"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appstream-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-appsync {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-api-cache"); 
$commands+=("create-api-key"); 
$commands+=("create-data-source"); 
$commands+=("create-"); 
$commands+=("create-graphql-api"); 
$commands+=("create-resolver"); 
$commands+=("create-type"); 
$commands+=("delete-api-cache"); 
$commands+=("delete-api-key"); 
$commands+=("delete-data-source"); 
$commands+=("delete-"); 
$commands+=("delete-graphql-api"); 
$commands+=("delete-resolver"); 
$commands+=("delete-type"); 
$commands+=("flush-api-cache"); 
$commands+=("get-api-cache"); 
$commands+=("get-data-source"); 
$commands+=("get-"); 
$commands+=("get-graphql-api"); 
$commands+=("get-introspection-schema"); 
$commands+=("get-resolver"); 
$commands+=("get-schema-creation-status"); 
$commands+=("get-type"); 
$commands+=("list-api-keys"); 
$commands+=("list-data-sources"); 
$commands+=("list-functions"); 
$commands+=("list-graphql-apis"); 
$commands+=("list-resolvers"); 
$commands+=("list-resolvers-by-"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-types"); 
$commands+=("start-schema-creation"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-api-cache"); 
$commands+=("update-api-key"); 
$commands+=("update-data-source"); 
$commands+=("update-"); 
$commands+=("update-graphql-api"); 
$commands+=("update-resolver"); 
$commands+=("update-type");

return $commands;
}

 function Get-appsync-create-api-cache {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--ttl"); 
$flags+=("--transit-encryption-enabled"); 
$flags+=("--no-transit-encryption-enabled"); 
$flags+=("--at-rest-encryption-enabled"); 
$flags+=("--no-at-rest-encryption-enabled"); 
$flags+=("--api-caching-behavior"); 
$flags+=("--type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-create-api-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--description"); 
$flags+=("--expires"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-create-data-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--type"); 
$flags+=("--service-role-arn"); 
$flags+=("--dynamodb-config"); 
$flags+=("--lambda-config"); 
$flags+=("--elasticsearch-config"); 
$flags+=("--http-config"); 
$flags+=("--relational-database-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-create- {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--data-source-name"); 
$flags+=("--request-mapping-template"); 
$flags+=("--response-mapping-template"); 
$flags+=("---version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-create-graphql-api {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--log-config"); 
$flags+=("--authentication-type"); 
$flags+=("--user-pool-config"); 
$flags+=("--open-id-connect-config"); 
$flags+=("--tags"); 
$flags+=("--additional-authentication-providers"); 
$flags+=("--xray-enabled"); 
$flags+=("--no-xray-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-create-resolver {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--type-name"); 
$flags+=("--field-name"); 
$flags+=("--data-source-name"); 
$flags+=("--request-mapping-template"); 
$flags+=("--response-mapping-template"); 
$flags+=("--kind"); 
$flags+=("--pipeline-config"); 
$flags+=("--sync-config"); 
$flags+=("--caching-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-create-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--definition"); 
$flags+=("--format"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-delete-api-cache {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-delete-api-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-delete-data-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-delete- {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("---id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-delete-graphql-api {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-delete-resolver {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--type-name"); 
$flags+=("--field-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-delete-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--type-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-flush-api-cache {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-get-api-cache {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-get-data-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-get- {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("---id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-get-graphql-api {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-get-introspection-schema {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--format"); 
$flags+=("--include-directives"); 
$flags+=("--no-include-directives");

return $flags;
}

 function Get-appsync-get-resolver {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--type-name"); 
$flags+=("--field-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-get-schema-creation-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-get-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--type-name"); 
$flags+=("--format"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-list-api-keys {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-list-data-sources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-list-functions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-list-graphql-apis {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-list-resolvers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--type-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-list-resolvers-by- {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("---id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-list-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--format"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-start-schema-creation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--definition"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-update-api-cache {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--ttl"); 
$flags+=("--api-caching-behavior"); 
$flags+=("--type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-update-api-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--id"); 
$flags+=("--description"); 
$flags+=("--expires"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-update-data-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--type"); 
$flags+=("--service-role-arn"); 
$flags+=("--dynamodb-config"); 
$flags+=("--lambda-config"); 
$flags+=("--elasticsearch-config"); 
$flags+=("--http-config"); 
$flags+=("--relational-database-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-update- {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("---id"); 
$flags+=("--data-source-name"); 
$flags+=("--request-mapping-template"); 
$flags+=("--response-mapping-template"); 
$flags+=("---version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-update-graphql-api {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--name"); 
$flags+=("--log-config"); 
$flags+=("--authentication-type"); 
$flags+=("--user-pool-config"); 
$flags+=("--open-id-connect-config"); 
$flags+=("--additional-authentication-providers"); 
$flags+=("--xray-enabled"); 
$flags+=("--no-xray-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-update-resolver {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--type-name"); 
$flags+=("--field-name"); 
$flags+=("--data-source-name"); 
$flags+=("--request-mapping-template"); 
$flags+=("--response-mapping-template"); 
$flags+=("--kind"); 
$flags+=("--pipeline-config"); 
$flags+=("--sync-config"); 
$flags+=("--caching-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-appsync-update-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-id"); 
$flags+=("--type-name"); 
$flags+=("--definition"); 
$flags+=("--format"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-athena {
    $commands = [System.Collections.ArrayList]@();

$commands+=("batch-get-named-query"); 
$commands+=("batch-get-query-execution"); 
$commands+=("create-named-query"); 
$commands+=("create-work-group"); 
$commands+=("delete-named-query"); 
$commands+=("delete-work-group"); 
$commands+=("get-named-query"); 
$commands+=("get-query-execution"); 
$commands+=("get-query-results"); 
$commands+=("get-work-group"); 
$commands+=("list-named-queries"); 
$commands+=("list-query-executions"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-work-groups"); 
$commands+=("start-query-execution"); 
$commands+=("stop-query-execution"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-work-group");

return $commands;
}

 function Get-athena-batch-get-named-query {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--named-query-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-athena-batch-get-query-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--query-execution-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-athena-create-named-query {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--database"); 
$flags+=("--query-string"); 
$flags+=("--client-request-token"); 
$flags+=("--work-group"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-athena-create-work-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--configuration"); 
$flags+=("--description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-athena-delete-named-query {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--named-query-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-athena-delete-work-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--work-group"); 
$flags+=("--recursive-delete-option"); 
$flags+=("--no-recursive-delete-option"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-athena-get-named-query {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--named-query-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-athena-get-query-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--query-execution-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-athena-get-query-results {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--query-execution-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-athena-get-work-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--work-group"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-athena-list-named-queries {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--work-group"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-athena-list-query-executions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--work-group"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-athena-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-athena-list-work-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-athena-start-query-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--query-string"); 
$flags+=("--client-request-token"); 
$flags+=("--query-execution-context"); 
$flags+=("--result-configuration"); 
$flags+=("--work-group"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-athena-stop-query-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--query-execution-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-athena-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-athena-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-athena-update-work-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--work-group"); 
$flags+=("--description"); 
$flags+=("--configuration-updates"); 
$flags+=("--state"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling {
    $commands = [System.Collections.ArrayList]@();

$commands+=("attach-instances"); 
$commands+=("attach-load-balancer-target-groups"); 
$commands+=("attach-load-balancers"); 
$commands+=("batch-delete-scheduled-action"); 
$commands+=("batch-put-scheduled-update-group-action"); 
$commands+=("complete-lifecycle-action"); 
$commands+=("create-auto-scaling-group"); 
$commands+=("create-launch-configuration"); 
$commands+=("create-or-update-tags"); 
$commands+=("delete-auto-scaling-group"); 
$commands+=("delete-launch-configuration"); 
$commands+=("delete-lifecycle-hook"); 
$commands+=("delete-notification-configuration"); 
$commands+=("delete-policy"); 
$commands+=("delete-scheduled-action"); 
$commands+=("delete-tags"); 
$commands+=("describe-account-limits"); 
$commands+=("describe-adjustment-types"); 
$commands+=("describe-auto-scaling-groups"); 
$commands+=("describe-auto-scaling-instances"); 
$commands+=("describe-auto-scaling-notification-types"); 
$commands+=("describe-launch-configurations"); 
$commands+=("describe-lifecycle-hook-types"); 
$commands+=("describe-lifecycle-hooks"); 
$commands+=("describe-load-balancer-target-groups"); 
$commands+=("describe-load-balancers"); 
$commands+=("describe-metric-collection-types"); 
$commands+=("describe-notification-configurations"); 
$commands+=("describe-policies"); 
$commands+=("describe-scaling-activities"); 
$commands+=("describe-scaling-process-types"); 
$commands+=("describe-scheduled-actions"); 
$commands+=("describe-tags"); 
$commands+=("describe-termination-policy-types"); 
$commands+=("detach-instances"); 
$commands+=("detach-load-balancer-target-groups"); 
$commands+=("detach-load-balancers"); 
$commands+=("disable-metrics-collection"); 
$commands+=("enable-metrics-collection"); 
$commands+=("enter-standby"); 
$commands+=("execute-policy"); 
$commands+=("exit-standby"); 
$commands+=("put-lifecycle-hook"); 
$commands+=("put-notification-configuration"); 
$commands+=("put-scaling-policy"); 
$commands+=("put-scheduled-update-group-action"); 
$commands+=("record-lifecycle-action-heartbeat"); 
$commands+=("resume-processes"); 
$commands+=("set-desired-capacity"); 
$commands+=("set-instance-health"); 
$commands+=("set-instance-protection"); 
$commands+=("suspend-processes"); 
$commands+=("terminate-instance-in-auto-scaling-group"); 
$commands+=("update-auto-scaling-group");

return $commands;
}

 function Get-autoscaling-attach-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-ids"); 
$flags+=("--auto-scaling-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-attach-load-balancer-target-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--target-group-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-attach-load-balancers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--load-balancer-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-batch-delete-scheduled-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--scheduled-action-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-batch-put-scheduled-update-group-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--scheduled-update-group-actions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-complete-lifecycle-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--lifecycle-hook-name"); 
$flags+=("--auto-scaling-group-name"); 
$flags+=("--lifecycle-action-token"); 
$flags+=("--lifecycle-action-result"); 
$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-create-auto-scaling-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--launch-configuration-name"); 
$flags+=("--launch-template"); 
$flags+=("--mixed-instances-policy"); 
$flags+=("--instance-id"); 
$flags+=("--min-size"); 
$flags+=("--max-size"); 
$flags+=("--desired-capacity"); 
$flags+=("--default-cooldown"); 
$flags+=("--availability-zones"); 
$flags+=("--load-balancer-names"); 
$flags+=("--target-group-arns"); 
$flags+=("--health-check-type"); 
$flags+=("--health-check-grace-period"); 
$flags+=("--placement-group"); 
$flags+=("--vpc-zone-identifier"); 
$flags+=("--termination-policies"); 
$flags+=("--new-instances-protected-from-scale-in"); 
$flags+=("--no-new-instances-protected-from-scale-in"); 
$flags+=("--lifecycle-hook-specification-list"); 
$flags+=("--tags"); 
$flags+=("--service-linked-role-arn"); 
$flags+=("--max-instance-lifetime"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-create-launch-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--launch-configuration-name"); 
$flags+=("--image-id"); 
$flags+=("--key-name"); 
$flags+=("--security-groups"); 
$flags+=("--classic-link-vpc-id"); 
$flags+=("--classic-link-vpc-security-groups"); 
$flags+=("--user-data"); 
$flags+=("--instance-id"); 
$flags+=("--instance-type"); 
$flags+=("--kernel-id"); 
$flags+=("--ramdisk-id"); 
$flags+=("--block-device-mappings"); 
$flags+=("--instance-monitoring"); 
$flags+=("--spot-price"); 
$flags+=("--iam-instance-profile"); 
$flags+=("--ebs-optimized"); 
$flags+=("--no-ebs-optimized"); 
$flags+=("--associate-public-ip-address"); 
$flags+=("--no-associate-public-ip-address"); 
$flags+=("--placement-tenancy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-create-or-update-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-delete-auto-scaling-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--force-delete"); 
$flags+=("--no-force-delete"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-delete-launch-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--launch-configuration-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-delete-lifecycle-hook {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--lifecycle-hook-name"); 
$flags+=("--auto-scaling-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-delete-notification-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--topic-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-delete-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--policy-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-delete-scheduled-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--scheduled-action-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-delete-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-describe-account-limits {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-describe-adjustment-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-describe-auto-scaling-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-describe-auto-scaling-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-describe-auto-scaling-notification-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-describe-launch-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--launch-configuration-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-describe-lifecycle-hook-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-describe-lifecycle-hooks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--lifecycle-hook-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-describe-load-balancer-target-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-describe-load-balancers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-describe-metric-collection-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-describe-notification-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-describe-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--policy-names"); 
$flags+=("--policy-types"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-describe-scaling-activities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--activity-ids"); 
$flags+=("--auto-scaling-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-describe-scaling-process-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-describe-scheduled-actions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--scheduled-action-names"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-describe-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-describe-termination-policy-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-detach-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-ids"); 
$flags+=("--auto-scaling-group-name"); 
$flags+=("--should-decrement-desired-capacity"); 
$flags+=("--no-should-decrement-desired-capacity"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-detach-load-balancer-target-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--target-group-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-detach-load-balancers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--load-balancer-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-disable-metrics-collection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--metrics"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-enable-metrics-collection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--metrics"); 
$flags+=("--granularity"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-enter-standby {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-ids"); 
$flags+=("--auto-scaling-group-name"); 
$flags+=("--should-decrement-desired-capacity"); 
$flags+=("--no-should-decrement-desired-capacity"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-execute-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--policy-name"); 
$flags+=("--honor-cooldown"); 
$flags+=("--no-honor-cooldown"); 
$flags+=("--metric-value"); 
$flags+=("--breach-threshold"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-exit-standby {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-ids"); 
$flags+=("--auto-scaling-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-put-lifecycle-hook {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--lifecycle-hook-name"); 
$flags+=("--auto-scaling-group-name"); 
$flags+=("--lifecycle-transition"); 
$flags+=("--role-arn"); 
$flags+=("--notification-target-arn"); 
$flags+=("--notification-metadata"); 
$flags+=("--heartbeat-timeout"); 
$flags+=("--default-result"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-put-notification-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--topic-arn"); 
$flags+=("--notification-types"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-put-scaling-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--policy-name"); 
$flags+=("--policy-type"); 
$flags+=("--adjustment-type"); 
$flags+=("--min-adjustment-step"); 
$flags+=("--min-adjustment-magnitude"); 
$flags+=("--scaling-adjustment"); 
$flags+=("--cooldown"); 
$flags+=("--metric-aggregation-type"); 
$flags+=("--step-adjustments"); 
$flags+=("--estimated-instance-warmup"); 
$flags+=("--target-tracking-configuration"); 
$flags+=("--enabled"); 
$flags+=("--no-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-put-scheduled-update-group-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--scheduled-action-name"); 
$flags+=("--time"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--recurrence"); 
$flags+=("--min-size"); 
$flags+=("--max-size"); 
$flags+=("--desired-capacity"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-record-lifecycle-action-heartbeat {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--lifecycle-hook-name"); 
$flags+=("--auto-scaling-group-name"); 
$flags+=("--lifecycle-action-token"); 
$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-resume-processes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--scaling-processes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-set-desired-capacity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--desired-capacity"); 
$flags+=("--honor-cooldown"); 
$flags+=("--no-honor-cooldown"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-set-instance-health {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--health-status"); 
$flags+=("--should-respect-grace-period"); 
$flags+=("--no-should-respect-grace-period"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-set-instance-protection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-ids"); 
$flags+=("--auto-scaling-group-name"); 
$flags+=("--protected-from-scale-in"); 
$flags+=("--no-protected-from-scale-in"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-suspend-processes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--scaling-processes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-terminate-instance-in-auto-scaling-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--should-decrement-desired-capacity"); 
$flags+=("--no-should-decrement-desired-capacity"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-update-auto-scaling-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-scaling-group-name"); 
$flags+=("--launch-configuration-name"); 
$flags+=("--launch-template"); 
$flags+=("--mixed-instances-policy"); 
$flags+=("--min-size"); 
$flags+=("--max-size"); 
$flags+=("--desired-capacity"); 
$flags+=("--default-cooldown"); 
$flags+=("--availability-zones"); 
$flags+=("--health-check-type"); 
$flags+=("--health-check-grace-period"); 
$flags+=("--placement-group"); 
$flags+=("--vpc-zone-identifier"); 
$flags+=("--termination-policies"); 
$flags+=("--new-instances-protected-from-scale-in"); 
$flags+=("--no-new-instances-protected-from-scale-in"); 
$flags+=("--service-linked-role-arn"); 
$flags+=("--max-instance-lifetime"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-plans {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-scaling-plan"); 
$commands+=("delete-scaling-plan"); 
$commands+=("describe-scaling-plan-resources"); 
$commands+=("describe-scaling-plans"); 
$commands+=("get-scaling-plan-resource-forecast-data"); 
$commands+=("update-scaling-plan");

return $commands;
}

 function Get-autoscaling-plans-create-scaling-plan {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--scaling-plan-name"); 
$flags+=("--application-source"); 
$flags+=("--scaling-instructions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-plans-delete-scaling-plan {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--scaling-plan-name"); 
$flags+=("--scaling-plan-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-plans-describe-scaling-plan-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--scaling-plan-name"); 
$flags+=("--scaling-plan-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-plans-describe-scaling-plans {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--scaling-plan-names"); 
$flags+=("--scaling-plan-version"); 
$flags+=("--application-sources"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-plans-get-scaling-plan-resource-forecast-data {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--scaling-plan-name"); 
$flags+=("--scaling-plan-version"); 
$flags+=("--service-namespace"); 
$flags+=("--resource-id"); 
$flags+=("--scalable-dimension"); 
$flags+=("--forecast-data-type"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-autoscaling-plans-update-scaling-plan {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--scaling-plan-name"); 
$flags+=("--scaling-plan-version"); 
$flags+=("--application-source"); 
$flags+=("--scaling-instructions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-backup-plan"); 
$commands+=("create-backup-selection"); 
$commands+=("create-backup-vault"); 
$commands+=("delete-backup-plan"); 
$commands+=("delete-backup-selection"); 
$commands+=("delete-backup-vault"); 
$commands+=("delete-backup-vault-access-policy"); 
$commands+=("delete-backup-vault-notifications"); 
$commands+=("delete-recovery-point"); 
$commands+=("describe-backup-job"); 
$commands+=("describe-backup-vault"); 
$commands+=("describe-copy-job"); 
$commands+=("describe-protected-resource"); 
$commands+=("describe-recovery-point"); 
$commands+=("describe-restore-job"); 
$commands+=("export-backup-plan-template"); 
$commands+=("get-backup-plan"); 
$commands+=("get-backup-plan-from-json"); 
$commands+=("get-backup-plan-from-template"); 
$commands+=("get-backup-selection"); 
$commands+=("get-backup-vault-access-policy"); 
$commands+=("get-backup-vault-notifications"); 
$commands+=("get-recovery-point-restore-metadata"); 
$commands+=("get-supported-resource-types"); 
$commands+=("list-backup-jobs"); 
$commands+=("list-backup-plan-templates"); 
$commands+=("list-backup-plan-versions"); 
$commands+=("list-backup-plans"); 
$commands+=("list-backup-selections"); 
$commands+=("list-backup-vaults"); 
$commands+=("list-copy-jobs"); 
$commands+=("list-protected-resources"); 
$commands+=("list-recovery-points-by-backup-vault"); 
$commands+=("list-recovery-points-by-resource"); 
$commands+=("list-restore-jobs"); 
$commands+=("list-tags"); 
$commands+=("put-backup-vault-access-policy"); 
$commands+=("put-backup-vault-notifications"); 
$commands+=("start-backup-job"); 
$commands+=("start-copy-job"); 
$commands+=("start-restore-job"); 
$commands+=("stop-backup-job"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-backup-plan"); 
$commands+=("update-recovery-point-lifecycle");

return $commands;
}

 function Get-backup-create-backup-plan {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-plan"); 
$flags+=("--backup-plan-tags"); 
$flags+=("--creator-request-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-create-backup-selection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-plan-id"); 
$flags+=("--backup-selection"); 
$flags+=("--creator-request-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-create-backup-vault {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-vault-name"); 
$flags+=("--backup-vault-tags"); 
$flags+=("--encryption-key-arn"); 
$flags+=("--creator-request-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-delete-backup-plan {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-plan-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-delete-backup-selection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-plan-id"); 
$flags+=("--selection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-delete-backup-vault {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-vault-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-delete-backup-vault-access-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-vault-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-delete-backup-vault-notifications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-vault-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-delete-recovery-point {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-vault-name"); 
$flags+=("--recovery-point-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-describe-backup-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-describe-backup-vault {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-vault-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-describe-copy-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--copy-job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-describe-protected-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-describe-recovery-point {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-vault-name"); 
$flags+=("--recovery-point-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-describe-restore-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--restore-job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-export-backup-plan-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-plan-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-get-backup-plan {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-plan-id"); 
$flags+=("--version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-get-backup-plan-from-json {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-plan-template-json"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-get-backup-plan-from-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-plan-template-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-get-backup-selection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-plan-id"); 
$flags+=("--selection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-get-backup-vault-access-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-vault-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-get-backup-vault-notifications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-vault-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-get-recovery-point-restore-metadata {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-vault-name"); 
$flags+=("--recovery-point-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-get-supported-resource-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-list-backup-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--by-resource-arn"); 
$flags+=("--by-state"); 
$flags+=("--by-backup-vault-name"); 
$flags+=("--by-created-before"); 
$flags+=("--by-created-after"); 
$flags+=("--by-resource-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-list-backup-plan-templates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-list-backup-plan-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-plan-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-list-backup-plans {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--include-deleted"); 
$flags+=("--no-include-deleted"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-list-backup-selections {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-plan-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-list-backup-vaults {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-list-copy-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--by-resource-arn"); 
$flags+=("--by-state"); 
$flags+=("--by-created-before"); 
$flags+=("--by-created-after"); 
$flags+=("--by-resource-type"); 
$flags+=("--by-destination-vault-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-list-protected-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-list-recovery-points-by-backup-vault {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-vault-name"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--by-resource-arn"); 
$flags+=("--by-resource-type"); 
$flags+=("--by-backup-plan-id"); 
$flags+=("--by-created-before"); 
$flags+=("--by-created-after"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-list-recovery-points-by-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-list-restore-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-list-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-put-backup-vault-access-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-vault-name"); 
$flags+=("--policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-put-backup-vault-notifications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-vault-name"); 
$flags+=("--sns-topic-arn"); 
$flags+=("--backup-vault-events"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-start-backup-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-vault-name"); 
$flags+=("--resource-arn"); 
$flags+=("--iam-role-arn"); 
$flags+=("--idempotency-token"); 
$flags+=("--start-window-minutes"); 
$flags+=("--complete-window-minutes"); 
$flags+=("--lifecycle"); 
$flags+=("--recovery-point-tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-start-copy-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--recovery-point-arn"); 
$flags+=("--source-backup-vault-name"); 
$flags+=("--destination-backup-vault-arn"); 
$flags+=("--iam-role-arn"); 
$flags+=("--idempotency-token"); 
$flags+=("--lifecycle"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-start-restore-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--recovery-point-arn"); 
$flags+=("--metadata"); 
$flags+=("--iam-role-arn"); 
$flags+=("--idempotency-token"); 
$flags+=("--resource-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-stop-backup-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-key-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-update-backup-plan {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-plan-id"); 
$flags+=("--backup-plan"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-backup-update-recovery-point-lifecycle {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-vault-name"); 
$flags+=("--recovery-point-arn"); 
$flags+=("--lifecycle"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-batch {
    $commands = [System.Collections.ArrayList]@();

$commands+=("cancel-job"); 
$commands+=("create-compute-environment"); 
$commands+=("create-job-queue"); 
$commands+=("delete-compute-environment"); 
$commands+=("delete-job-queue"); 
$commands+=("deregister-job-definition"); 
$commands+=("describe-compute-environments"); 
$commands+=("describe-job-definitions"); 
$commands+=("describe-job-queues"); 
$commands+=("describe-jobs"); 
$commands+=("list-jobs"); 
$commands+=("register-job-definition"); 
$commands+=("submit-job"); 
$commands+=("terminate-job"); 
$commands+=("update-compute-environment"); 
$commands+=("update-job-queue");

return $commands;
}

 function Get-batch-cancel-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--reason"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-batch-create-compute-environment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--compute-environment-name"); 
$flags+=("--type"); 
$flags+=("--state"); 
$flags+=("--compute-resources"); 
$flags+=("--service-role"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-batch-create-job-queue {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-queue-name"); 
$flags+=("--state"); 
$flags+=("--priority"); 
$flags+=("--compute-environment-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-batch-delete-compute-environment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--compute-environment"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-batch-delete-job-queue {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-queue"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-batch-deregister-job-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-definition"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-batch-describe-compute-environments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--compute-environments"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-batch-describe-job-definitions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-definitions"); 
$flags+=("--job-definition-name"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-batch-describe-job-queues {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-queues"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-batch-describe-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--jobs"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-batch-list-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-queue"); 
$flags+=("--array-job-id"); 
$flags+=("--multi-node-job-id"); 
$flags+=("--job-status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-batch-register-job-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-definition-name"); 
$flags+=("--type"); 
$flags+=("--parameters"); 
$flags+=("--container-properties"); 
$flags+=("--node-properties"); 
$flags+=("--retry-strategy"); 
$flags+=("--timeout"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-batch-submit-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-name"); 
$flags+=("--job-queue"); 
$flags+=("--array-properties"); 
$flags+=("--depends-on"); 
$flags+=("--job-definition"); 
$flags+=("--parameters"); 
$flags+=("--container-overrides"); 
$flags+=("--node-overrides"); 
$flags+=("--retry-strategy"); 
$flags+=("--timeout"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-batch-terminate-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--reason"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-batch-update-compute-environment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--compute-environment"); 
$flags+=("--state"); 
$flags+=("--compute-resources"); 
$flags+=("--service-role"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-batch-update-job-queue {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-queue"); 
$flags+=("--state"); 
$flags+=("--priority"); 
$flags+=("--compute-environment-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-budgets {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-budget"); 
$commands+=("create-notification"); 
$commands+=("create-subscriber"); 
$commands+=("delete-budget"); 
$commands+=("delete-notification"); 
$commands+=("delete-subscriber"); 
$commands+=("describe-budget"); 
$commands+=("describe-budget-performance-history"); 
$commands+=("describe-budgets"); 
$commands+=("describe-notifications-for-budget"); 
$commands+=("describe-subscribers-for-notification"); 
$commands+=("update-budget"); 
$commands+=("update-notification"); 
$commands+=("update-subscriber");

return $commands;
}

 function Get-budgets-create-budget {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--budget"); 
$flags+=("--notifications-with-subscribers"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-budgets-create-notification {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--budget-name"); 
$flags+=("--notification"); 
$flags+=("--subscribers"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-budgets-create-subscriber {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--budget-name"); 
$flags+=("--notification"); 
$flags+=("--subscriber"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-budgets-delete-budget {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--budget-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-budgets-delete-notification {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--budget-name"); 
$flags+=("--notification"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-budgets-delete-subscriber {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--budget-name"); 
$flags+=("--notification"); 
$flags+=("--subscriber"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-budgets-describe-budget {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--budget-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-budgets-describe-budget-performance-history {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--budget-name"); 
$flags+=("--time-period"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-budgets-describe-budgets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-budgets-describe-notifications-for-budget {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--budget-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-budgets-describe-subscribers-for-notification {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--budget-name"); 
$flags+=("--notification"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-budgets-update-budget {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--new-budget"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-budgets-update-notification {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--budget-name"); 
$flags+=("--old-notification"); 
$flags+=("--new-notification"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-budgets-update-subscriber {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--budget-name"); 
$flags+=("--notification"); 
$flags+=("--old-subscriber"); 
$flags+=("--new-subscriber"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ce {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-cost-category-definition"); 
$commands+=("delete-cost-category-definition"); 
$commands+=("describe-cost-category-definition"); 
$commands+=("get-cost-and-usage"); 
$commands+=("get-cost-and-usage-with-resources"); 
$commands+=("get-cost-forecast"); 
$commands+=("get-dimension-values"); 
$commands+=("get-reservation-coverage"); 
$commands+=("get-reservation-purchase-recommendation"); 
$commands+=("get-reservation-utilization"); 
$commands+=("get-rightsizing-recommendation"); 
$commands+=("get-savings-plans-coverage"); 
$commands+=("get-savings-plans-purchase-recommendation"); 
$commands+=("get-savings-plans-utilization"); 
$commands+=("get-savings-plans-utilization-details"); 
$commands+=("get-tags"); 
$commands+=("get-usage-forecast"); 
$commands+=("list-cost-category-definitions"); 
$commands+=("update-cost-category-definition");

return $commands;
}

 function Get-ce-create-cost-category-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--rule-version"); 
$flags+=("--rules"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ce-delete-cost-category-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cost-category-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ce-describe-cost-category-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cost-category-arn"); 
$flags+=("--effective-on"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ce-get-cost-and-usage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--time-period"); 
$flags+=("--granularity"); 
$flags+=("--filter"); 
$flags+=("--metrics"); 
$flags+=("--group-by"); 
$flags+=("--next-page-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ce-get-cost-and-usage-with-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--time-period"); 
$flags+=("--granularity"); 
$flags+=("--filter"); 
$flags+=("--metrics"); 
$flags+=("--group-by"); 
$flags+=("--next-page-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ce-get-cost-forecast {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--time-period"); 
$flags+=("--metric"); 
$flags+=("--granularity"); 
$flags+=("--filter"); 
$flags+=("--prediction-interval-level"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ce-get-dimension-values {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--search-string"); 
$flags+=("--time-period"); 
$flags+=("--dimension"); 
$flags+=("--context"); 
$flags+=("--next-page-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ce-get-reservation-coverage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--time-period"); 
$flags+=("--group-by"); 
$flags+=("--granularity"); 
$flags+=("--filter"); 
$flags+=("--metrics"); 
$flags+=("--next-page-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ce-get-reservation-purchase-recommendation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--service"); 
$flags+=("--account-scope"); 
$flags+=("--lookback-period-in-days"); 
$flags+=("--term-in-years"); 
$flags+=("--payment-option"); 
$flags+=("--service-specification"); 
$flags+=("--page-size"); 
$flags+=("--next-page-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ce-get-reservation-utilization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--time-period"); 
$flags+=("--group-by"); 
$flags+=("--granularity"); 
$flags+=("--filter"); 
$flags+=("--next-page-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ce-get-rightsizing-recommendation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--configuration"); 
$flags+=("--service"); 
$flags+=("--page-size"); 
$flags+=("--next-page-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ce-get-savings-plans-coverage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--time-period"); 
$flags+=("--group-by"); 
$flags+=("--granularity"); 
$flags+=("--filter"); 
$flags+=("--metrics"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ce-get-savings-plans-purchase-recommendation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--savings-plans-type"); 
$flags+=("--term-in-years"); 
$flags+=("--payment-option"); 
$flags+=("--account-scope"); 
$flags+=("--next-page-token"); 
$flags+=("--page-size"); 
$flags+=("--lookback-period-in-days"); 
$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ce-get-savings-plans-utilization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--time-period"); 
$flags+=("--granularity"); 
$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ce-get-savings-plans-utilization-details {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--time-period"); 
$flags+=("--filter"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ce-get-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--search-string"); 
$flags+=("--time-period"); 
$flags+=("--tag-key"); 
$flags+=("--next-page-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ce-get-usage-forecast {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--time-period"); 
$flags+=("--metric"); 
$flags+=("--granularity"); 
$flags+=("--filter"); 
$flags+=("--prediction-interval-level"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ce-list-cost-category-definitions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--effective-on"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ce-update-cost-category-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cost-category-arn"); 
$flags+=("--rule-version"); 
$flags+=("--rules"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-phone-number-with-user"); 
$commands+=("associate-phone-numbers-with-voice-connector"); 
$commands+=("associate-phone-numbers-with-voice-connector-group"); 
$commands+=("associate-signin-delegate-groups-with-account"); 
$commands+=("batch-create-attendee"); 
$commands+=("batch-create-room-membership"); 
$commands+=("batch-delete-phone-number"); 
$commands+=("batch-suspend-user"); 
$commands+=("batch-unsuspend-user"); 
$commands+=("batch-update-phone-number"); 
$commands+=("batch-update-user"); 
$commands+=("create-account"); 
$commands+=("create-attendee"); 
$commands+=("create-bot"); 
$commands+=("create-meeting"); 
$commands+=("create-phone-number-order"); 
$commands+=("create-proxy-session"); 
$commands+=("create-room"); 
$commands+=("create-room-membership"); 
$commands+=("create-user"); 
$commands+=("create-voice-connector"); 
$commands+=("create-voice-connector-group"); 
$commands+=("delete-account"); 
$commands+=("delete-attendee"); 
$commands+=("delete-events-configuration"); 
$commands+=("delete-meeting"); 
$commands+=("delete-phone-number"); 
$commands+=("delete-proxy-session"); 
$commands+=("delete-room"); 
$commands+=("delete-room-membership"); 
$commands+=("delete-voice-connector"); 
$commands+=("delete-voice-connector-group"); 
$commands+=("delete-voice-connector-origination"); 
$commands+=("delete-voice-connector-proxy"); 
$commands+=("delete-voice-connector-streaming-configuration"); 
$commands+=("delete-voice-connector-termination"); 
$commands+=("delete-voice-connector-termination-credentials"); 
$commands+=("disassociate-phone-number-from-user"); 
$commands+=("disassociate-phone-numbers-from-voice-connector"); 
$commands+=("disassociate-phone-numbers-from-voice-connector-group"); 
$commands+=("disassociate-signin-delegate-groups-from-account"); 
$commands+=("get-account"); 
$commands+=("get-account-settings"); 
$commands+=("get-attendee"); 
$commands+=("get-bot"); 
$commands+=("get-events-configuration"); 
$commands+=("get-global-settings"); 
$commands+=("get-meeting"); 
$commands+=("get-phone-number"); 
$commands+=("get-phone-number-order"); 
$commands+=("get-phone-number-settings"); 
$commands+=("get-proxy-session"); 
$commands+=("get-room"); 
$commands+=("get-user"); 
$commands+=("get-user-settings"); 
$commands+=("get-voice-connector"); 
$commands+=("get-voice-connector-group"); 
$commands+=("get-voice-connector-logging-configuration"); 
$commands+=("get-voice-connector-origination"); 
$commands+=("get-voice-connector-proxy"); 
$commands+=("get-voice-connector-streaming-configuration"); 
$commands+=("get-voice-connector-termination"); 
$commands+=("get-voice-connector-termination-health"); 
$commands+=("invite-users"); 
$commands+=("list-accounts"); 
$commands+=("list-attendee-tags"); 
$commands+=("list-attendees"); 
$commands+=("list-bots"); 
$commands+=("list-meeting-tags"); 
$commands+=("list-meetings"); 
$commands+=("list-phone-number-orders"); 
$commands+=("list-phone-numbers"); 
$commands+=("list-proxy-sessions"); 
$commands+=("list-room-memberships"); 
$commands+=("list-rooms"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-users"); 
$commands+=("list-voice-connector-groups"); 
$commands+=("list-voice-connector-termination-credentials"); 
$commands+=("list-voice-connectors"); 
$commands+=("logout-user"); 
$commands+=("put-events-configuration"); 
$commands+=("put-voice-connector-logging-configuration"); 
$commands+=("put-voice-connector-origination"); 
$commands+=("put-voice-connector-proxy"); 
$commands+=("put-voice-connector-streaming-configuration"); 
$commands+=("put-voice-connector-termination"); 
$commands+=("put-voice-connector-termination-credentials"); 
$commands+=("regenerate-security-token"); 
$commands+=("reset-personal-pin"); 
$commands+=("restore-phone-number"); 
$commands+=("search-available-phone-numbers"); 
$commands+=("tag-attendee"); 
$commands+=("tag-meeting"); 
$commands+=("tag-resource"); 
$commands+=("untag-attendee"); 
$commands+=("untag-meeting"); 
$commands+=("untag-resource"); 
$commands+=("update-account"); 
$commands+=("update-account-settings"); 
$commands+=("update-bot"); 
$commands+=("update-global-settings"); 
$commands+=("update-phone-number"); 
$commands+=("update-phone-number-settings"); 
$commands+=("update-proxy-session"); 
$commands+=("update-room"); 
$commands+=("update-room-membership"); 
$commands+=("update-user"); 
$commands+=("update-user-settings"); 
$commands+=("update-voice-connector"); 
$commands+=("update-voice-connector-group");

return $commands;
}

 function Get-chime-associate-phone-number-with-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--user-id"); 
$flags+=("--e"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-associate-phone-numbers-with-voice-connector {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--e"); 
$flags+=("--force-associate"); 
$flags+=("--no-force-associate"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-associate-phone-numbers-with-voice-connector-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-group-id"); 
$flags+=("--e"); 
$flags+=("--force-associate"); 
$flags+=("--no-force-associate"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-associate-signin-delegate-groups-with-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--signin-delegate-groups"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-batch-create-attendee {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--meeting-id"); 
$flags+=("--attendees"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-batch-create-room-membership {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--room-id"); 
$flags+=("--membership-item-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-batch-delete-phone-number {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--phone-number-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-batch-suspend-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--user-id-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-batch-unsuspend-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--user-id-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-batch-update-phone-number {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--update-phone-number-request-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-batch-update-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--update-user-request-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-create-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-create-attendee {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--meeting-id"); 
$flags+=("--external-user-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-create-bot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--display-name"); 
$flags+=("--domain"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-create-meeting {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-request-token"); 
$flags+=("--external-meeting-id"); 
$flags+=("--meeting-host-id"); 
$flags+=("--media-region"); 
$flags+=("--tags"); 
$flags+=("--notifications-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-create-phone-number-order {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--product-type"); 
$flags+=("--e"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-create-proxy-session {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--participant-phone-numbers"); 
$flags+=("--name"); 
$flags+=("--expiry-minutes"); 
$flags+=("--capabilities"); 
$flags+=("--number-selection-behavior"); 
$flags+=("--geo-match-level"); 
$flags+=("--geo-match-params"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-create-room {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--name"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-create-room-membership {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--room-id"); 
$flags+=("--member-id"); 
$flags+=("--role"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-create-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--username"); 
$flags+=("--email"); 
$flags+=("--user-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-create-voice-connector {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--aws-region"); 
$flags+=("--require-encryption"); 
$flags+=("--no-require-encryption"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-create-voice-connector-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--voice-connector-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-delete-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-delete-attendee {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--meeting-id"); 
$flags+=("--attendee-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-delete-events-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--bot-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-delete-meeting {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--meeting-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-delete-phone-number {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--phone-number-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-delete-proxy-session {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--proxy-session-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-delete-room {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--room-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-delete-room-membership {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--room-id"); 
$flags+=("--member-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-delete-voice-connector {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-delete-voice-connector-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-delete-voice-connector-origination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-delete-voice-connector-proxy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-delete-voice-connector-streaming-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-delete-voice-connector-termination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-delete-voice-connector-termination-credentials {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--usernames"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-disassociate-phone-number-from-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--user-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-disassociate-phone-numbers-from-voice-connector {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--e"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-disassociate-phone-numbers-from-voice-connector-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-group-id"); 
$flags+=("--e"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-disassociate-signin-delegate-groups-from-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--group-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-get-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-get-account-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-get-attendee {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--meeting-id"); 
$flags+=("--attendee-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-get-bot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--bot-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-get-events-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--bot-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-get-global-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-get-meeting {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--meeting-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-get-phone-number {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--phone-number-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-get-phone-number-order {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--phone-number-order-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-get-phone-number-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-get-proxy-session {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--proxy-session-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-get-room {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--room-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-get-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--user-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-get-user-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--user-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-get-voice-connector {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-get-voice-connector-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-get-voice-connector-logging-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-get-voice-connector-origination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-get-voice-connector-proxy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-get-voice-connector-streaming-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-get-voice-connector-termination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-get-voice-connector-termination-health {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-invite-users {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--user-email-list"); 
$flags+=("--user-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-list-accounts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--user-email"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-list-attendee-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--meeting-id"); 
$flags+=("--attendee-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-list-attendees {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--meeting-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-list-bots {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-list-meeting-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--meeting-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-list-meetings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-list-phone-number-orders {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-list-phone-numbers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--status"); 
$flags+=("--product-type"); 
$flags+=("--filter-name"); 
$flags+=("--filter-value"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-list-proxy-sessions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--status"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-list-room-memberships {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--room-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-list-rooms {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--member-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-list-users {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--user-email"); 
$flags+=("--user-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-list-voice-connector-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-list-voice-connector-termination-credentials {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-list-voice-connectors {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-logout-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--user-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-put-events-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--bot-id"); 
$flags+=("--outbound-events-https-endpoint"); 
$flags+=("--lambda--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-put-voice-connector-logging-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--logging-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-put-voice-connector-origination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--origination"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-put-voice-connector-proxy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--default-session-expiry-minutes"); 
$flags+=("--phone-number-pool-countries"); 
$flags+=("--fall-back-phone-number"); 
$flags+=("--disabled"); 
$flags+=("--no-disabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-put-voice-connector-streaming-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--streaming-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-put-voice-connector-termination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--termination"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-put-voice-connector-termination-credentials {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--credentials"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-regenerate-security-token {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--bot-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-reset-personal-pin {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--user-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-restore-phone-number {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--phone-number-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-search-available-phone-numbers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--area-code"); 
$flags+=("--city"); 
$flags+=("--country"); 
$flags+=("--state"); 
$flags+=("--toll-free-prefix"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-tag-attendee {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--meeting-id"); 
$flags+=("--attendee-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-tag-meeting {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--meeting-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-untag-attendee {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--meeting-id"); 
$flags+=("--attendee-id"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-untag-meeting {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--meeting-id"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-update-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-update-account-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--account-settings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-update-bot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--bot-id"); 
$flags+=("--disabled"); 
$flags+=("--no-disabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-update-global-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--business-calling"); 
$flags+=("--voice-connector"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-update-phone-number {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--phone-number-id"); 
$flags+=("--product-type"); 
$flags+=("--calling-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-update-phone-number-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--calling-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-update-proxy-session {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--proxy-session-id"); 
$flags+=("--capabilities"); 
$flags+=("--expiry-minutes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-update-room {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--room-id"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-update-room-membership {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--room-id"); 
$flags+=("--member-id"); 
$flags+=("--role"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-update-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--user-id"); 
$flags+=("--license-type"); 
$flags+=("--user-type"); 
$flags+=("--alexa-for-business-metadata"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-update-user-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--user-id"); 
$flags+=("--user-settings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-update-voice-connector {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-id"); 
$flags+=("--name"); 
$flags+=("--require-encryption"); 
$flags+=("--no-require-encryption"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-chime-update-voice-connector-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--voice-connector-group-id"); 
$flags+=("--name"); 
$flags+=("--voice-connector-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloud9 {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-environment-ec2"); 
$commands+=("create-environment-membership"); 
$commands+=("delete-environment"); 
$commands+=("delete-environment-membership"); 
$commands+=("describe-environment-memberships"); 
$commands+=("describe-environment-status"); 
$commands+=("describe-environments"); 
$commands+=("list-environments"); 
$commands+=("list-tags-for-resource"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-environment"); 
$commands+=("update-environment-membership");

return $commands;
}

 function Get-cloud9-create-environment-ec2 {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--client-request-token"); 
$flags+=("--instance-type"); 
$flags+=("--subnet-id"); 
$flags+=("--automatic-stop-time-minutes"); 
$flags+=("--owner-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloud9-create-environment-membership {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--environment-id"); 
$flags+=("--user-arn"); 
$flags+=("--permissions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloud9-delete-environment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--environment-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloud9-delete-environment-membership {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--environment-id"); 
$flags+=("--user-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloud9-describe-environment-memberships {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-arn"); 
$flags+=("--environment-id"); 
$flags+=("--permissions"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloud9-describe-environment-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--environment-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloud9-describe-environments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--environment-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloud9-list-environments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloud9-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloud9-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloud9-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloud9-update-environment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--environment-id"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloud9-update-environment-membership {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--environment-id"); 
$flags+=("--user-arn"); 
$flags+=("--permissions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-facet-to-object"); 
$commands+=("apply-schema"); 
$commands+=("attach-object"); 
$commands+=("attach-policy"); 
$commands+=("attach-to-index"); 
$commands+=("attach-typed-link"); 
$commands+=("batch-read"); 
$commands+=("batch-write"); 
$commands+=("create-directory"); 
$commands+=("create-facet"); 
$commands+=("create-index"); 
$commands+=("create-object"); 
$commands+=("create-schema"); 
$commands+=("create-typed-link-facet"); 
$commands+=("delete-directory"); 
$commands+=("delete-facet"); 
$commands+=("delete-object"); 
$commands+=("delete-schema"); 
$commands+=("delete-typed-link-facet"); 
$commands+=("detach-from-index"); 
$commands+=("detach-object"); 
$commands+=("detach-policy"); 
$commands+=("detach-typed-link"); 
$commands+=("disable-directory"); 
$commands+=("enable-directory"); 
$commands+=("get-applied-schema-version"); 
$commands+=("get-directory"); 
$commands+=("get-facet"); 
$commands+=("get-link-attributes"); 
$commands+=("get-object-attributes"); 
$commands+=("get-object-information"); 
$commands+=("get-schema-as-json"); 
$commands+=("get-typed-link-facet-information"); 
$commands+=("list-applied-schema-arns"); 
$commands+=("list-attached-indices"); 
$commands+=("list-development-schema-arns"); 
$commands+=("list-directories"); 
$commands+=("list-facet-attributes"); 
$commands+=("list-facet-names"); 
$commands+=("list-incoming-typed-links"); 
$commands+=("list-index"); 
$commands+=("list-managed-schema-arns"); 
$commands+=("list-object-attributes"); 
$commands+=("list-object-children"); 
$commands+=("list-object-parent-paths"); 
$commands+=("list-object-parents"); 
$commands+=("list-object-policies"); 
$commands+=("list-outgoing-typed-links"); 
$commands+=("list-policy-attachments"); 
$commands+=("list-published-schema-arns"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-typed-link-facet-attributes"); 
$commands+=("list-typed-link-facet-names"); 
$commands+=("lookup-policy"); 
$commands+=("publish-schema"); 
$commands+=("put-schema-from-json"); 
$commands+=("remove-facet-from-object"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-facet"); 
$commands+=("update-link-attributes"); 
$commands+=("update-object-attributes"); 
$commands+=("update-schema"); 
$commands+=("update-typed-link-facet"); 
$commands+=("upgrade-applied-schema"); 
$commands+=("upgrade-published-schema");

return $commands;
}

 function Get-clouddirectory-add-facet-to-object {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--schema-facet"); 
$flags+=("--object-attribute-list"); 
$flags+=("--object-reference"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-apply-schema {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--published-schema-arn"); 
$flags+=("--directory-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-attach-object {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--parent-reference"); 
$flags+=("--child-reference"); 
$flags+=("--link-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-attach-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--policy-reference"); 
$flags+=("--object-reference"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-attach-to-index {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--index-reference"); 
$flags+=("--target-reference"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-attach-typed-link {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--source-object-reference"); 
$flags+=("--target-object-reference"); 
$flags+=("--typed-link-facet"); 
$flags+=("--attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-batch-read {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--operations"); 
$flags+=("--consistency-level"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-batch-write {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--operations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-create-directory {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--schema-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-create-facet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schema-arn"); 
$flags+=("--name"); 
$flags+=("--attributes"); 
$flags+=("--object-type"); 
$flags+=("--facet-style"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-create-index {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--ordered-indexed-attribute-list"); 
$flags+=("--is-unique"); 
$flags+=("--no-is-unique"); 
$flags+=("--parent-reference"); 
$flags+=("--link-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-create-object {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--schema-facets"); 
$flags+=("--object-attribute-list"); 
$flags+=("--parent-reference"); 
$flags+=("--link-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-create-schema {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-create-typed-link-facet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schema-arn"); 
$flags+=("--facet"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-delete-directory {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-delete-facet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schema-arn"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-delete-object {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--object-reference"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-delete-schema {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schema-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-delete-typed-link-facet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schema-arn"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-detach-from-index {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--index-reference"); 
$flags+=("--target-reference"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-detach-object {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--parent-reference"); 
$flags+=("--link-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-detach-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--policy-reference"); 
$flags+=("--object-reference"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-detach-typed-link {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--typed-link-specifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-disable-directory {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-enable-directory {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-get-applied-schema-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schema-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-get-directory {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-get-facet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schema-arn"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-get-link-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--typed-link-specifier"); 
$flags+=("--attribute-names"); 
$flags+=("--consistency-level"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-get-object-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--object-reference"); 
$flags+=("--consistency-level"); 
$flags+=("--schema-facet"); 
$flags+=("--attribute-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-get-object-information {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--object-reference"); 
$flags+=("--consistency-level"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-get-schema-as-json {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schema-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-get-typed-link-facet-information {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schema-arn"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-list-applied-schema-arns {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--schema-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-list-attached-indices {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--target-reference"); 
$flags+=("--consistency-level"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-list-development-schema-arns {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-list-directories {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--state"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-list-facet-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schema-arn"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-list-facet-names {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schema-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-list-incoming-typed-links {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--object-reference"); 
$flags+=("--filter-attribute-ranges"); 
$flags+=("--filter-typed-link"); 
$flags+=("--consistency-level"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-list-index {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--ranges-on-indexed-values"); 
$flags+=("--index-reference"); 
$flags+=("--consistency-level"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-list-managed-schema-arns {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schema-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-list-object-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--object-reference"); 
$flags+=("--consistency-level"); 
$flags+=("--facet-filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-list-object-children {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--object-reference"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--consistency-level"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-list-object-parent-paths {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--object-reference"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-list-object-parents {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--object-reference"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--consistency-level"); 
$flags+=("--include-all-links-to-each-parent"); 
$flags+=("--no-include-all-links-to-each-parent"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-list-object-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--object-reference"); 
$flags+=("--consistency-level"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-list-outgoing-typed-links {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--object-reference"); 
$flags+=("--filter-attribute-ranges"); 
$flags+=("--filter-typed-link"); 
$flags+=("--consistency-level"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-list-policy-attachments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--policy-reference"); 
$flags+=("--consistency-level"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-list-published-schema-arns {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schema-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-list-typed-link-facet-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schema-arn"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-list-typed-link-facet-names {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schema-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-lookup-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--object-reference"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-publish-schema {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--development-schema-arn"); 
$flags+=("--minor-version"); 
$flags+=("--name"); 
$flags+=("--schema-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-put-schema-from-json {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schema-arn"); 
$flags+=("--document"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-remove-facet-from-object {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--schema-facet"); 
$flags+=("--object-reference"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-update-facet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schema-arn"); 
$flags+=("--name"); 
$flags+=("--attribute-updates"); 
$flags+=("--object-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-update-link-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--typed-link-specifier"); 
$flags+=("--attribute-updates"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-update-object-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-arn"); 
$flags+=("--object-reference"); 
$flags+=("--attribute-updates"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-update-schema {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schema-arn"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-update-typed-link-facet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schema-arn"); 
$flags+=("--name"); 
$flags+=("--attribute-updates"); 
$flags+=("--identity-attribute-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-upgrade-applied-schema {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--published-schema-arn"); 
$flags+=("--directory-arn"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-clouddirectory-upgrade-published-schema {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--development-schema-arn"); 
$flags+=("--published-schema-arn"); 
$flags+=("--minor-version"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation {
    $commands = [System.Collections.ArrayList]@();

$commands+=("cancel-update-stack"); 
$commands+=("continue-update-rollback"); 
$commands+=("create-change-set"); 
$commands+=("create-stack"); 
$commands+=("create-stack-instances"); 
$commands+=("create-stack-set"); 
$commands+=("delete-change-set"); 
$commands+=("delete-stack"); 
$commands+=("delete-stack-instances"); 
$commands+=("delete-stack-set"); 
$commands+=("deploy/index"); 
$commands+=("deregister-type"); 
$commands+=("describe-account-limits"); 
$commands+=("describe-change-set"); 
$commands+=("describe-stack-drift-detection-status"); 
$commands+=("describe-stack-events"); 
$commands+=("describe-stack-instance"); 
$commands+=("describe-stack-resource"); 
$commands+=("describe-stack-resource-drifts"); 
$commands+=("describe-stack-resources"); 
$commands+=("describe-stack-set"); 
$commands+=("describe-stack-set-operation"); 
$commands+=("describe-stacks"); 
$commands+=("describe-type"); 
$commands+=("describe-type-registration"); 
$commands+=("detect-stack-drift"); 
$commands+=("detect-stack-resource-drift"); 
$commands+=("detect-stack-set-drift"); 
$commands+=("estimate-template-cost"); 
$commands+=("execute-change-set"); 
$commands+=("get-stack-policy"); 
$commands+=("get-template"); 
$commands+=("get-template-summary"); 
$commands+=("list-change-sets"); 
$commands+=("list-exports"); 
$commands+=("list-imports"); 
$commands+=("list-stack-instances"); 
$commands+=("list-stack-resources"); 
$commands+=("list-stack-set-operation-results"); 
$commands+=("list-stack-set-operations"); 
$commands+=("list-stack-sets"); 
$commands+=("list-stacks"); 
$commands+=("list-type-registrations"); 
$commands+=("list-type-versions"); 
$commands+=("list-types"); 
$commands+=("package"); 
$commands+=("record-handler-progress"); 
$commands+=("register-type"); 
$commands+=("set-stack-policy"); 
$commands+=("set-type-default-version"); 
$commands+=("signal-resource"); 
$commands+=("stop-stack-set-operation"); 
$commands+=("update-stack"); 
$commands+=("update-stack-instances"); 
$commands+=("update-stack-set"); 
$commands+=("update-termination-protection"); 
$commands+=("validate-template"); 
$commands+=("wait");

return $commands;
}

 function Get-cloudformation-cancel-update-stack {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-name"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-continue-update-rollback {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-name"); 
$flags+=("--role-arn"); 
$flags+=("--resources-to-skip"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-create-change-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-name"); 
$flags+=("--template-body"); 
$flags+=("--template-url"); 
$flags+=("--use-previous-template"); 
$flags+=("--no-use-previous-template"); 
$flags+=("--parameters"); 
$flags+=("--capabilities"); 
$flags+=("--resource-types"); 
$flags+=("--role-arn"); 
$flags+=("--rollback-configuration"); 
$flags+=("--notification-arns"); 
$flags+=("--tags"); 
$flags+=("--change-set-name"); 
$flags+=("--client-token"); 
$flags+=("--description"); 
$flags+=("--change-set-type"); 
$flags+=("--resources-to-import"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-create-stack {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-name"); 
$flags+=("--template-body"); 
$flags+=("--template-url"); 
$flags+=("--parameters"); 
$flags+=("--disable-rollback"); 
$flags+=("--no-disable-rollback"); 
$flags+=("--rollback-configuration"); 
$flags+=("--timeout-in-minutes"); 
$flags+=("--notification-arns"); 
$flags+=("--capabilities"); 
$flags+=("--resource-types"); 
$flags+=("--role-arn"); 
$flags+=("--on-failure"); 
$flags+=("--stack-policy-body"); 
$flags+=("--stack-policy-url"); 
$flags+=("--tags"); 
$flags+=("--client-request-token"); 
$flags+=("--enable-termination-protection"); 
$flags+=("--no-enable-termination-protection"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-create-stack-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-set-name"); 
$flags+=("--accounts"); 
$flags+=("--deployment-targets"); 
$flags+=("--regions"); 
$flags+=("--parameter-overrides"); 
$flags+=("--operation-preferences"); 
$flags+=("--operation-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-create-stack-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-set-name"); 
$flags+=("--description"); 
$flags+=("--template-body"); 
$flags+=("--template-url"); 
$flags+=("--parameters"); 
$flags+=("--capabilities"); 
$flags+=("--tags"); 
$flags+=("--administration-role-arn"); 
$flags+=("--execution-role-name"); 
$flags+=("--permission-model"); 
$flags+=("--auto-deployment"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-delete-change-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--change-set-name"); 
$flags+=("--stack-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-delete-stack {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-name"); 
$flags+=("--retain-resources"); 
$flags+=("--role-arn"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-delete-stack-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-set-name"); 
$flags+=("--accounts"); 
$flags+=("--deployment-targets"); 
$flags+=("--regions"); 
$flags+=("--operation-preferences"); 
$flags+=("--retain-stacks"); 
$flags+=("--no-retain-stacks"); 
$flags+=("--operation-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-delete-stack-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-deploy/index {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-file"); 
$flags+=("--stack-name"); 
$flags+=("--s"); 
$flags+=("--force-upload"); 
$flags+=("--s"); 
$flags+=("--kms-key-id"); 
$flags+=("--parameter-overrides"); 
$flags+=("--capabilities"); 
$flags+=("--no-execute-changeset"); 
$flags+=("--role-arn"); 
$flags+=("--notification-arns"); 
$flags+=("--fail-on-empty-changeset"); 
$flags+=("--no-fail-on-empty-changeset"); 
$flags+=("--tags");

return $flags;
}

 function Get-cloudformation-deregister-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--type"); 
$flags+=("--type-name"); 
$flags+=("--version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-describe-account-limits {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-describe-change-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--change-set-name"); 
$flags+=("--stack-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-describe-stack-drift-detection-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-drift-detection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-describe-stack-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-describe-stack-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-set-name"); 
$flags+=("--stack-instance-account"); 
$flags+=("--stack-instance-region"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-describe-stack-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-name"); 
$flags+=("--logical-resource-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-describe-stack-resource-drifts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-name"); 
$flags+=("--stack-resource-drift-status-filters"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-describe-stack-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-name"); 
$flags+=("--logical-resource-id"); 
$flags+=("--physical-resource-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-describe-stack-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-describe-stack-set-operation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-set-name"); 
$flags+=("--operation-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-describe-stacks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-describe-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--type"); 
$flags+=("--type-name"); 
$flags+=("--arn"); 
$flags+=("--version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-describe-type-registration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registration-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-detect-stack-drift {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-name"); 
$flags+=("--logical-resource-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-detect-stack-resource-drift {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-name"); 
$flags+=("--logical-resource-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-detect-stack-set-drift {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-set-name"); 
$flags+=("--operation-preferences"); 
$flags+=("--operation-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-estimate-template-cost {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-body"); 
$flags+=("--template-url"); 
$flags+=("--parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-execute-change-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--change-set-name"); 
$flags+=("--stack-name"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-get-stack-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-get-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-name"); 
$flags+=("--change-set-name"); 
$flags+=("--template-stage"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-get-template-summary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-body"); 
$flags+=("--template-url"); 
$flags+=("--stack-name"); 
$flags+=("--stack-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-list-change-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-list-exports {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-list-imports {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--export-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-list-stack-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-set-name"); 
$flags+=("--stack-instance-account"); 
$flags+=("--stack-instance-region"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-list-stack-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-list-stack-set-operation-results {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-set-name"); 
$flags+=("--operation-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-list-stack-set-operations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-list-stack-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-list-stacks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-status-filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-list-type-registrations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--type"); 
$flags+=("--type-name"); 
$flags+=("--type-arn"); 
$flags+=("--registration-status-filter"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-list-type-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--type"); 
$flags+=("--type-name"); 
$flags+=("--arn"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--deprecated-status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-list-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--visibility"); 
$flags+=("--provisioning-type"); 
$flags+=("--deprecated-status"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-package {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-file"); 
$flags+=("--s"); 
$flags+=("--s"); 
$flags+=("--kms-key-id"); 
$flags+=("--output-template-file"); 
$flags+=("--use-json"); 
$flags+=("--force-upload"); 
$flags+=("--metadata");

return $flags;
}

 function Get-cloudformation-record-handler-progress {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bearer-token"); 
$flags+=("--operation-status"); 
$flags+=("--current-operation-status"); 
$flags+=("--status-message"); 
$flags+=("--error-code"); 
$flags+=("--resource-model"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-register-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--type"); 
$flags+=("--type-name"); 
$flags+=("--schema-handler-package"); 
$flags+=("--logging-config"); 
$flags+=("--execution-role-arn"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-set-stack-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-name"); 
$flags+=("--stack-policy-body"); 
$flags+=("--stack-policy-url"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-set-type-default-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--type"); 
$flags+=("--type-name"); 
$flags+=("--version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-signal-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-name"); 
$flags+=("--logical-resource-id"); 
$flags+=("--unique-id"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-stop-stack-set-operation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-set-name"); 
$flags+=("--operation-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-update-stack {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-name"); 
$flags+=("--template-body"); 
$flags+=("--template-url"); 
$flags+=("--use-previous-template"); 
$flags+=("--no-use-previous-template"); 
$flags+=("--stack-policy-during-update-body"); 
$flags+=("--stack-policy-during-update-url"); 
$flags+=("--parameters"); 
$flags+=("--capabilities"); 
$flags+=("--resource-types"); 
$flags+=("--role-arn"); 
$flags+=("--rollback-configuration"); 
$flags+=("--stack-policy-body"); 
$flags+=("--stack-policy-url"); 
$flags+=("--notification-arns"); 
$flags+=("--tags"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-update-stack-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-set-name"); 
$flags+=("--accounts"); 
$flags+=("--deployment-targets"); 
$flags+=("--regions"); 
$flags+=("--parameter-overrides"); 
$flags+=("--operation-preferences"); 
$flags+=("--operation-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-update-stack-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-set-name"); 
$flags+=("--description"); 
$flags+=("--template-body"); 
$flags+=("--template-url"); 
$flags+=("--use-previous-template"); 
$flags+=("--no-use-previous-template"); 
$flags+=("--parameters"); 
$flags+=("--capabilities"); 
$flags+=("--tags"); 
$flags+=("--operation-preferences"); 
$flags+=("--administration-role-arn"); 
$flags+=("--execution-role-name"); 
$flags+=("--deployment-targets"); 
$flags+=("--permission-model"); 
$flags+=("--auto-deployment"); 
$flags+=("--operation-id"); 
$flags+=("--accounts"); 
$flags+=("--regions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-update-termination-protection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--enable-termination-protection"); 
$flags+=("--no-enable-termination-protection"); 
$flags+=("--stack-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-validate-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-body"); 
$flags+=("--template-url"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudformation-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-cloudfront {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-cloud-front-origin-access-identity"); 
$commands+=("create-distribution"); 
$commands+=("create-distribution-with-tags"); 
$commands+=("create-field-level-encryption-config"); 
$commands+=("create-field-level-encryption-profile"); 
$commands+=("create-invalidation"); 
$commands+=("create-public-key"); 
$commands+=("create-streaming-distribution"); 
$commands+=("create-streaming-distribution-with-tags"); 
$commands+=("delete-cloud-front-origin-access-identity"); 
$commands+=("delete-distribution"); 
$commands+=("delete-field-level-encryption-config"); 
$commands+=("delete-field-level-encryption-profile"); 
$commands+=("delete-public-key"); 
$commands+=("delete-streaming-distribution"); 
$commands+=("get-cloud-front-origin-access-identity"); 
$commands+=("get-cloud-front-origin-access-identity-config"); 
$commands+=("get-distribution"); 
$commands+=("get-distribution-config"); 
$commands+=("get-field-level-encryption"); 
$commands+=("get-field-level-encryption-config"); 
$commands+=("get-field-level-encryption-profile"); 
$commands+=("get-field-level-encryption-profile-config"); 
$commands+=("get-invalidation"); 
$commands+=("get-public-key"); 
$commands+=("get-public-key-config"); 
$commands+=("get-streaming-distribution"); 
$commands+=("get-streaming-distribution-config"); 
$commands+=("list-cloud-front-origin-access-identities"); 
$commands+=("list-distributions"); 
$commands+=("list-distributions-by-web-acl-id"); 
$commands+=("list-field-level-encryption-configs"); 
$commands+=("list-field-level-encryption-profiles"); 
$commands+=("list-invalidations"); 
$commands+=("list-public-keys"); 
$commands+=("list-streaming-distributions"); 
$commands+=("list-tags-for-resource"); 
$commands+=("sign"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-cloud-front-origin-access-identity"); 
$commands+=("update-distribution"); 
$commands+=("update-field-level-encryption-config"); 
$commands+=("update-field-level-encryption-profile"); 
$commands+=("update-public-key"); 
$commands+=("update-streaming-distribution"); 
$commands+=("wait");

return $commands;
}

 function Get-cloudfront-create-cloud-front-origin-access-identity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cloud-front-origin-access-identity-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-create-distribution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--distribution-config"); 
$flags+=("--origin-domain-name"); 
$flags+=("--default-root-object"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-create-distribution-with-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--distribution-config-with-tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-create-field-level-encryption-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--field-level-encryption-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-create-field-level-encryption-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--field-level-encryption-profile-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-create-invalidation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--distribution-id"); 
$flags+=("--invalidation-batch"); 
$flags+=("--paths"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-create-public-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--public-key-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-create-streaming-distribution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--streaming-distribution-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-create-streaming-distribution-with-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--streaming-distribution-config-with-tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-delete-cloud-front-origin-access-identity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--if-match"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-delete-distribution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--if-match"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-delete-field-level-encryption-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--if-match"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-delete-field-level-encryption-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--if-match"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-delete-public-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--if-match"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-delete-streaming-distribution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--if-match"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-get-cloud-front-origin-access-identity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-get-cloud-front-origin-access-identity-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-get-distribution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-get-distribution-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-get-field-level-encryption {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-get-field-level-encryption-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-get-field-level-encryption-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-get-field-level-encryption-profile-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-get-invalidation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--distribution-id"); 
$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-get-public-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-get-public-key-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-get-streaming-distribution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-get-streaming-distribution-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-list-cloud-front-origin-access-identities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-list-distributions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-list-distributions-by-web-acl-id {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--marker"); 
$flags+=("--max-items"); 
$flags+=("--web-acl-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-list-field-level-encryption-configs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--marker"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-list-field-level-encryption-profiles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--marker"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-list-invalidations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--distribution-id"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-list-public-keys {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--marker"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-list-streaming-distributions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-sign {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--url"); 
$flags+=("--key-pair-id"); 
$flags+=("--private-key"); 
$flags+=("--date-less-than"); 
$flags+=("--date-greater-than"); 
$flags+=("--ip-address");

return $flags;
}

 function Get-cloudfront-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-update-cloud-front-origin-access-identity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cloud-front-origin-access-identity-config"); 
$flags+=("--id"); 
$flags+=("--if-match"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-update-distribution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--distribution-config"); 
$flags+=("--id"); 
$flags+=("--if-match"); 
$flags+=("--default-root-object"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-update-field-level-encryption-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--field-level-encryption-config"); 
$flags+=("--id"); 
$flags+=("--if-match"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-update-field-level-encryption-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--field-level-encryption-profile-config"); 
$flags+=("--id"); 
$flags+=("--if-match"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-update-public-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--public-key-config"); 
$flags+=("--id"); 
$flags+=("--if-match"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-update-streaming-distribution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--streaming-distribution-config"); 
$flags+=("--id"); 
$flags+=("--if-match"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudfront-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-cloudhsm {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-tags-to-resource"); 
$commands+=("create-hapg"); 
$commands+=("create-hsm"); 
$commands+=("create-luna-client"); 
$commands+=("delete-hapg"); 
$commands+=("delete-hsm"); 
$commands+=("delete-luna-client"); 
$commands+=("describe-hapg"); 
$commands+=("describe-hsm"); 
$commands+=("describe-luna-client"); 
$commands+=("get-config"); 
$commands+=("list-available-zones"); 
$commands+=("list-hapgs"); 
$commands+=("list-hsms"); 
$commands+=("list-luna-clients"); 
$commands+=("list-tags-for-resource"); 
$commands+=("modify-hapg"); 
$commands+=("modify-hsm"); 
$commands+=("modify-luna-client"); 
$commands+=("remove-tags-from-resource");

return $commands;
}

 function Get-cloudhsm-add-tags-to-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsm-create-hapg {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--label"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsm-create-hsm {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subnet-id"); 
$flags+=("--ssh-key"); 
$flags+=("--eni-ip"); 
$flags+=("--iam-role-arn"); 
$flags+=("--external-id"); 
$flags+=("--subscription-type"); 
$flags+=("--client-token"); 
$flags+=("--syslog-ip"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsm-create-luna-client {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--label"); 
$flags+=("--certificate"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsm-delete-hapg {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hapg-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsm-delete-hsm {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hsm-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsm-delete-luna-client {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsm-describe-hapg {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hapg-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsm-describe-hsm {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hsm-arn"); 
$flags+=("--hsm-serial-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsm-describe-luna-client {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-arn"); 
$flags+=("--certificate-fingerprint"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsm-get-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-arn"); 
$flags+=("--client-version"); 
$flags+=("--hapg-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsm-list-available-zones {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsm-list-hapgs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsm-list-hsms {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsm-list-luna-clients {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsm-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsm-modify-hapg {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hapg-arn"); 
$flags+=("--label"); 
$flags+=("--partition-serial-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsm-modify-hsm {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hsm-arn"); 
$flags+=("--subnet-id"); 
$flags+=("--eni-ip"); 
$flags+=("--iam-role-arn"); 
$flags+=("--external-id"); 
$flags+=("--syslog-ip"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsm-modify-luna-client {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-arn"); 
$flags+=("--certificate"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsm-remove-tags-from-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-key-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsmv2 {
    $commands = [System.Collections.ArrayList]@();

$commands+=("copy-backup-to-region"); 
$commands+=("create-cluster"); 
$commands+=("create-hsm"); 
$commands+=("delete-backup"); 
$commands+=("delete-cluster"); 
$commands+=("delete-hsm"); 
$commands+=("describe-backups"); 
$commands+=("describe-clusters"); 
$commands+=("initialize-cluster"); 
$commands+=("list-tags"); 
$commands+=("restore-backup"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource");

return $commands;
}

 function Get-cloudhsmv2-copy-backup-to-region {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--destination-region"); 
$flags+=("--backup-id"); 
$flags+=("--tag-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsmv2-create-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subnet-ids"); 
$flags+=("--hsm-type"); 
$flags+=("--source-backup-id"); 
$flags+=("--tag-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsmv2-create-hsm {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--availability-zone"); 
$flags+=("--ip-address"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsmv2-delete-backup {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsmv2-delete-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsmv2-delete-hsm {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--hsm-id"); 
$flags+=("--eni-id"); 
$flags+=("--eni-ip"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsmv2-describe-backups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--sort-ascending"); 
$flags+=("--no-sort-ascending"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsmv2-describe-clusters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsmv2-initialize-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--signed-cert"); 
$flags+=("--trust-anchor"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsmv2-list-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsmv2-restore-backup {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsmv2-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--tag-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudhsmv2-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--tag-key-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch {
    $commands = [System.Collections.ArrayList]@();

$commands+=("build-suggesters"); 
$commands+=("create-domain"); 
$commands+=("define-analysis-scheme"); 
$commands+=("define-expression"); 
$commands+=("define-index-field"); 
$commands+=("define-suggester"); 
$commands+=("delete-analysis-scheme"); 
$commands+=("delete-domain"); 
$commands+=("delete-expression"); 
$commands+=("delete-index-field"); 
$commands+=("delete-suggester"); 
$commands+=("describe-analysis-schemes"); 
$commands+=("describe-availability-options"); 
$commands+=("describe-domain-endpoint-options"); 
$commands+=("describe-domains"); 
$commands+=("describe-expressions"); 
$commands+=("describe-index-fields"); 
$commands+=("describe-scaling-parameters"); 
$commands+=("describe-service-access-policies"); 
$commands+=("describe-suggesters"); 
$commands+=("index-documents"); 
$commands+=("list-domain-names"); 
$commands+=("update-availability-options"); 
$commands+=("update-domain-endpoint-options"); 
$commands+=("update-scaling-parameters"); 
$commands+=("update-service-access-policies");

return $commands;
}

 function Get-cloudsearch-build-suggesters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-create-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-define-analysis-scheme {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--analysis-scheme"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-define-expression {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--expression"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-define-index-field {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--name"); 
$flags+=("--type"); 
$flags+=("--default-value"); 
$flags+=("--facet-enabled"); 
$flags+=("--search-enabled"); 
$flags+=("--return-enabled"); 
$flags+=("--sort-enabled"); 
$flags+=("--highlight-enabled"); 
$flags+=("--analysis-scheme"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-define-suggester {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--suggester"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-delete-analysis-scheme {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--analysis-scheme-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-delete-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-delete-expression {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--expression-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-delete-index-field {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--index-field-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-delete-suggester {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--suggester-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-describe-analysis-schemes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--analysis-scheme-names"); 
$flags+=("--deployed"); 
$flags+=("--no-deployed"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-describe-availability-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--deployed"); 
$flags+=("--no-deployed"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-describe-domain-endpoint-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--deployed"); 
$flags+=("--no-deployed"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-describe-domains {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-describe-expressions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--expression-names"); 
$flags+=("--deployed"); 
$flags+=("--no-deployed"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-describe-index-fields {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--field-names"); 
$flags+=("--deployed"); 
$flags+=("--no-deployed"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-describe-scaling-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-describe-service-access-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--deployed"); 
$flags+=("--no-deployed"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-describe-suggesters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--suggester-names"); 
$flags+=("--deployed"); 
$flags+=("--no-deployed"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-index-documents {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-list-domain-names {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-update-availability-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--multi-az"); 
$flags+=("--no-multi-az"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-update-domain-endpoint-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--domain-endpoint-options"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-update-scaling-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--scaling-parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearch-update-service-access-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--access-policies"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearchdomain {
    $commands = [System.Collections.ArrayList]@();

$commands+=("search"); 
$commands+=("suggest"); 
$commands+=("upload-documents");

return $commands;
}

 function Get-cloudsearchdomain-search {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cursor"); 
$flags+=("--expr"); 
$flags+=("--facet"); 
$flags+=("--filter-query"); 
$flags+=("--highlight"); 
$flags+=("--partial"); 
$flags+=("--no-partial"); 
$flags+=("--query-options"); 
$flags+=("--query-parser"); 
$flags+=("--return"); 
$flags+=("--size"); 
$flags+=("--sort"); 
$flags+=("--start"); 
$flags+=("--stats"); 
$flags+=("--search-query"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearchdomain-suggest {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--suggester"); 
$flags+=("--size"); 
$flags+=("--suggest-query"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudsearchdomain-upload-documents {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--documents"); 
$flags+=("--content-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudtrail {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-tags"); 
$commands+=("create-trail"); 
$commands+=("delete-trail"); 
$commands+=("describe-trails"); 
$commands+=("get-event-selectors"); 
$commands+=("get-insight-selectors"); 
$commands+=("get-trail"); 
$commands+=("get-trail-status"); 
$commands+=("list-public-keys"); 
$commands+=("list-tags"); 
$commands+=("list-trails"); 
$commands+=("lookup-events"); 
$commands+=("put-event-selectors"); 
$commands+=("put-insight-selectors"); 
$commands+=("remove-tags"); 
$commands+=("start-logging"); 
$commands+=("stop-logging"); 
$commands+=("update-trail"); 
$commands+=("validate-logs");

return $commands;
}

 function Get-cloudtrail-add-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--tags-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudtrail-create-trail {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--s"); 
$flags+=("--s"); 
$flags+=("--sns-topic-name"); 
$flags+=("--include-global-service-events"); 
$flags+=("--no-include-global-service-events"); 
$flags+=("--is-multi-region-trail"); 
$flags+=("--no-is-multi-region-trail"); 
$flags+=("--enable-log-file-validation"); 
$flags+=("--no-enable-log-file-validation"); 
$flags+=("--cloud-watch-logs-log-group-arn"); 
$flags+=("--cloud-watch-logs-role-arn"); 
$flags+=("--kms-key-id"); 
$flags+=("--is-organization-trail"); 
$flags+=("--no-is-organization-trail"); 
$flags+=("--tags-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudtrail-delete-trail {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudtrail-describe-trails {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--trail-name-list"); 
$flags+=("--include-shadow-trails"); 
$flags+=("--no-include-shadow-trails"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudtrail-get-event-selectors {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--trail-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudtrail-get-insight-selectors {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--trail-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudtrail-get-trail {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudtrail-get-trail-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudtrail-list-public-keys {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudtrail-list-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudtrail-list-trails {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudtrail-lookup-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--lookup-attributes"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--event-category"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudtrail-put-event-selectors {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--trail-name"); 
$flags+=("--event-selectors"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudtrail-put-insight-selectors {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--trail-name"); 
$flags+=("--insight-selectors"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudtrail-remove-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--tags-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudtrail-start-logging {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudtrail-stop-logging {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudtrail-update-trail {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--s"); 
$flags+=("--s"); 
$flags+=("--sns-topic-name"); 
$flags+=("--include-global-service-events"); 
$flags+=("--no-include-global-service-events"); 
$flags+=("--is-multi-region-trail"); 
$flags+=("--no-is-multi-region-trail"); 
$flags+=("--enable-log-file-validation"); 
$flags+=("--no-enable-log-file-validation"); 
$flags+=("--cloud-watch-logs-log-group-arn"); 
$flags+=("--cloud-watch-logs-role-arn"); 
$flags+=("--kms-key-id"); 
$flags+=("--is-organization-trail"); 
$flags+=("--no-is-organization-trail"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudtrail-validate-logs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--trail-arn"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--s"); 
$flags+=("--s"); 
$flags+=("--account-id"); 
$flags+=("--verbose");

return $flags;
}

 function Get-cloudwatch {
    $commands = [System.Collections.ArrayList]@();

$commands+=("delete-alarms"); 
$commands+=("delete-anomaly-detector"); 
$commands+=("delete-dashboards"); 
$commands+=("delete-insight-rules"); 
$commands+=("describe-alarm-history"); 
$commands+=("describe-alarms"); 
$commands+=("describe-alarms-for-metric"); 
$commands+=("describe-anomaly-detectors"); 
$commands+=("describe-insight-rules"); 
$commands+=("disable-alarm-actions"); 
$commands+=("disable-insight-rules"); 
$commands+=("enable-alarm-actions"); 
$commands+=("enable-insight-rules"); 
$commands+=("get-dashboard"); 
$commands+=("get-insight-rule-report"); 
$commands+=("get-metric-data"); 
$commands+=("get-metric-statistics"); 
$commands+=("get-metric-widget-image"); 
$commands+=("list-dashboards"); 
$commands+=("list-metrics"); 
$commands+=("list-tags-for-resource"); 
$commands+=("put-anomaly-detector"); 
$commands+=("put-composite-alarm"); 
$commands+=("put-dashboard"); 
$commands+=("put-insight-rule"); 
$commands+=("put-metric-alarm"); 
$commands+=("put-metric-data"); 
$commands+=("set-alarm-state"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("wait");

return $commands;
}

 function Get-cloudwatch-delete-alarms {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--alarm-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-delete-anomaly-detector {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--namespace"); 
$flags+=("--metric-name"); 
$flags+=("--dimensions"); 
$flags+=("--stat"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-delete-dashboards {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dashboard-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-delete-insight-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-describe-alarm-history {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--alarm-name"); 
$flags+=("--alarm-types"); 
$flags+=("--history-item-type"); 
$flags+=("--start-date"); 
$flags+=("--end-date"); 
$flags+=("--scan-by"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-describe-alarms {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--alarm-names"); 
$flags+=("--alarm-name-prefix"); 
$flags+=("--alarm-types"); 
$flags+=("--children-of-alarm-name"); 
$flags+=("--parents-of-alarm-name"); 
$flags+=("--state-value"); 
$flags+=("--action-prefix"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-describe-alarms-for-metric {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--metric-name"); 
$flags+=("--namespace"); 
$flags+=("--statistic"); 
$flags+=("--extended-statistic"); 
$flags+=("--dimensions"); 
$flags+=("--period"); 
$flags+=("--unit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-describe-anomaly-detectors {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--namespace"); 
$flags+=("--metric-name"); 
$flags+=("--dimensions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-describe-insight-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-disable-alarm-actions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--alarm-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-disable-insight-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-enable-alarm-actions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--alarm-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-enable-insight-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-get-dashboard {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dashboard-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-get-insight-rule-report {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-name"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--period"); 
$flags+=("--max-contributor-count"); 
$flags+=("--metrics"); 
$flags+=("--order-by"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-get-metric-data {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--metric-data-queries"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--scan-by"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-get-metric-statistics {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--namespace"); 
$flags+=("--metric-name"); 
$flags+=("--dimensions"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--period"); 
$flags+=("--statistics"); 
$flags+=("--extended-statistics"); 
$flags+=("--unit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-get-metric-widget-image {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--metric-widget"); 
$flags+=("--output-format"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-list-dashboards {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dashboard-name-prefix"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-list-metrics {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--namespace"); 
$flags+=("--metric-name"); 
$flags+=("--dimensions"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-put-anomaly-detector {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--namespace"); 
$flags+=("--metric-name"); 
$flags+=("--dimensions"); 
$flags+=("--stat"); 
$flags+=("--configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-put-composite-alarm {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--actions-enabled"); 
$flags+=("--no-actions-enabled"); 
$flags+=("--alarm-actions"); 
$flags+=("--alarm-description"); 
$flags+=("--alarm-name"); 
$flags+=("--alarm-rule"); 
$flags+=("--insufficient-data-actions"); 
$flags+=("--ok-actions"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-put-dashboard {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dashboard-name"); 
$flags+=("--dashboard-body"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-put-insight-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-name"); 
$flags+=("--rule-state"); 
$flags+=("--rule-definition"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-put-metric-alarm {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--alarm-name"); 
$flags+=("--alarm-description"); 
$flags+=("--actions-enabled"); 
$flags+=("--no-actions-enabled"); 
$flags+=("--ok-actions"); 
$flags+=("--alarm-actions"); 
$flags+=("--insufficient-data-actions"); 
$flags+=("--metric-name"); 
$flags+=("--namespace"); 
$flags+=("--statistic"); 
$flags+=("--extended-statistic"); 
$flags+=("--dimensions"); 
$flags+=("--period"); 
$flags+=("--unit"); 
$flags+=("--evaluation-periods"); 
$flags+=("--datapoints-to-alarm"); 
$flags+=("--threshold"); 
$flags+=("--comparison-operator"); 
$flags+=("--treat-missing-data"); 
$flags+=("--evaluate-low-sample-count-percentile"); 
$flags+=("--metrics"); 
$flags+=("--tags"); 
$flags+=("--threshold-metric-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-put-metric-data {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--namespace"); 
$flags+=("--metric-data"); 
$flags+=("--metric-name"); 
$flags+=("--timestamp"); 
$flags+=("--unit"); 
$flags+=("--value"); 
$flags+=("--dimensions"); 
$flags+=("--statistic-values"); 
$flags+=("--storage-resolution"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-set-alarm-state {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--alarm-name"); 
$flags+=("--state-value"); 
$flags+=("--state-reason"); 
$flags+=("--state-reason-data"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cloudwatch-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-codebuild {
    $commands = [System.Collections.ArrayList]@();

$commands+=("batch-delete-builds"); 
$commands+=("batch-get-builds"); 
$commands+=("batch-get-projects"); 
$commands+=("batch-get-report-groups"); 
$commands+=("batch-get-reports"); 
$commands+=("create-project"); 
$commands+=("create-report-group"); 
$commands+=("create-webhook"); 
$commands+=("delete-project"); 
$commands+=("delete-report"); 
$commands+=("delete-report-group"); 
$commands+=("delete-resource-policy"); 
$commands+=("delete-source-credentials"); 
$commands+=("delete-webhook"); 
$commands+=("describe-test-cases"); 
$commands+=("get-resource-policy"); 
$commands+=("import-source-credentials"); 
$commands+=("invalidate-project-cache"); 
$commands+=("list-builds"); 
$commands+=("list-builds-for-project"); 
$commands+=("list-curated-environment-images"); 
$commands+=("list-projects"); 
$commands+=("list-report-groups"); 
$commands+=("list-reports"); 
$commands+=("list-reports-for-report-group"); 
$commands+=("list-shared-projects"); 
$commands+=("list-shared-report-groups"); 
$commands+=("list-source-credentials"); 
$commands+=("put-resource-policy"); 
$commands+=("start-build"); 
$commands+=("stop-build"); 
$commands+=("update-project"); 
$commands+=("update-report-group"); 
$commands+=("update-webhook");

return $commands;
}

 function Get-codebuild-batch-delete-builds {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-batch-get-builds {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-batch-get-projects {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-batch-get-report-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--report-group-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-batch-get-reports {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--report-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-create-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--source"); 
$flags+=("--secondary-sources"); 
$flags+=("--source-version"); 
$flags+=("--secondary-source-versions"); 
$flags+=("--artifacts"); 
$flags+=("--secondary-artifacts"); 
$flags+=("--cache"); 
$flags+=("--environment"); 
$flags+=("--service-role"); 
$flags+=("--timeout-in-minutes"); 
$flags+=("--queued-timeout-in-minutes"); 
$flags+=("--encryption-key"); 
$flags+=("--tags"); 
$flags+=("--vpc-config"); 
$flags+=("--badge-enabled"); 
$flags+=("--no-badge-enabled"); 
$flags+=("--logs-config"); 
$flags+=("--file-system-locations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-create-report-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--type"); 
$flags+=("--export-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-create-webhook {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-name"); 
$flags+=("--branch-filter"); 
$flags+=("--filter-groups"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-delete-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-delete-report {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-delete-report-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-delete-resource-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-delete-source-credentials {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-delete-webhook {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-describe-test-cases {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--report-arn"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-get-resource-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-import-source-credentials {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--username"); 
$flags+=("--token"); 
$flags+=("--server-type"); 
$flags+=("--auth-type"); 
$flags+=("--should-overwrite"); 
$flags+=("--no-should-overwrite"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-invalidate-project-cache {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-list-builds {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sort-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-list-builds-for-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-name"); 
$flags+=("--sort-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-list-curated-environment-images {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-list-projects {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-list-report-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sort-order"); 
$flags+=("--sort-by"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-list-reports {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sort-order"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-list-reports-for-report-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--report-group-arn"); 
$flags+=("--next-token"); 
$flags+=("--sort-order"); 
$flags+=("--max-results"); 
$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-list-shared-projects {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-list-shared-report-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sort-order"); 
$flags+=("--sort-by"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-list-source-credentials {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-put-resource-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy"); 
$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-start-build {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-name"); 
$flags+=("--secondary-sources-override"); 
$flags+=("--secondary-sources-version-override"); 
$flags+=("--source-version"); 
$flags+=("--artifacts-override"); 
$flags+=("--secondary-artifacts-override"); 
$flags+=("--environment-variables-override"); 
$flags+=("--source-type-override"); 
$flags+=("--source-location-override"); 
$flags+=("--source-auth-override"); 
$flags+=("--git-clone-depth-override"); 
$flags+=("--git-submodules-config-override"); 
$flags+=("--buildspec-override"); 
$flags+=("--insecure-ssl-override"); 
$flags+=("--no-insecure-ssl-override"); 
$flags+=("--report-build-status-override"); 
$flags+=("--no-report-build-status-override"); 
$flags+=("--environment-type-override"); 
$flags+=("--image-override"); 
$flags+=("--compute-type-override"); 
$flags+=("--certificate-override"); 
$flags+=("--cache-override"); 
$flags+=("--service-role-override"); 
$flags+=("--privileged-mode-override"); 
$flags+=("--no-privileged-mode-override"); 
$flags+=("--timeout-in-minutes-override"); 
$flags+=("--queued-timeout-in-minutes-override"); 
$flags+=("--encryption-key-override"); 
$flags+=("--idempotency-token"); 
$flags+=("--logs-config-override"); 
$flags+=("--registry-credential-override"); 
$flags+=("--image-pull-credentials-type-override"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-stop-build {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-update-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--source"); 
$flags+=("--secondary-sources"); 
$flags+=("--source-version"); 
$flags+=("--secondary-source-versions"); 
$flags+=("--artifacts"); 
$flags+=("--secondary-artifacts"); 
$flags+=("--cache"); 
$flags+=("--environment"); 
$flags+=("--service-role"); 
$flags+=("--timeout-in-minutes"); 
$flags+=("--queued-timeout-in-minutes"); 
$flags+=("--encryption-key"); 
$flags+=("--tags"); 
$flags+=("--vpc-config"); 
$flags+=("--badge-enabled"); 
$flags+=("--no-badge-enabled"); 
$flags+=("--logs-config"); 
$flags+=("--file-system-locations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-update-report-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--export-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codebuild-update-webhook {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-name"); 
$flags+=("--branch-filter"); 
$flags+=("--rotate-secret"); 
$flags+=("--no-rotate-secret"); 
$flags+=("--filter-groups"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-approval-rule-template-with-repository"); 
$commands+=("batch-associate-approval-rule-template-with-repositories"); 
$commands+=("batch-describe-merge-conflicts"); 
$commands+=("batch-disassociate-approval-rule-template-from-repositories"); 
$commands+=("batch-get-commits"); 
$commands+=("batch-get-repositories"); 
$commands+=("create-approval-rule-template"); 
$commands+=("create-branch"); 
$commands+=("create-commit"); 
$commands+=("create-pull-request"); 
$commands+=("create-pull-request-approval-rule"); 
$commands+=("create-repository"); 
$commands+=("create-unreferenced-merge-commit"); 
$commands+=("credential-helper/index"); 
$commands+=("delete-approval-rule-template"); 
$commands+=("delete-branch"); 
$commands+=("delete-comment-content"); 
$commands+=("delete-file"); 
$commands+=("delete-pull-request-approval-rule"); 
$commands+=("delete-repository"); 
$commands+=("describe-merge-conflicts"); 
$commands+=("describe-pull-request-events"); 
$commands+=("disassociate-approval-rule-template-from-repository"); 
$commands+=("evaluate-pull-request-approval-rules"); 
$commands+=("get-approval-rule-template"); 
$commands+=("get-blob"); 
$commands+=("get-branch"); 
$commands+=("get-comment"); 
$commands+=("get-comments-for-compared-commit"); 
$commands+=("get-comments-for-pull-request"); 
$commands+=("get-commit"); 
$commands+=("get-differences"); 
$commands+=("get-file"); 
$commands+=("get-folder"); 
$commands+=("get-merge-commit"); 
$commands+=("get-merge-conflicts"); 
$commands+=("get-merge-options"); 
$commands+=("get-pull-request"); 
$commands+=("get-pull-request-approval-states"); 
$commands+=("get-pull-request-override-state"); 
$commands+=("get-repository"); 
$commands+=("get-repository-triggers"); 
$commands+=("list-approval-rule-templates"); 
$commands+=("list-associated-approval-rule-templates-for-repository"); 
$commands+=("list-branches"); 
$commands+=("list-pull-requests"); 
$commands+=("list-repositories"); 
$commands+=("list-repositories-for-approval-rule-template"); 
$commands+=("list-tags-for-resource"); 
$commands+=("merge-branches-by-fast-forward"); 
$commands+=("merge-branches-by-squash"); 
$commands+=("merge-branches-by-three-way"); 
$commands+=("merge-pull-request-by-fast-forward"); 
$commands+=("merge-pull-request-by-squash"); 
$commands+=("merge-pull-request-by-three-way"); 
$commands+=("override-pull-request-approval-rules"); 
$commands+=("post-comment-for-compared-commit"); 
$commands+=("post-comment-for-pull-request"); 
$commands+=("post-comment-reply"); 
$commands+=("put-file"); 
$commands+=("put-repository-triggers"); 
$commands+=("tag-resource"); 
$commands+=("test-repository-triggers"); 
$commands+=("untag-resource"); 
$commands+=("update-approval-rule-template-content"); 
$commands+=("update-approval-rule-template-description"); 
$commands+=("update-approval-rule-template-name"); 
$commands+=("update-comment"); 
$commands+=("update-default-branch"); 
$commands+=("update-pull-request-approval-rule-content"); 
$commands+=("update-pull-request-approval-state"); 
$commands+=("update-pull-request-description"); 
$commands+=("update-pull-request-status"); 
$commands+=("update-pull-request-title"); 
$commands+=("update-repository-description"); 
$commands+=("update-repository-name");

return $commands;
}

 function Get-codecommit-associate-approval-rule-template-with-repository {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--approval-rule-template-name"); 
$flags+=("--repository-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-batch-associate-approval-rule-template-with-repositories {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--approval-rule-template-name"); 
$flags+=("--repository-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-batch-describe-merge-conflicts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--destination-commit-specifier"); 
$flags+=("--source-commit-specifier"); 
$flags+=("--merge-option"); 
$flags+=("--max-merge-hunks"); 
$flags+=("--max-conflict-files"); 
$flags+=("--file-paths"); 
$flags+=("--conflict-detail-level"); 
$flags+=("--conflict-resolution-strategy"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-batch-disassociate-approval-rule-template-from-repositories {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--approval-rule-template-name"); 
$flags+=("--repository-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-batch-get-commits {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--commit-ids"); 
$flags+=("--repository-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-batch-get-repositories {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-create-approval-rule-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--approval-rule-template-name"); 
$flags+=("--approval-rule-template-content"); 
$flags+=("--approval-rule-template-description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-create-branch {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--branch-name"); 
$flags+=("--commit-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-create-commit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--branch-name"); 
$flags+=("--parent-commit-id"); 
$flags+=("--author-name"); 
$flags+=("--email"); 
$flags+=("--commit-message"); 
$flags+=("--keep-empty-folders"); 
$flags+=("--no-keep-empty-folders"); 
$flags+=("--put-files"); 
$flags+=("--delete-files"); 
$flags+=("--set-file-modes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-create-pull-request {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--title"); 
$flags+=("--description"); 
$flags+=("--targets"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-create-pull-request-approval-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pull-request-id"); 
$flags+=("--approval-rule-name"); 
$flags+=("--approval-rule-content"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-create-repository {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--repository-description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-create-unreferenced-merge-commit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--source-commit-specifier"); 
$flags+=("--destination-commit-specifier"); 
$flags+=("--merge-option"); 
$flags+=("--conflict-detail-level"); 
$flags+=("--conflict-resolution-strategy"); 
$flags+=("--author-name"); 
$flags+=("--email"); 
$flags+=("--commit-message"); 
$flags+=("--keep-empty-folders"); 
$flags+=("--no-keep-empty-folders"); 
$flags+=("--conflict-resolution"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-credential-helper/index {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-codecommit-delete-approval-rule-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--approval-rule-template-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-delete-branch {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--branch-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-delete-comment-content {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--comment-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-delete-file {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--branch-name"); 
$flags+=("--file-path"); 
$flags+=("--parent-commit-id"); 
$flags+=("--keep-empty-folders"); 
$flags+=("--no-keep-empty-folders"); 
$flags+=("--commit-message"); 
$flags+=("--name"); 
$flags+=("--email"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-delete-pull-request-approval-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pull-request-id"); 
$flags+=("--approval-rule-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-delete-repository {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-describe-merge-conflicts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--destination-commit-specifier"); 
$flags+=("--source-commit-specifier"); 
$flags+=("--merge-option"); 
$flags+=("--max-merge-hunks"); 
$flags+=("--file-path"); 
$flags+=("--conflict-detail-level"); 
$flags+=("--conflict-resolution-strategy"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-describe-pull-request-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pull-request-id"); 
$flags+=("--pull-request-event-type"); 
$flags+=("--actor-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-disassociate-approval-rule-template-from-repository {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--approval-rule-template-name"); 
$flags+=("--repository-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-evaluate-pull-request-approval-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pull-request-id"); 
$flags+=("--revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-get-approval-rule-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--approval-rule-template-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-get-blob {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--blob-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-get-branch {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--branch-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-get-comment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--comment-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-get-comments-for-compared-commit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--before-commit-id"); 
$flags+=("--after-commit-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-get-comments-for-pull-request {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pull-request-id"); 
$flags+=("--repository-name"); 
$flags+=("--before-commit-id"); 
$flags+=("--after-commit-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-get-commit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--commit-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-get-differences {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--before-commit-specifier"); 
$flags+=("--after-commit-specifier"); 
$flags+=("--before-path"); 
$flags+=("--after-path"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-get-file {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--commit-specifier"); 
$flags+=("--file-path"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-get-folder {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--commit-specifier"); 
$flags+=("--folder-path"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-get-merge-commit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--source-commit-specifier"); 
$flags+=("--destination-commit-specifier"); 
$flags+=("--conflict-detail-level"); 
$flags+=("--conflict-resolution-strategy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-get-merge-conflicts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--destination-commit-specifier"); 
$flags+=("--source-commit-specifier"); 
$flags+=("--merge-option"); 
$flags+=("--conflict-detail-level"); 
$flags+=("--max-conflict-files"); 
$flags+=("--conflict-resolution-strategy"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-get-merge-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--source-commit-specifier"); 
$flags+=("--destination-commit-specifier"); 
$flags+=("--conflict-detail-level"); 
$flags+=("--conflict-resolution-strategy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-get-pull-request {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pull-request-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-get-pull-request-approval-states {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pull-request-id"); 
$flags+=("--revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-get-pull-request-override-state {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pull-request-id"); 
$flags+=("--revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-get-repository {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-get-repository-triggers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-list-approval-rule-templates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-list-associated-approval-rule-templates-for-repository {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-list-branches {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-list-pull-requests {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--author-arn"); 
$flags+=("--pull-request-status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-list-repositories {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sort-by"); 
$flags+=("--order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-list-repositories-for-approval-rule-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--approval-rule-template-name"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-merge-branches-by-fast-forward {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--source-commit-specifier"); 
$flags+=("--destination-commit-specifier"); 
$flags+=("--target-branch"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-merge-branches-by-squash {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--source-commit-specifier"); 
$flags+=("--destination-commit-specifier"); 
$flags+=("--target-branch"); 
$flags+=("--conflict-detail-level"); 
$flags+=("--conflict-resolution-strategy"); 
$flags+=("--author-name"); 
$flags+=("--email"); 
$flags+=("--commit-message"); 
$flags+=("--keep-empty-folders"); 
$flags+=("--no-keep-empty-folders"); 
$flags+=("--conflict-resolution"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-merge-branches-by-three-way {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--source-commit-specifier"); 
$flags+=("--destination-commit-specifier"); 
$flags+=("--target-branch"); 
$flags+=("--conflict-detail-level"); 
$flags+=("--conflict-resolution-strategy"); 
$flags+=("--author-name"); 
$flags+=("--email"); 
$flags+=("--commit-message"); 
$flags+=("--keep-empty-folders"); 
$flags+=("--no-keep-empty-folders"); 
$flags+=("--conflict-resolution"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-merge-pull-request-by-fast-forward {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pull-request-id"); 
$flags+=("--repository-name"); 
$flags+=("--source-commit-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-merge-pull-request-by-squash {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pull-request-id"); 
$flags+=("--repository-name"); 
$flags+=("--source-commit-id"); 
$flags+=("--conflict-detail-level"); 
$flags+=("--conflict-resolution-strategy"); 
$flags+=("--commit-message"); 
$flags+=("--author-name"); 
$flags+=("--email"); 
$flags+=("--keep-empty-folders"); 
$flags+=("--no-keep-empty-folders"); 
$flags+=("--conflict-resolution"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-merge-pull-request-by-three-way {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pull-request-id"); 
$flags+=("--repository-name"); 
$flags+=("--source-commit-id"); 
$flags+=("--conflict-detail-level"); 
$flags+=("--conflict-resolution-strategy"); 
$flags+=("--commit-message"); 
$flags+=("--author-name"); 
$flags+=("--email"); 
$flags+=("--keep-empty-folders"); 
$flags+=("--no-keep-empty-folders"); 
$flags+=("--conflict-resolution"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-override-pull-request-approval-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pull-request-id"); 
$flags+=("--revision-id"); 
$flags+=("--override-status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-post-comment-for-compared-commit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--before-commit-id"); 
$flags+=("--after-commit-id"); 
$flags+=("--location"); 
$flags+=("--content"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-post-comment-for-pull-request {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pull-request-id"); 
$flags+=("--repository-name"); 
$flags+=("--before-commit-id"); 
$flags+=("--after-commit-id"); 
$flags+=("--location"); 
$flags+=("--content"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-post-comment-reply {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--in-reply-to"); 
$flags+=("--client-request-token"); 
$flags+=("--content"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-put-file {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--branch-name"); 
$flags+=("--file-content"); 
$flags+=("--file-path"); 
$flags+=("--file-mode"); 
$flags+=("--parent-commit-id"); 
$flags+=("--commit-message"); 
$flags+=("--name"); 
$flags+=("--email"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-put-repository-triggers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--triggers"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-test-repository-triggers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--triggers"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-update-approval-rule-template-content {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--approval-rule-template-name"); 
$flags+=("--new-rule-content"); 
$flags+=("--existing-rule-content-sha"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-update-approval-rule-template-description {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--approval-rule-template-name"); 
$flags+=("--approval-rule-template-description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-update-approval-rule-template-name {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--old-approval-rule-template-name"); 
$flags+=("--new-approval-rule-template-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-update-comment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--comment-id"); 
$flags+=("--content"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-update-default-branch {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--default-branch-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-update-pull-request-approval-rule-content {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pull-request-id"); 
$flags+=("--approval-rule-name"); 
$flags+=("--existing-rule-content-sha"); 
$flags+=("--new-rule-content"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-update-pull-request-approval-state {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pull-request-id"); 
$flags+=("--revision-id"); 
$flags+=("--approval-state"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-update-pull-request-description {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pull-request-id"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-update-pull-request-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pull-request-id"); 
$flags+=("--pull-request-status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-update-pull-request-title {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pull-request-id"); 
$flags+=("--title"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-update-repository-description {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--repository-description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codecommit-update-repository-name {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--old-name"); 
$flags+=("--new-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codeguru-reviewer {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-repository"); 
$commands+=("describe-code-review"); 
$commands+=("describe-recommendation-feedback"); 
$commands+=("describe-repository-association"); 
$commands+=("disassociate-repository"); 
$commands+=("list-code-reviews"); 
$commands+=("list-recommendation-feedback"); 
$commands+=("list-recommendations"); 
$commands+=("list-repository-associations"); 
$commands+=("put-recommendation-feedback");

return $commands;
}

 function Get-codeguru-reviewer-associate-repository {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codeguru-reviewer-describe-code-review {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--code-review-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codeguru-reviewer-describe-recommendation-feedback {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--code-review-arn"); 
$flags+=("--recommendation-id"); 
$flags+=("--user-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codeguru-reviewer-describe-repository-association {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--association-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codeguru-reviewer-disassociate-repository {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--association-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codeguru-reviewer-list-code-reviews {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--provider-types"); 
$flags+=("--states"); 
$flags+=("--repository-names"); 
$flags+=("--type"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codeguru-reviewer-list-recommendation-feedback {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--code-review-arn"); 
$flags+=("--user-ids"); 
$flags+=("--recommendation-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codeguru-reviewer-list-recommendations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--code-review-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codeguru-reviewer-list-repository-associations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--provider-types"); 
$flags+=("--states"); 
$flags+=("--names"); 
$flags+=("--owners"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codeguru-reviewer-put-recommendation-feedback {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--code-review-arn"); 
$flags+=("--recommendation-id"); 
$flags+=("--reactions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codeguruprofiler {
    $commands = [System.Collections.ArrayList]@();

$commands+=("configure-agent"); 
$commands+=("create-profiling-group"); 
$commands+=("delete-profiling-group"); 
$commands+=("describe-profiling-group"); 
$commands+=("get-policy"); 
$commands+=("get-profile"); 
$commands+=("list-profile-times"); 
$commands+=("list-profiling-groups"); 
$commands+=("post-agent-profile"); 
$commands+=("put-permission"); 
$commands+=("remove-permission"); 
$commands+=("update-profiling-group");

return $commands;
}

 function Get-codeguruprofiler-configure-agent {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-instance-id"); 
$flags+=("--profiling-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codeguruprofiler-create-profiling-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--agent-orchestration-config"); 
$flags+=("--client-token"); 
$flags+=("--profiling-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codeguruprofiler-delete-profiling-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--profiling-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codeguruprofiler-describe-profiling-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--profiling-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codeguruprofiler-get-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--profiling-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codeguruprofiler-get-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept"); 
$flags+=("--end-time"); 
$flags+=("--max-depth"); 
$flags+=("--period"); 
$flags+=("--profiling-group-name"); 
$flags+=("--start-time");

return $flags;
}

 function Get-codeguruprofiler-list-profile-times {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--end-time"); 
$flags+=("--order-by"); 
$flags+=("--period"); 
$flags+=("--profiling-group-name"); 
$flags+=("--start-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codeguruprofiler-list-profiling-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--include-description"); 
$flags+=("--no-include-description"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codeguruprofiler-post-agent-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--agent-profile"); 
$flags+=("--content-type"); 
$flags+=("--profile-token"); 
$flags+=("--profiling-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codeguruprofiler-put-permission {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--action-group"); 
$flags+=("--principals"); 
$flags+=("--profiling-group-name"); 
$flags+=("--revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codeguruprofiler-remove-permission {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--action-group"); 
$flags+=("--profiling-group-name"); 
$flags+=("--revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codeguruprofiler-update-profiling-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--agent-orchestration-config"); 
$flags+=("--profiling-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline {
    $commands = [System.Collections.ArrayList]@();

$commands+=("acknowledge-job"); 
$commands+=("acknowledge-third-party-job"); 
$commands+=("create-custom-action-type"); 
$commands+=("create-pipeline"); 
$commands+=("delete-custom-action-type"); 
$commands+=("delete-pipeline"); 
$commands+=("delete-webhook"); 
$commands+=("deregister-webhook-with-third-party"); 
$commands+=("disable-stage-transition"); 
$commands+=("enable-stage-transition"); 
$commands+=("get-job-details"); 
$commands+=("get-pipeline"); 
$commands+=("get-pipeline-execution"); 
$commands+=("get-pipeline-state"); 
$commands+=("get-third-party-job-details"); 
$commands+=("list-action-executions"); 
$commands+=("list-action-types"); 
$commands+=("list-pipeline-executions"); 
$commands+=("list-pipelines"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-webhooks"); 
$commands+=("poll-for-jobs"); 
$commands+=("poll-for-third-party-jobs"); 
$commands+=("put-action-revision"); 
$commands+=("put-approval-result"); 
$commands+=("put-job-failure-result"); 
$commands+=("put-job-success-result"); 
$commands+=("put-third-party-job-failure-result"); 
$commands+=("put-third-party-job-success-result"); 
$commands+=("put-webhook"); 
$commands+=("register-webhook-with-third-party"); 
$commands+=("retry-stage-execution"); 
$commands+=("start-pipeline-execution"); 
$commands+=("stop-pipeline-execution"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-pipeline");

return $commands;
}

 function Get-codepipeline-acknowledge-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--nonce"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-acknowledge-third-party-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--nonce"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-create-custom-action-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--category"); 
$flags+=("--provider"); 
$flags+=("--settings"); 
$flags+=("--configuration-properties"); 
$flags+=("--input-artifact-details"); 
$flags+=("--output-artifact-details"); 
$flags+=("--tags"); 
$flags+=("--action-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-create-pipeline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-delete-custom-action-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--category"); 
$flags+=("--provider"); 
$flags+=("--action-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-delete-pipeline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-delete-webhook {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-deregister-webhook-with-third-party {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--webhook-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-disable-stage-transition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-name"); 
$flags+=("--stage-name"); 
$flags+=("--transition-type"); 
$flags+=("--reason"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-enable-stage-transition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-name"); 
$flags+=("--stage-name"); 
$flags+=("--transition-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-get-job-details {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-get-pipeline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--pipeline-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-get-pipeline-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-name"); 
$flags+=("--pipeline-execution-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-get-pipeline-state {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-get-third-party-job-details {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-list-action-executions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-name"); 
$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-list-action-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--action-owner-filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-list-pipeline-executions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-list-pipelines {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-list-webhooks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-poll-for-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--action-type-id"); 
$flags+=("--max-batch-size"); 
$flags+=("--query-param"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-poll-for-third-party-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--action-type-id"); 
$flags+=("--max-batch-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-put-action-revision {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-name"); 
$flags+=("--stage-name"); 
$flags+=("--action-name"); 
$flags+=("--action-revision"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-put-approval-result {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-name"); 
$flags+=("--stage-name"); 
$flags+=("--action-name"); 
$flags+=("--result"); 
$flags+=("--token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-put-job-failure-result {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--failure-details"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-put-job-success-result {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--current-revision"); 
$flags+=("--continuation-token"); 
$flags+=("--execution-details"); 
$flags+=("--output-variables"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-put-third-party-job-failure-result {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--client-token"); 
$flags+=("--failure-details"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-put-third-party-job-success-result {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--client-token"); 
$flags+=("--current-revision"); 
$flags+=("--continuation-token"); 
$flags+=("--execution-details"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-put-webhook {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--webhook"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-register-webhook-with-third-party {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--webhook-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-retry-stage-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-name"); 
$flags+=("--stage-name"); 
$flags+=("--pipeline-execution-id"); 
$flags+=("--retry-mode"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-start-pipeline-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-stop-pipeline-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-name"); 
$flags+=("--pipeline-execution-id"); 
$flags+=("--abandon"); 
$flags+=("--no-abandon"); 
$flags+=("--reason"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codepipeline-update-pipeline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-team-member"); 
$commands+=("create-project"); 
$commands+=("create-user-profile"); 
$commands+=("delete-project"); 
$commands+=("delete-user-profile"); 
$commands+=("describe-project"); 
$commands+=("describe-user-profile"); 
$commands+=("disassociate-team-member"); 
$commands+=("list-projects"); 
$commands+=("list-resources"); 
$commands+=("list-tags-for-project"); 
$commands+=("list-team-members"); 
$commands+=("list-user-profiles"); 
$commands+=("tag-project"); 
$commands+=("untag-project"); 
$commands+=("update-project"); 
$commands+=("update-team-member"); 
$commands+=("update-user-profile");

return $commands;
}

 function Get-codestar-associate-team-member {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-id"); 
$flags+=("--client-request-token"); 
$flags+=("--user-arn"); 
$flags+=("--project-role"); 
$flags+=("--remote-access-allowed"); 
$flags+=("--no-remote-access-allowed"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-create-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--id"); 
$flags+=("--description"); 
$flags+=("--client-request-token"); 
$flags+=("--source-code"); 
$flags+=("--toolchain"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-create-user-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-arn"); 
$flags+=("--display-name"); 
$flags+=("--email-address"); 
$flags+=("--ssh-public-key"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-delete-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--client-request-token"); 
$flags+=("--delete-stack"); 
$flags+=("--no-delete-stack"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-delete-user-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-describe-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-describe-user-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-disassociate-team-member {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-id"); 
$flags+=("--user-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-list-projects {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-list-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-list-tags-for-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-list-team-members {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-list-user-profiles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-tag-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-untag-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-update-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-update-team-member {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-id"); 
$flags+=("--user-arn"); 
$flags+=("--project-role"); 
$flags+=("--remote-access-allowed"); 
$flags+=("--no-remote-access-allowed"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-update-user-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-arn"); 
$flags+=("--display-name"); 
$flags+=("--email-address"); 
$flags+=("--ssh-public-key"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-connections {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-connection"); 
$commands+=("delete-connection"); 
$commands+=("get-connection"); 
$commands+=("list-connections");

return $commands;
}

 function Get-codestar-connections-create-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--provider-type"); 
$flags+=("--connection-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-connections-delete-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connection-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-connections-get-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connection-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-connections-list-connections {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--provider-type-filter"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-notifications {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-notification-rule"); 
$commands+=("delete-notification-rule"); 
$commands+=("delete-target"); 
$commands+=("describe-notification-rule"); 
$commands+=("list-event-types"); 
$commands+=("list-notification-rules"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-targets"); 
$commands+=("subscribe"); 
$commands+=("tag-resource"); 
$commands+=("unsubscribe"); 
$commands+=("untag-resource"); 
$commands+=("update-notification-rule");

return $commands;
}

 function Get-codestar-notifications-create-notification-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--event-type-ids"); 
$flags+=("--resource"); 
$flags+=("--targets"); 
$flags+=("--detail-type"); 
$flags+=("--client-request-token"); 
$flags+=("--tags"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-notifications-delete-notification-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-notifications-delete-target {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--target-address"); 
$flags+=("--force-unsubscribe-all"); 
$flags+=("--no-force-unsubscribe-all"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-notifications-describe-notification-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-notifications-list-event-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-notifications-list-notification-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-notifications-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-notifications-list-targets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-notifications-subscribe {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--target"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-notifications-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-notifications-unsubscribe {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--target-address"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-notifications-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-codestar-notifications-update-notification-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--name"); 
$flags+=("--status"); 
$flags+=("--event-type-ids"); 
$flags+=("--targets"); 
$flags+=("--detail-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-identity {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-identity-pool"); 
$commands+=("delete-identities"); 
$commands+=("delete-identity-pool"); 
$commands+=("describe-identity"); 
$commands+=("describe-identity-pool"); 
$commands+=("get-credentials-for-identity"); 
$commands+=("get-id"); 
$commands+=("get-identity-pool-roles"); 
$commands+=("get-open-id-token"); 
$commands+=("get-open-id-token-for-developer-identity"); 
$commands+=("list-identities"); 
$commands+=("list-identity-pools"); 
$commands+=("list-tags-for-resource"); 
$commands+=("lookup-developer-identity"); 
$commands+=("merge-developer-identities"); 
$commands+=("set-identity-pool-roles"); 
$commands+=("tag-resource"); 
$commands+=("unlink-developer-identity"); 
$commands+=("unlink-identity"); 
$commands+=("untag-resource"); 
$commands+=("update-identity-pool");

return $commands;
}

 function Get-cognito-identity-create-identity-pool {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-name"); 
$flags+=("--allow-unauthenticated-identities"); 
$flags+=("--no-allow-unauthenticated-identities"); 
$flags+=("--allow-classic-flow"); 
$flags+=("--no-allow-classic-flow"); 
$flags+=("--supported-login-providers"); 
$flags+=("--developer-provider-name"); 
$flags+=("--open-id-connect-provider-arns"); 
$flags+=("--cognito-identity-providers"); 
$flags+=("--saml-provider-arns"); 
$flags+=("--identity-pool-tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-identity-delete-identities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-ids-to-delete"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-identity-delete-identity-pool {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-identity-describe-identity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-identity-describe-identity-pool {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-identity-get-credentials-for-identity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-id"); 
$flags+=("--logins"); 
$flags+=("--custom-role-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-identity-get-id {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--identity-pool-id"); 
$flags+=("--logins"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-identity-get-identity-pool-roles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-identity-get-open-id-token {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-id"); 
$flags+=("--logins"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-identity-get-open-id-token-for-developer-identity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-id"); 
$flags+=("--identity-id"); 
$flags+=("--logins"); 
$flags+=("--token-duration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-identity-list-identities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--hide-disabled"); 
$flags+=("--no-hide-disabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-identity-list-identity-pools {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-identity-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-identity-lookup-developer-identity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-id"); 
$flags+=("--identity-id"); 
$flags+=("--developer-user-identifier"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-identity-merge-developer-identities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-user-identifier"); 
$flags+=("--destination-user-identifier"); 
$flags+=("--developer-provider-name"); 
$flags+=("--identity-pool-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-identity-set-identity-pool-roles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-id"); 
$flags+=("--roles"); 
$flags+=("--role-mappings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-identity-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-identity-unlink-developer-identity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-id"); 
$flags+=("--identity-pool-id"); 
$flags+=("--developer-provider-name"); 
$flags+=("--developer-user-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-identity-unlink-identity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-id"); 
$flags+=("--logins"); 
$flags+=("--logins-to-remove"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-identity-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-identity-update-identity-pool {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-id"); 
$flags+=("--identity-pool-name"); 
$flags+=("--allow-unauthenticated-identities"); 
$flags+=("--no-allow-unauthenticated-identities"); 
$flags+=("--allow-classic-flow"); 
$flags+=("--no-allow-classic-flow"); 
$flags+=("--supported-login-providers"); 
$flags+=("--developer-provider-name"); 
$flags+=("--open-id-connect-provider-arns"); 
$flags+=("--cognito-identity-providers"); 
$flags+=("--saml-provider-arns"); 
$flags+=("--identity-pool-tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-custom-attributes"); 
$commands+=("admin-add-user-to-group"); 
$commands+=("admin-confirm-sign-up"); 
$commands+=("admin-create-user"); 
$commands+=("admin-delete-user"); 
$commands+=("admin-delete-user-attributes"); 
$commands+=("admin-disable-provider-for-user"); 
$commands+=("admin-disable-user"); 
$commands+=("admin-enable-user"); 
$commands+=("admin-forget-device"); 
$commands+=("admin-get-device"); 
$commands+=("admin-get-user"); 
$commands+=("admin-initiate-auth"); 
$commands+=("admin-link-provider-for-user"); 
$commands+=("admin-list-devices"); 
$commands+=("admin-list-groups-for-user"); 
$commands+=("admin-list-user-auth-events"); 
$commands+=("admin-remove-user-from-group"); 
$commands+=("admin-reset-user-password"); 
$commands+=("admin-respond-to-auth-challenge"); 
$commands+=("admin-set-user-mfa-preference"); 
$commands+=("admin-set-user-password"); 
$commands+=("admin-set-user-settings"); 
$commands+=("admin-update-auth-event-feedback"); 
$commands+=("admin-update-device-status"); 
$commands+=("admin-update-user-attributes"); 
$commands+=("admin-user-global-sign-out"); 
$commands+=("associate-software-token"); 
$commands+=("change-password"); 
$commands+=("confirm-device"); 
$commands+=("confirm-forgot-password"); 
$commands+=("confirm-sign-up"); 
$commands+=("create-group"); 
$commands+=("create-identity-provider"); 
$commands+=("create-resource-server"); 
$commands+=("create-user-import-job"); 
$commands+=("create-user-pool"); 
$commands+=("create-user-pool-client"); 
$commands+=("create-user-pool-domain"); 
$commands+=("delete-group"); 
$commands+=("delete-identity-provider"); 
$commands+=("delete-resource-server"); 
$commands+=("delete-user"); 
$commands+=("delete-user-attributes"); 
$commands+=("delete-user-pool"); 
$commands+=("delete-user-pool-client"); 
$commands+=("delete-user-pool-domain"); 
$commands+=("describe-identity-provider"); 
$commands+=("describe-resource-server"); 
$commands+=("describe-risk-configuration"); 
$commands+=("describe-user-import-job"); 
$commands+=("describe-user-pool"); 
$commands+=("describe-user-pool-client"); 
$commands+=("describe-user-pool-domain"); 
$commands+=("forget-device"); 
$commands+=("forgot-password"); 
$commands+=("get-csv-header"); 
$commands+=("get-device"); 
$commands+=("get-group"); 
$commands+=("get-identity-provider-by-identifier"); 
$commands+=("get-signing-certificate"); 
$commands+=("get-ui-customization"); 
$commands+=("get-user"); 
$commands+=("get-user-attribute-verification-code"); 
$commands+=("get-user-pool-mfa-config"); 
$commands+=("global-sign-out"); 
$commands+=("initiate-auth"); 
$commands+=("list-devices"); 
$commands+=("list-groups"); 
$commands+=("list-identity-providers"); 
$commands+=("list-resource-servers"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-user-import-jobs"); 
$commands+=("list-user-pool-clients"); 
$commands+=("list-user-pools"); 
$commands+=("list-users"); 
$commands+=("list-users-in-group"); 
$commands+=("resend-confirmation-code"); 
$commands+=("respond-to-auth-challenge"); 
$commands+=("set-risk-configuration"); 
$commands+=("set-ui-customization"); 
$commands+=("set-user-mfa-preference"); 
$commands+=("set-user-pool-mfa-config"); 
$commands+=("set-user-settings"); 
$commands+=("sign-up"); 
$commands+=("start-user-import-job"); 
$commands+=("stop-user-import-job"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-auth-event-feedback"); 
$commands+=("update-device-status"); 
$commands+=("update-group"); 
$commands+=("update-identity-provider"); 
$commands+=("update-resource-server"); 
$commands+=("update-user-attributes"); 
$commands+=("update-user-pool"); 
$commands+=("update-user-pool-client"); 
$commands+=("update-user-pool-domain"); 
$commands+=("verify-software-token"); 
$commands+=("verify-user-attribute");

return $commands;
}

 function Get-cognito-idp-add-custom-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--custom-attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-add-user-to-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--username"); 
$flags+=("--group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-confirm-sign-up {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--username"); 
$flags+=("--client-metadata"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-create-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--username"); 
$flags+=("--user-attributes"); 
$flags+=("--validation-data"); 
$flags+=("--temporary-password"); 
$flags+=("--force-alias-creation"); 
$flags+=("--no-force-alias-creation"); 
$flags+=("--message-action"); 
$flags+=("--desired-delivery-mediums"); 
$flags+=("--client-metadata"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-delete-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--username"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-delete-user-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--username"); 
$flags+=("--user-attribute-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-disable-provider-for-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--user"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-disable-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--username"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-enable-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--username"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-forget-device {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--username"); 
$flags+=("--device-key"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-get-device {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-key"); 
$flags+=("--user-pool-id"); 
$flags+=("--username"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-get-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--username"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-initiate-auth {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--client-id"); 
$flags+=("--auth-flow"); 
$flags+=("--auth-parameters"); 
$flags+=("--client-metadata"); 
$flags+=("--analytics-metadata"); 
$flags+=("--context-data"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-link-provider-for-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--destination-user"); 
$flags+=("--source-user"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-list-devices {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--username"); 
$flags+=("--limit"); 
$flags+=("--pagination-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-list-groups-for-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--username"); 
$flags+=("--user-pool-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-list-user-auth-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--username"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-remove-user-from-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--username"); 
$flags+=("--group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-reset-user-password {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--username"); 
$flags+=("--client-metadata"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-respond-to-auth-challenge {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--client-id"); 
$flags+=("--challenge-name"); 
$flags+=("--challenge-responses"); 
$flags+=("--session"); 
$flags+=("--analytics-metadata"); 
$flags+=("--context-data"); 
$flags+=("--client-metadata"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-set-user-mfa-preference {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sms-mfa-settings"); 
$flags+=("--software-token-mfa-settings"); 
$flags+=("--username"); 
$flags+=("--user-pool-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-set-user-password {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--username"); 
$flags+=("--password"); 
$flags+=("--permanent"); 
$flags+=("--no-permanent"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-set-user-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--username"); 
$flags+=("--mfa-options"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-update-auth-event-feedback {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--username"); 
$flags+=("--event-id"); 
$flags+=("--feedback-value"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-update-device-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--username"); 
$flags+=("--device-key"); 
$flags+=("--device-remembered-status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-update-user-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--username"); 
$flags+=("--user-attributes"); 
$flags+=("--client-metadata"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-admin-user-global-sign-out {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--username"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-associate-software-token {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--access-token"); 
$flags+=("--session"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-change-password {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--previous-password"); 
$flags+=("--proposed-password"); 
$flags+=("--access-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-confirm-device {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--access-token"); 
$flags+=("--device-key"); 
$flags+=("--device-secret-verifier-config"); 
$flags+=("--device-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-confirm-forgot-password {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-id"); 
$flags+=("--secret-hash"); 
$flags+=("--username"); 
$flags+=("--confirmation-code"); 
$flags+=("--password"); 
$flags+=("--analytics-metadata"); 
$flags+=("--user-context-data"); 
$flags+=("--client-metadata"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-confirm-sign-up {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-id"); 
$flags+=("--secret-hash"); 
$flags+=("--username"); 
$flags+=("--confirmation-code"); 
$flags+=("--force-alias-creation"); 
$flags+=("--no-force-alias-creation"); 
$flags+=("--analytics-metadata"); 
$flags+=("--user-context-data"); 
$flags+=("--client-metadata"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-create-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--user-pool-id"); 
$flags+=("--description"); 
$flags+=("--role-arn"); 
$flags+=("--precedence"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-create-identity-provider {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--provider-name"); 
$flags+=("--provider-type"); 
$flags+=("--provider-details"); 
$flags+=("--attribute-mapping"); 
$flags+=("--idp-identifiers"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-create-resource-server {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--identifier"); 
$flags+=("--name"); 
$flags+=("--scopes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-create-user-import-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-name"); 
$flags+=("--user-pool-id"); 
$flags+=("--cloud-watch-logs-role-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-create-user-pool {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pool-name"); 
$flags+=("--policies"); 
$flags+=("--lambda-config"); 
$flags+=("--auto-verified-attributes"); 
$flags+=("--alias-attributes"); 
$flags+=("--username-attributes"); 
$flags+=("--sms-verification-message"); 
$flags+=("--email-verification-message"); 
$flags+=("--email-verification-subject"); 
$flags+=("--verification-message-template"); 
$flags+=("--sms-authentication-message"); 
$flags+=("--mfa-configuration"); 
$flags+=("--device-configuration"); 
$flags+=("--email-configuration"); 
$flags+=("--sms-configuration"); 
$flags+=("--user-pool-tags"); 
$flags+=("--admin-create-user-config"); 
$flags+=("--schema"); 
$flags+=("--user-pool-add-ons"); 
$flags+=("--username-configuration"); 
$flags+=("--account-recovery-setting"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-create-user-pool-client {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--client-name"); 
$flags+=("--generate-secret"); 
$flags+=("--no-generate-secret"); 
$flags+=("--refresh-token-validity"); 
$flags+=("--read-attributes"); 
$flags+=("--write-attributes"); 
$flags+=("--explicit-auth-flows"); 
$flags+=("--supported-identity-providers"); 
$flags+=("--callback-urls"); 
$flags+=("--logout-urls"); 
$flags+=("--default-redirect-uri"); 
$flags+=("--allowed-o-auth-flows"); 
$flags+=("--allowed-o-auth-scopes"); 
$flags+=("--allowed-o-auth-flows-user-pool-client"); 
$flags+=("--no-allowed-o-auth-flows-user-pool-client"); 
$flags+=("--analytics-configuration"); 
$flags+=("--prevent-user-existence-errors"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-create-user-pool-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--user-pool-id"); 
$flags+=("--custom-domain-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-delete-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--user-pool-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-delete-identity-provider {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--provider-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-delete-resource-server {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-delete-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--access-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-delete-user-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-attribute-names"); 
$flags+=("--access-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-delete-user-pool {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-delete-user-pool-client {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--client-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-delete-user-pool-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--user-pool-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-describe-identity-provider {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--provider-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-describe-resource-server {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-describe-risk-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--client-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-describe-user-import-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-describe-user-pool {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-describe-user-pool-client {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--client-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-describe-user-pool-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-forget-device {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--access-token"); 
$flags+=("--device-key"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-forgot-password {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-id"); 
$flags+=("--secret-hash"); 
$flags+=("--user-context-data"); 
$flags+=("--username"); 
$flags+=("--analytics-metadata"); 
$flags+=("--client-metadata"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-get-csv-header {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-get-device {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-key"); 
$flags+=("--access-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-get-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--user-pool-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-get-identity-provider-by-identifier {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--idp-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-get-signing-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-get-ui-customization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--client-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-get-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--access-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-get-user-attribute-verification-code {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--access-token"); 
$flags+=("--attribute-name"); 
$flags+=("--client-metadata"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-get-user-pool-mfa-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-global-sign-out {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--access-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-initiate-auth {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auth-flow"); 
$flags+=("--auth-parameters"); 
$flags+=("--client-metadata"); 
$flags+=("--client-id"); 
$flags+=("--analytics-metadata"); 
$flags+=("--user-context-data"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-list-devices {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--access-token"); 
$flags+=("--limit"); 
$flags+=("--pagination-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-list-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-list-identity-providers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-list-resource-servers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-list-user-import-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--max-results"); 
$flags+=("--pagination-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-list-user-pool-clients {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-list-user-pools {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-list-users {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--attributes-to-get"); 
$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-list-users-in-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-resend-confirmation-code {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-id"); 
$flags+=("--secret-hash"); 
$flags+=("--user-context-data"); 
$flags+=("--username"); 
$flags+=("--analytics-metadata"); 
$flags+=("--client-metadata"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-respond-to-auth-challenge {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-id"); 
$flags+=("--challenge-name"); 
$flags+=("--session"); 
$flags+=("--challenge-responses"); 
$flags+=("--analytics-metadata"); 
$flags+=("--user-context-data"); 
$flags+=("--client-metadata"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-set-risk-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--client-id"); 
$flags+=("--compromised-credentials-risk-configuration"); 
$flags+=("--account-takeover-risk-configuration"); 
$flags+=("--risk-exception-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-set-ui-customization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--client-id"); 
$flags+=("--css"); 
$flags+=("--image-file"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-set-user-mfa-preference {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sms-mfa-settings"); 
$flags+=("--software-token-mfa-settings"); 
$flags+=("--access-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-set-user-pool-mfa-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--sms-mfa-configuration"); 
$flags+=("--software-token-mfa-configuration"); 
$flags+=("--mfa-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-set-user-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--access-token"); 
$flags+=("--mfa-options"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-sign-up {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-id"); 
$flags+=("--secret-hash"); 
$flags+=("--username"); 
$flags+=("--password"); 
$flags+=("--user-attributes"); 
$flags+=("--validation-data"); 
$flags+=("--analytics-metadata"); 
$flags+=("--user-context-data"); 
$flags+=("--client-metadata"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-start-user-import-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-stop-user-import-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-update-auth-event-feedback {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--username"); 
$flags+=("--event-id"); 
$flags+=("--feedback-token"); 
$flags+=("--feedback-value"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-update-device-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--access-token"); 
$flags+=("--device-key"); 
$flags+=("--device-remembered-status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-update-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--user-pool-id"); 
$flags+=("--description"); 
$flags+=("--role-arn"); 
$flags+=("--precedence"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-update-identity-provider {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--provider-name"); 
$flags+=("--provider-details"); 
$flags+=("--attribute-mapping"); 
$flags+=("--idp-identifiers"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-update-resource-server {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--identifier"); 
$flags+=("--name"); 
$flags+=("--scopes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-update-user-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-attributes"); 
$flags+=("--access-token"); 
$flags+=("--client-metadata"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-update-user-pool {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--policies"); 
$flags+=("--lambda-config"); 
$flags+=("--auto-verified-attributes"); 
$flags+=("--sms-verification-message"); 
$flags+=("--email-verification-message"); 
$flags+=("--email-verification-subject"); 
$flags+=("--verification-message-template"); 
$flags+=("--sms-authentication-message"); 
$flags+=("--mfa-configuration"); 
$flags+=("--device-configuration"); 
$flags+=("--email-configuration"); 
$flags+=("--sms-configuration"); 
$flags+=("--user-pool-tags"); 
$flags+=("--admin-create-user-config"); 
$flags+=("--user-pool-add-ons"); 
$flags+=("--account-recovery-setting"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-update-user-pool-client {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-pool-id"); 
$flags+=("--client-id"); 
$flags+=("--client-name"); 
$flags+=("--refresh-token-validity"); 
$flags+=("--read-attributes"); 
$flags+=("--write-attributes"); 
$flags+=("--explicit-auth-flows"); 
$flags+=("--supported-identity-providers"); 
$flags+=("--callback-urls"); 
$flags+=("--logout-urls"); 
$flags+=("--default-redirect-uri"); 
$flags+=("--allowed-o-auth-flows"); 
$flags+=("--allowed-o-auth-scopes"); 
$flags+=("--allowed-o-auth-flows-user-pool-client"); 
$flags+=("--no-allowed-o-auth-flows-user-pool-client"); 
$flags+=("--analytics-configuration"); 
$flags+=("--prevent-user-existence-errors"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-update-user-pool-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--user-pool-id"); 
$flags+=("--custom-domain-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-verify-software-token {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--access-token"); 
$flags+=("--session"); 
$flags+=("--user-code"); 
$flags+=("--friendly-device-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-idp-verify-user-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--access-token"); 
$flags+=("--attribute-name"); 
$flags+=("--code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-sync {
    $commands = [System.Collections.ArrayList]@();

$commands+=("bulk-publish"); 
$commands+=("delete-dataset"); 
$commands+=("describe-dataset"); 
$commands+=("describe-identity-pool-usage"); 
$commands+=("describe-identity-usage"); 
$commands+=("get-bulk-publish-details"); 
$commands+=("get-cognito-events"); 
$commands+=("get-identity-pool-configuration"); 
$commands+=("list-datasets"); 
$commands+=("list-identity-pool-usage"); 
$commands+=("list-records"); 
$commands+=("register-device"); 
$commands+=("set-cognito-events"); 
$commands+=("set-identity-pool-configuration"); 
$commands+=("subscribe-to-dataset"); 
$commands+=("unsubscribe-from-dataset"); 
$commands+=("update-records");

return $commands;
}

 function Get-cognito-sync-bulk-publish {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-sync-delete-dataset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-id"); 
$flags+=("--identity-id"); 
$flags+=("--dataset-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-sync-describe-dataset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-id"); 
$flags+=("--identity-id"); 
$flags+=("--dataset-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-sync-describe-identity-pool-usage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-sync-describe-identity-usage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-id"); 
$flags+=("--identity-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-sync-get-bulk-publish-details {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-sync-get-cognito-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-sync-get-identity-pool-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-sync-list-datasets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-id"); 
$flags+=("--identity-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-sync-list-identity-pool-usage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-sync-list-records {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-id"); 
$flags+=("--identity-id"); 
$flags+=("--dataset-name"); 
$flags+=("--last-sync-count"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--sync-session-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-sync-register-device {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-id"); 
$flags+=("--identity-id"); 
$flags+=("--platform"); 
$flags+=("--token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-sync-set-cognito-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-id"); 
$flags+=("--events"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-sync-set-identity-pool-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-id"); 
$flags+=("--push-sync"); 
$flags+=("--cognito-streams"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-sync-subscribe-to-dataset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-id"); 
$flags+=("--identity-id"); 
$flags+=("--dataset-name"); 
$flags+=("--device-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-sync-unsubscribe-from-dataset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-id"); 
$flags+=("--identity-id"); 
$flags+=("--dataset-name"); 
$flags+=("--device-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cognito-sync-update-records {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-pool-id"); 
$flags+=("--identity-id"); 
$flags+=("--dataset-name"); 
$flags+=("--device-id"); 
$flags+=("--record-patches"); 
$flags+=("--sync-session-token"); 
$flags+=("--client-context"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend {
    $commands = [System.Collections.ArrayList]@();

$commands+=("batch-detect-dominant-language"); 
$commands+=("batch-detect-entities"); 
$commands+=("batch-detect-key-phrases"); 
$commands+=("batch-detect-sentiment"); 
$commands+=("batch-detect-syntax"); 
$commands+=("classify-document"); 
$commands+=("create-document-classifier"); 
$commands+=("create-endpoint"); 
$commands+=("create-entity-recognizer"); 
$commands+=("delete-document-classifier"); 
$commands+=("delete-endpoint"); 
$commands+=("delete-entity-recognizer"); 
$commands+=("describe-document-classification-job"); 
$commands+=("describe-document-classifier"); 
$commands+=("describe-dominant-language-detection-job"); 
$commands+=("describe-endpoint"); 
$commands+=("describe-entities-detection-job"); 
$commands+=("describe-entity-recognizer"); 
$commands+=("describe-key-phrases-detection-job"); 
$commands+=("describe-sentiment-detection-job"); 
$commands+=("describe-topics-detection-job"); 
$commands+=("detect-dominant-language"); 
$commands+=("detect-entities"); 
$commands+=("detect-key-phrases"); 
$commands+=("detect-sentiment"); 
$commands+=("detect-syntax"); 
$commands+=("list-document-classification-jobs"); 
$commands+=("list-document-classifiers"); 
$commands+=("list-dominant-language-detection-jobs"); 
$commands+=("list-endpoints"); 
$commands+=("list-entities-detection-jobs"); 
$commands+=("list-entity-recognizers"); 
$commands+=("list-key-phrases-detection-jobs"); 
$commands+=("list-sentiment-detection-jobs"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-topics-detection-jobs"); 
$commands+=("start-document-classification-job"); 
$commands+=("start-dominant-language-detection-job"); 
$commands+=("start-entities-detection-job"); 
$commands+=("start-key-phrases-detection-job"); 
$commands+=("start-sentiment-detection-job"); 
$commands+=("start-topics-detection-job"); 
$commands+=("stop-dominant-language-detection-job"); 
$commands+=("stop-entities-detection-job"); 
$commands+=("stop-key-phrases-detection-job"); 
$commands+=("stop-sentiment-detection-job"); 
$commands+=("stop-training-document-classifier"); 
$commands+=("stop-training-entity-recognizer"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-endpoint");

return $commands;
}

 function Get-comprehend-batch-detect-dominant-language {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--text-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-batch-detect-entities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--text-list"); 
$flags+=("--language-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-batch-detect-key-phrases {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--text-list"); 
$flags+=("--language-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-batch-detect-sentiment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--text-list"); 
$flags+=("--language-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-batch-detect-syntax {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--text-list"); 
$flags+=("--language-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-classify-document {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--text"); 
$flags+=("--endpoint-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-create-document-classifier {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--document-classifier-name"); 
$flags+=("--data-access-role-arn"); 
$flags+=("--tags"); 
$flags+=("--input-data-config"); 
$flags+=("--output-data-config"); 
$flags+=("--client-request-token"); 
$flags+=("--language-code"); 
$flags+=("--volume-kms-key-id"); 
$flags+=("--vpc-config"); 
$flags+=("--mode"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-create-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-name"); 
$flags+=("--model-arn"); 
$flags+=("--desired-inference-units"); 
$flags+=("--client-request-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-create-entity-recognizer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--recognizer-name"); 
$flags+=("--data-access-role-arn"); 
$flags+=("--tags"); 
$flags+=("--input-data-config"); 
$flags+=("--client-request-token"); 
$flags+=("--language-code"); 
$flags+=("--volume-kms-key-id"); 
$flags+=("--vpc-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-delete-document-classifier {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--document-classifier-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-delete-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-delete-entity-recognizer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--entity-recognizer-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-describe-document-classification-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-describe-document-classifier {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--document-classifier-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-describe-dominant-language-detection-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-describe-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-describe-entities-detection-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-describe-entity-recognizer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--entity-recognizer-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-describe-key-phrases-detection-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-describe-sentiment-detection-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-describe-topics-detection-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-detect-dominant-language {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--text"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-detect-entities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--text"); 
$flags+=("--language-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-detect-key-phrases {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--text"); 
$flags+=("--language-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-detect-sentiment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--text"); 
$flags+=("--language-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-detect-syntax {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--text"); 
$flags+=("--language-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-list-document-classification-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-list-document-classifiers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-list-dominant-language-detection-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-list-endpoints {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-list-entities-detection-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-list-entity-recognizers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-list-key-phrases-detection-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-list-sentiment-detection-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-list-topics-detection-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-start-document-classification-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-name"); 
$flags+=("--document-classifier-arn"); 
$flags+=("--input-data-config"); 
$flags+=("--output-data-config"); 
$flags+=("--data-access-role-arn"); 
$flags+=("--client-request-token"); 
$flags+=("--volume-kms-key-id"); 
$flags+=("--vpc-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-start-dominant-language-detection-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--input-data-config"); 
$flags+=("--output-data-config"); 
$flags+=("--data-access-role-arn"); 
$flags+=("--job-name"); 
$flags+=("--client-request-token"); 
$flags+=("--volume-kms-key-id"); 
$flags+=("--vpc-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-start-entities-detection-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--input-data-config"); 
$flags+=("--output-data-config"); 
$flags+=("--data-access-role-arn"); 
$flags+=("--job-name"); 
$flags+=("--entity-recognizer-arn"); 
$flags+=("--language-code"); 
$flags+=("--client-request-token"); 
$flags+=("--volume-kms-key-id"); 
$flags+=("--vpc-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-start-key-phrases-detection-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--input-data-config"); 
$flags+=("--output-data-config"); 
$flags+=("--data-access-role-arn"); 
$flags+=("--job-name"); 
$flags+=("--language-code"); 
$flags+=("--client-request-token"); 
$flags+=("--volume-kms-key-id"); 
$flags+=("--vpc-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-start-sentiment-detection-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--input-data-config"); 
$flags+=("--output-data-config"); 
$flags+=("--data-access-role-arn"); 
$flags+=("--job-name"); 
$flags+=("--language-code"); 
$flags+=("--client-request-token"); 
$flags+=("--volume-kms-key-id"); 
$flags+=("--vpc-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-start-topics-detection-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--input-data-config"); 
$flags+=("--output-data-config"); 
$flags+=("--data-access-role-arn"); 
$flags+=("--job-name"); 
$flags+=("--number-of-topics"); 
$flags+=("--client-request-token"); 
$flags+=("--volume-kms-key-id"); 
$flags+=("--vpc-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-stop-dominant-language-detection-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-stop-entities-detection-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-stop-key-phrases-detection-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-stop-sentiment-detection-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-stop-training-document-classifier {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--document-classifier-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-stop-training-entity-recognizer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--entity-recognizer-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehend-update-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-arn"); 
$flags+=("--desired-inference-units"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehendmedical {
    $commands = [System.Collections.ArrayList]@();

$commands+=("describe-entities-detection-v2-job"); 
$commands+=("describe-phi-detection-job"); 
$commands+=("detect-entities-v2"); 
$commands+=("detect-phi"); 
$commands+=("infer-icd10-cm"); 
$commands+=("infer-rx-norm"); 
$commands+=("list-entities-detection-v2-jobs"); 
$commands+=("list-phi-detection-jobs"); 
$commands+=("start-entities-detection-v2-job"); 
$commands+=("start-phi-detection-job"); 
$commands+=("stop-entities-detection-v2-job"); 
$commands+=("stop-phi-detection-job");

return $commands;
}

 function Get-comprehendmedical-describe-entities-detection-v2-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehendmedical-describe-phi-detection-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehendmedical-detect-entities-v2 {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--text"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehendmedical-detect-phi {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--text"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehendmedical-infer-icd10-cm {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--text"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehendmedical-infer-rx-norm {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--text"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehendmedical-list-entities-detection-v2-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehendmedical-list-phi-detection-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehendmedical-start-entities-detection-v2-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--input-data-config"); 
$flags+=("--output-data-config"); 
$flags+=("--data-access-role-arn"); 
$flags+=("--job-name"); 
$flags+=("--client-request-token"); 
$flags+=("--kms-key"); 
$flags+=("--language-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehendmedical-start-phi-detection-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--input-data-config"); 
$flags+=("--output-data-config"); 
$flags+=("--data-access-role-arn"); 
$flags+=("--job-name"); 
$flags+=("--client-request-token"); 
$flags+=("--kms-key"); 
$flags+=("--language-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehendmedical-stop-entities-detection-v2-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-comprehendmedical-stop-phi-detection-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-compute-optimizer {
    $commands = [System.Collections.ArrayList]@();

$commands+=("get-auto-scaling-group-recommendations"); 
$commands+=("get-ec2-instance-recommendations"); 
$commands+=("get-ec2-recommendation-projected-metrics"); 
$commands+=("get-enrollment-status"); 
$commands+=("get-recommendation-summaries"); 
$commands+=("update-enrollment-status");

return $commands;
}

 function Get-compute-optimizer-get-auto-scaling-group-recommendations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-ids"); 
$flags+=("--auto-scaling-group-arns"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-compute-optimizer-get-ec2-instance-recommendations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-arns"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--filters"); 
$flags+=("--account-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-compute-optimizer-get-ec2-recommendation-projected-metrics {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-arn"); 
$flags+=("--stat"); 
$flags+=("--period"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-compute-optimizer-get-enrollment-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-compute-optimizer-get-recommendation-summaries {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-ids"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-compute-optimizer-update-enrollment-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--status"); 
$flags+=("--include-member-accounts"); 
$flags+=("--no-include-member-accounts"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice {
    $commands = [System.Collections.ArrayList]@();

$commands+=("batch-get-aggregate-resource-config"); 
$commands+=("batch-get-resource-config"); 
$commands+=("delete-aggregation-authorization"); 
$commands+=("delete-config-rule"); 
$commands+=("delete-configuration-aggregator"); 
$commands+=("delete-configuration-recorder"); 
$commands+=("delete-conformance-pack"); 
$commands+=("delete-delivery-channel"); 
$commands+=("delete-evaluation-results"); 
$commands+=("delete-organization-config-rule"); 
$commands+=("delete-organization-conformance-pack"); 
$commands+=("delete-pending-aggregation-request"); 
$commands+=("delete-remediation-configuration"); 
$commands+=("delete-remediation-exceptions"); 
$commands+=("delete-resource-config"); 
$commands+=("delete-retention-configuration"); 
$commands+=("deliver-config-snapshot"); 
$commands+=("describe-aggregate-compliance-by-config-rules"); 
$commands+=("describe-aggregation-authorizations"); 
$commands+=("describe-compliance-by-config-rule"); 
$commands+=("describe-compliance-by-resource"); 
$commands+=("describe-config-rule-evaluation-status"); 
$commands+=("describe-config-rules"); 
$commands+=("describe-configuration-aggregator-sources-status"); 
$commands+=("describe-configuration-aggregators"); 
$commands+=("describe-configuration-recorder-status"); 
$commands+=("describe-configuration-recorders"); 
$commands+=("describe-conformance-pack-compliance"); 
$commands+=("describe-conformance-pack-status"); 
$commands+=("describe-conformance-packs"); 
$commands+=("describe-delivery-channel-status"); 
$commands+=("describe-delivery-channels"); 
$commands+=("describe-organization-config-rule-statuses"); 
$commands+=("describe-organization-config-rules"); 
$commands+=("describe-organization-conformance-pack-statuses"); 
$commands+=("describe-organization-conformance-packs"); 
$commands+=("describe-pending-aggregation-requests"); 
$commands+=("describe-remediation-configurations"); 
$commands+=("describe-remediation-exceptions"); 
$commands+=("describe-remediation-execution-status"); 
$commands+=("describe-retention-configurations"); 
$commands+=("get-aggregate-compliance-details-by-config-rule"); 
$commands+=("get-aggregate-config-rule-compliance-summary"); 
$commands+=("get-aggregate-discovered-resource-counts"); 
$commands+=("get-aggregate-resource-config"); 
$commands+=("get-compliance-details-by-config-rule"); 
$commands+=("get-compliance-details-by-resource"); 
$commands+=("get-compliance-summary-by-config-rule"); 
$commands+=("get-compliance-summary-by-resource-type"); 
$commands+=("get-conformance-pack-compliance-details"); 
$commands+=("get-conformance-pack-compliance-summary"); 
$commands+=("get-discovered-resource-counts"); 
$commands+=("get-organization-config-rule-detailed-status"); 
$commands+=("get-organization-conformance-pack-detailed-status"); 
$commands+=("get-resource-config-history"); 
$commands+=("get-status"); 
$commands+=("list-aggregate-discovered-resources"); 
$commands+=("list-discovered-resources"); 
$commands+=("list-tags-for-resource"); 
$commands+=("put-aggregation-authorization"); 
$commands+=("put-config-rule"); 
$commands+=("put-configuration-aggregator"); 
$commands+=("put-configuration-recorder"); 
$commands+=("put-conformance-pack"); 
$commands+=("put-delivery-channel"); 
$commands+=("put-evaluations"); 
$commands+=("put-organization-config-rule"); 
$commands+=("put-organization-conformance-pack"); 
$commands+=("put-remediation-configurations"); 
$commands+=("put-remediation-exceptions"); 
$commands+=("put-resource-config"); 
$commands+=("put-retention-configuration"); 
$commands+=("select-aggregate-resource-config"); 
$commands+=("select-resource-config"); 
$commands+=("start-config-rules-evaluation"); 
$commands+=("start-configuration-recorder"); 
$commands+=("start-remediation-execution"); 
$commands+=("stop-configuration-recorder"); 
$commands+=("subscribe"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource");

return $commands;
}

 function Get-configservice-batch-get-aggregate-resource-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-aggregator-name"); 
$flags+=("--resource-identifiers"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-batch-get-resource-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-delete-aggregation-authorization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authorized-account-id"); 
$flags+=("--authorized-aws-region"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-delete-config-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--config-rule-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-delete-configuration-aggregator {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-aggregator-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-delete-configuration-recorder {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-recorder-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-delete-conformance-pack {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--conformance-pack-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-delete-delivery-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--delivery-channel-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-delete-evaluation-results {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--config-rule-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-delete-organization-config-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-config-rule-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-delete-organization-conformance-pack {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-conformance-pack-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-delete-pending-aggregation-request {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--requester-account-id"); 
$flags+=("--requester-aws-region"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-delete-remediation-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--config-rule-name"); 
$flags+=("--resource-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-delete-remediation-exceptions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--config-rule-name"); 
$flags+=("--resource-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-delete-resource-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-type"); 
$flags+=("--resource-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-delete-retention-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--retention-configuration-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-deliver-config-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--delivery-channel-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-describe-aggregate-compliance-by-config-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-aggregator-name"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-describe-aggregation-authorizations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-describe-compliance-by-config-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--config-rule-names"); 
$flags+=("--compliance-types"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-describe-compliance-by-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-type"); 
$flags+=("--resource-id"); 
$flags+=("--compliance-types"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-describe-config-rule-evaluation-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--config-rule-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-describe-config-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--config-rule-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-describe-configuration-aggregator-sources-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-aggregator-name"); 
$flags+=("--update-status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-describe-configuration-aggregators {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-aggregator-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-describe-configuration-recorder-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-recorder-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-describe-configuration-recorders {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-recorder-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-describe-conformance-pack-compliance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--conformance-pack-name"); 
$flags+=("--filters"); 
$flags+=("--limit"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-describe-conformance-pack-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--conformance-pack-names"); 
$flags+=("--limit"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-describe-conformance-packs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--conformance-pack-names"); 
$flags+=("--limit"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-describe-delivery-channel-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--delivery-channel-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-describe-delivery-channels {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--delivery-channel-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-describe-organization-config-rule-statuses {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-config-rule-names"); 
$flags+=("--limit"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-describe-organization-config-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-config-rule-names"); 
$flags+=("--limit"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-describe-organization-conformance-pack-statuses {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-conformance-pack-names"); 
$flags+=("--limit"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-describe-organization-conformance-packs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-conformance-pack-names"); 
$flags+=("--limit"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-describe-pending-aggregation-requests {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-describe-remediation-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--config-rule-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-describe-remediation-exceptions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--config-rule-name"); 
$flags+=("--resource-keys"); 
$flags+=("--limit"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-describe-remediation-execution-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--config-rule-name"); 
$flags+=("--resource-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-describe-retention-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--retention-configuration-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-get-aggregate-compliance-details-by-config-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-aggregator-name"); 
$flags+=("--config-rule-name"); 
$flags+=("--account-id"); 
$flags+=("--aws-region"); 
$flags+=("--compliance-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-get-aggregate-config-rule-compliance-summary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-aggregator-name"); 
$flags+=("--filters"); 
$flags+=("--group-by-key"); 
$flags+=("--limit"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-get-aggregate-discovered-resource-counts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-aggregator-name"); 
$flags+=("--filters"); 
$flags+=("--group-by-key"); 
$flags+=("--limit"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-get-aggregate-resource-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-aggregator-name"); 
$flags+=("--resource-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-get-compliance-details-by-config-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--config-rule-name"); 
$flags+=("--compliance-types"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-get-compliance-details-by-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-type"); 
$flags+=("--resource-id"); 
$flags+=("--compliance-types"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-get-compliance-summary-by-config-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-get-compliance-summary-by-resource-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-types"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-get-conformance-pack-compliance-details {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--conformance-pack-name"); 
$flags+=("--filters"); 
$flags+=("--limit"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-get-conformance-pack-compliance-summary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--conformance-pack-names"); 
$flags+=("--limit"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-get-discovered-resource-counts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-types"); 
$flags+=("--limit"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-get-organization-config-rule-detailed-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-config-rule-name"); 
$flags+=("--filters"); 
$flags+=("--limit"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-get-organization-conformance-pack-detailed-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-conformance-pack-name"); 
$flags+=("--filters"); 
$flags+=("--limit"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-get-resource-config-history {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-type"); 
$flags+=("--resource-id"); 
$flags+=("--later-time"); 
$flags+=("--earlier-time"); 
$flags+=("--chronological-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-get-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-configservice-list-aggregate-discovered-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-aggregator-name"); 
$flags+=("--resource-type"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-list-discovered-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-type"); 
$flags+=("--resource-ids"); 
$flags+=("--resource-name"); 
$flags+=("--limit"); 
$flags+=("--include-deleted-resources"); 
$flags+=("--no-include-deleted-resources"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--limit"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-put-aggregation-authorization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authorized-account-id"); 
$flags+=("--authorized-aws-region"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-put-config-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--config-rule"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-put-configuration-aggregator {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-aggregator-name"); 
$flags+=("--account-aggregation-sources"); 
$flags+=("--organization-aggregation-source"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-put-configuration-recorder {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-recorder"); 
$flags+=("--recording-group"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-put-conformance-pack {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--conformance-pack-name"); 
$flags+=("--template-s"); 
$flags+=("--template-body"); 
$flags+=("--delivery-s"); 
$flags+=("--delivery-s"); 
$flags+=("--conformance-pack-input-parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-put-delivery-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--delivery-channel"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-put-evaluations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--evaluations"); 
$flags+=("--result-token"); 
$flags+=("--test-mode"); 
$flags+=("--no-test-mode"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-put-organization-config-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-config-rule-name"); 
$flags+=("--organization-managed-rule-metadata"); 
$flags+=("--organization-custom-rule-metadata"); 
$flags+=("--excluded-accounts"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-put-organization-conformance-pack {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-conformance-pack-name"); 
$flags+=("--template-s"); 
$flags+=("--template-body"); 
$flags+=("--delivery-s"); 
$flags+=("--delivery-s"); 
$flags+=("--conformance-pack-input-parameters"); 
$flags+=("--excluded-accounts"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-put-remediation-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--remediation-configurations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-put-remediation-exceptions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--config-rule-name"); 
$flags+=("--resource-keys"); 
$flags+=("--message"); 
$flags+=("--expiration-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-put-resource-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-type"); 
$flags+=("--schema-version-id"); 
$flags+=("--resource-id"); 
$flags+=("--resource-name"); 
$flags+=("--configuration"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-put-retention-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--retention-period-in-days"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-select-aggregate-resource-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--expression"); 
$flags+=("--configuration-aggregator-name"); 
$flags+=("--limit"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-select-resource-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--expression"); 
$flags+=("--limit"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-start-config-rules-evaluation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--config-rule-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-start-configuration-recorder {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-recorder-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-start-remediation-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--config-rule-name"); 
$flags+=("--resource-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-stop-configuration-recorder {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-recorder-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-subscribe {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--s"); 
$flags+=("--sns-topic"); 
$flags+=("--iam-role");

return $flags;
}

 function Get-configservice-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configservice-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-configure {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-model"); 
$commands+=("get"); 
$commands+=("list"); 
$commands+=("set");

return $commands;
}

 function Get-configure-add-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-model"); 
$flags+=("--service-name");

return $flags;
}

 function Get-configure-get {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--profile");

return $flags;
}

 function Get-configure-list {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--profile");

return $flags;
}

 function Get-configure-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--profile");

return $flags;
}

 function Get-connect {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-user"); 
$commands+=("delete-user"); 
$commands+=("describe-user"); 
$commands+=("describe-user-hierarchy-group"); 
$commands+=("describe-user-hierarchy-structure"); 
$commands+=("get-contact-attributes"); 
$commands+=("get-current-metric-data"); 
$commands+=("get-federation-token"); 
$commands+=("get-metric-data"); 
$commands+=("list-contact-flows"); 
$commands+=("list-hours-of-operations"); 
$commands+=("list-phone-numbers"); 
$commands+=("list-queues"); 
$commands+=("list-routing-profiles"); 
$commands+=("list-security-profiles"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-user-hierarchy-groups"); 
$commands+=("list-users"); 
$commands+=("start-chat-contact"); 
$commands+=("start-outbound-voice-contact"); 
$commands+=("stop-contact"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-contact-attributes"); 
$commands+=("update-user-hierarchy"); 
$commands+=("update-user-identity-info"); 
$commands+=("update-user-phone-config"); 
$commands+=("update-user-routing-profile"); 
$commands+=("update-user-security-profiles");

return $commands;
}

 function Get-connect-create-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--username"); 
$flags+=("--password"); 
$flags+=("--identity-info"); 
$flags+=("--phone-config"); 
$flags+=("--directory-user-id"); 
$flags+=("--security-profile-ids"); 
$flags+=("--routing-profile-id"); 
$flags+=("--hierarchy-group-id"); 
$flags+=("--instance-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-delete-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--user-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-describe-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-id"); 
$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-describe-user-hierarchy-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hierarchy-group-id"); 
$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-describe-user-hierarchy-structure {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-get-contact-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--initial-contact-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-get-current-metric-data {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--filters"); 
$flags+=("--groupings"); 
$flags+=("--current-metrics"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-get-federation-token {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-get-metric-data {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--filters"); 
$flags+=("--groupings"); 
$flags+=("--historical-metrics"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-list-contact-flows {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--contact-flow-types"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-list-hours-of-operations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-list-phone-numbers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--phone-number-types"); 
$flags+=("--phone-number-country-codes"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-list-queues {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--queue-types"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-list-routing-profiles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-list-security-profiles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-list-user-hierarchy-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-list-users {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-start-chat-contact {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--contact-flow-id"); 
$flags+=("--attributes"); 
$flags+=("--participant-details"); 
$flags+=("--initial-message"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-start-outbound-voice-contact {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--destination-phone-number"); 
$flags+=("--contact-flow-id"); 
$flags+=("--instance-id"); 
$flags+=("--client-token"); 
$flags+=("--source-phone-number"); 
$flags+=("--queue-id"); 
$flags+=("--attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-stop-contact {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--contact-id"); 
$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-update-contact-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--initial-contact-id"); 
$flags+=("--instance-id"); 
$flags+=("--attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-update-user-hierarchy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hierarchy-group-id"); 
$flags+=("--user-id"); 
$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-update-user-identity-info {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-info"); 
$flags+=("--user-id"); 
$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-update-user-phone-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--phone-config"); 
$flags+=("--user-id"); 
$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-update-user-routing-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--routing-profile-id"); 
$flags+=("--user-id"); 
$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connect-update-user-security-profiles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--security-profile-ids"); 
$flags+=("--user-id"); 
$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connectparticipant {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-participant-connection"); 
$commands+=("disconnect-participant"); 
$commands+=("get-transcript"); 
$commands+=("send-event"); 
$commands+=("send-message");

return $commands;
}

 function Get-connectparticipant-create-participant-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--type"); 
$flags+=("--participant-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connectparticipant-disconnect-participant {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-token"); 
$flags+=("--connection-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connectparticipant-get-transcript {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--contact-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--scan-direction"); 
$flags+=("--sort-order"); 
$flags+=("--start-position"); 
$flags+=("--connection-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connectparticipant-send-event {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--content-type"); 
$flags+=("--content"); 
$flags+=("--client-token"); 
$flags+=("--connection-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-connectparticipant-send-message {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--content-type"); 
$flags+=("--content"); 
$flags+=("--client-token"); 
$flags+=("--connection-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cur {
    $commands = [System.Collections.ArrayList]@();

$commands+=("delete-report-definition"); 
$commands+=("describe-report-definitions"); 
$commands+=("modify-report-definition"); 
$commands+=("put-report-definition");

return $commands;
}

 function Get-cur-delete-report-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--report-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cur-describe-report-definitions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cur-modify-report-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--report-name"); 
$flags+=("--report-definition"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-cur-put-report-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--report-definition"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dataexchange {
    $commands = [System.Collections.ArrayList]@();

$commands+=("cancel-job"); 
$commands+=("create-data-set"); 
$commands+=("create-job"); 
$commands+=("create-revision"); 
$commands+=("delete-asset"); 
$commands+=("delete-data-set"); 
$commands+=("delete-revision"); 
$commands+=("get-asset"); 
$commands+=("get-data-set"); 
$commands+=("get-job"); 
$commands+=("get-revision"); 
$commands+=("list-data-set-revisions"); 
$commands+=("list-data-sets"); 
$commands+=("list-jobs"); 
$commands+=("list-revision-assets"); 
$commands+=("list-tags-for-resource"); 
$commands+=("start-job"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-asset"); 
$commands+=("update-data-set"); 
$commands+=("update-revision");

return $commands;
}

 function Get-dataexchange-cancel-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dataexchange-create-data-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--asset-type"); 
$flags+=("--description"); 
$flags+=("--name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dataexchange-create-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--details"); 
$flags+=("--type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dataexchange-create-revision {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--comment"); 
$flags+=("--data-set-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dataexchange-delete-asset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--asset-id"); 
$flags+=("--data-set-id"); 
$flags+=("--revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dataexchange-delete-data-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--data-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dataexchange-delete-revision {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--data-set-id"); 
$flags+=("--revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dataexchange-get-asset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--asset-id"); 
$flags+=("--data-set-id"); 
$flags+=("--revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dataexchange-get-data-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--data-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dataexchange-get-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dataexchange-get-revision {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--data-set-id"); 
$flags+=("--revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dataexchange-list-data-set-revisions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--data-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dataexchange-list-data-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--origin"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dataexchange-list-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--data-set-id"); 
$flags+=("--revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dataexchange-list-revision-assets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--data-set-id"); 
$flags+=("--revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dataexchange-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dataexchange-start-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dataexchange-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dataexchange-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dataexchange-update-asset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--asset-id"); 
$flags+=("--data-set-id"); 
$flags+=("--name"); 
$flags+=("--revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dataexchange-update-data-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--data-set-id"); 
$flags+=("--description"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dataexchange-update-revision {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--comment"); 
$flags+=("--data-set-id"); 
$flags+=("--finalized"); 
$flags+=("--no-finalized"); 
$flags+=("--revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datapipeline {
    $commands = [System.Collections.ArrayList]@();

$commands+=("activate-pipeline"); 
$commands+=("add-tags"); 
$commands+=("create-default-roles"); 
$commands+=("create-pipeline"); 
$commands+=("deactivate-pipeline"); 
$commands+=("delete-pipeline"); 
$commands+=("describe-objects"); 
$commands+=("describe-pipelines"); 
$commands+=("evaluate-expression"); 
$commands+=("get-pipeline-definition"); 
$commands+=("list-pipelines"); 
$commands+=("list-runs"); 
$commands+=("poll-for-task"); 
$commands+=("put-pipeline-definition"); 
$commands+=("query-objects"); 
$commands+=("remove-tags"); 
$commands+=("report-task-progress"); 
$commands+=("report-task-runner-heartbeat"); 
$commands+=("set-status"); 
$commands+=("set-task-status"); 
$commands+=("validate-pipeline-definition");

return $commands;
}

 function Get-datapipeline-activate-pipeline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-id"); 
$flags+=("--parameter-values"); 
$flags+=("--start-timestamp"); 
$flags+=("--parameter-values-uri"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datapipeline-add-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datapipeline-create-default-roles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-datapipeline-create-pipeline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--unique-id"); 
$flags+=("--description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datapipeline-deactivate-pipeline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-id"); 
$flags+=("--cancel-active"); 
$flags+=("--no-cancel-active"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datapipeline-delete-pipeline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datapipeline-describe-objects {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-id"); 
$flags+=("--object-ids"); 
$flags+=("--evaluate-expressions"); 
$flags+=("--no-evaluate-expressions"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datapipeline-describe-pipelines {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datapipeline-evaluate-expression {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-id"); 
$flags+=("--object-id"); 
$flags+=("--expression"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datapipeline-get-pipeline-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-id"); 
$flags+=("--pipeline-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datapipeline-list-pipelines {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datapipeline-list-runs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-id"); 
$flags+=("--status"); 
$flags+=("--start-interval"); 
$flags+=("--schedule-interval");

return $flags;
}

 function Get-datapipeline-poll-for-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--worker-group"); 
$flags+=("--hostname"); 
$flags+=("--instance-identity"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datapipeline-put-pipeline-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-id"); 
$flags+=("--parameter-objects"); 
$flags+=("--parameter-values"); 
$flags+=("--pipeline-definition"); 
$flags+=("--parameter-values-uri"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datapipeline-query-objects {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-id"); 
$flags+=("--sphere"); 
$flags+=("--objects-query"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datapipeline-remove-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-id"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datapipeline-report-task-progress {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-id"); 
$flags+=("--fields"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datapipeline-report-task-runner-heartbeat {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--taskrunner-id"); 
$flags+=("--worker-group"); 
$flags+=("--hostname"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datapipeline-set-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-id"); 
$flags+=("--object-ids"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datapipeline-set-task-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-id"); 
$flags+=("--task-status"); 
$flags+=("--error-id"); 
$flags+=("--error-message"); 
$flags+=("--error-stack-trace"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datapipeline-validate-pipeline-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-id"); 
$flags+=("--pipeline-objects"); 
$flags+=("--parameter-objects"); 
$flags+=("--parameter-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync {
    $commands = [System.Collections.ArrayList]@();

$commands+=("cancel-task-execution"); 
$commands+=("create-agent"); 
$commands+=("create-location-efs"); 
$commands+=("create-location-fsx-windows"); 
$commands+=("create-location-nfs"); 
$commands+=("create-location-s3"); 
$commands+=("create-location-smb"); 
$commands+=("create-task"); 
$commands+=("delete-agent"); 
$commands+=("delete-location"); 
$commands+=("delete-task"); 
$commands+=("describe-agent"); 
$commands+=("describe-location-efs"); 
$commands+=("describe-location-fsx-windows"); 
$commands+=("describe-location-nfs"); 
$commands+=("describe-location-s3"); 
$commands+=("describe-location-smb"); 
$commands+=("describe-task"); 
$commands+=("describe-task-execution"); 
$commands+=("list-agents"); 
$commands+=("list-locations"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-task-executions"); 
$commands+=("list-tasks"); 
$commands+=("start-task-execution"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-agent"); 
$commands+=("update-task");

return $commands;
}

 function Get-datasync-cancel-task-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-execution-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-create-agent {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--activation-key"); 
$flags+=("--agent-name"); 
$flags+=("--tags"); 
$flags+=("--vpc-endpoint-id"); 
$flags+=("--subnet-arns"); 
$flags+=("--security-group-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-create-location-efs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subdirectory"); 
$flags+=("--efs-filesystem-arn"); 
$flags+=("--ec"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-create-location-fsx-windows {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subdirectory"); 
$flags+=("--fsx-filesystem-arn"); 
$flags+=("--security-group-arns"); 
$flags+=("--tags"); 
$flags+=("--user"); 
$flags+=("--domain"); 
$flags+=("--password"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-create-location-nfs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subdirectory"); 
$flags+=("--server-hostname"); 
$flags+=("--on-prem-config"); 
$flags+=("--mount-options"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-create-location-s3 {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subdirectory"); 
$flags+=("--s"); 
$flags+=("--s"); 
$flags+=("--s"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-create-location-smb {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subdirectory"); 
$flags+=("--server-hostname"); 
$flags+=("--user"); 
$flags+=("--domain"); 
$flags+=("--password"); 
$flags+=("--agent-arns"); 
$flags+=("--mount-options"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-create-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-location-arn"); 
$flags+=("--destination-location-arn"); 
$flags+=("--cloud-watch-log-group-arn"); 
$flags+=("--name"); 
$flags+=("--options"); 
$flags+=("--excludes"); 
$flags+=("--schedule"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-delete-agent {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--agent-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-delete-location {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--location-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-delete-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-describe-agent {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--agent-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-describe-location-efs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--location-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-describe-location-fsx-windows {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--location-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-describe-location-nfs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--location-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-describe-location-s3 {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--location-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-describe-location-smb {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--location-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-describe-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-describe-task-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-execution-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-list-agents {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-list-locations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-list-task-executions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-list-tasks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-start-task-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-arn"); 
$flags+=("--override-options"); 
$flags+=("--includes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-update-agent {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--agent-arn"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-datasync-update-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-arn"); 
$flags+=("--options"); 
$flags+=("--excludes"); 
$flags+=("--schedule"); 
$flags+=("--name"); 
$flags+=("--cloud-watch-log-group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dax {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-cluster"); 
$commands+=("create-parameter-group"); 
$commands+=("create-subnet-group"); 
$commands+=("decrease-replication-factor"); 
$commands+=("delete-cluster"); 
$commands+=("delete-parameter-group"); 
$commands+=("delete-subnet-group"); 
$commands+=("describe-clusters"); 
$commands+=("describe-default-parameters"); 
$commands+=("describe-events"); 
$commands+=("describe-parameter-groups"); 
$commands+=("describe-parameters"); 
$commands+=("describe-subnet-groups"); 
$commands+=("increase-replication-factor"); 
$commands+=("list-tags"); 
$commands+=("reboot-node"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-cluster"); 
$commands+=("update-parameter-group"); 
$commands+=("update-subnet-group");

return $commands;
}

 function Get-dax-create-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-name"); 
$flags+=("--node-type"); 
$flags+=("--description"); 
$flags+=("--replication-factor"); 
$flags+=("--availability-zones"); 
$flags+=("--subnet-group-name"); 
$flags+=("--security-group-ids"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--notification-topic-arn"); 
$flags+=("--iam-role-arn"); 
$flags+=("--parameter-group-name"); 
$flags+=("--tags"); 
$flags+=("--sse-specification"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dax-create-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--parameter-group-name"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dax-create-subnet-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subnet-group-name"); 
$flags+=("--description"); 
$flags+=("--subnet-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dax-decrease-replication-factor {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-name"); 
$flags+=("--new-replication-factor"); 
$flags+=("--availability-zones"); 
$flags+=("--node-ids-to-remove"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dax-delete-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dax-delete-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--parameter-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dax-delete-subnet-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subnet-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dax-describe-clusters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dax-describe-default-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dax-describe-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-name"); 
$flags+=("--source-type"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--duration"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dax-describe-parameter-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--parameter-group-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dax-describe-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--parameter-group-name"); 
$flags+=("--source"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dax-describe-subnet-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subnet-group-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dax-increase-replication-factor {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-name"); 
$flags+=("--new-replication-factor"); 
$flags+=("--availability-zones"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dax-list-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dax-reboot-node {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-name"); 
$flags+=("--node-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dax-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dax-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dax-update-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-name"); 
$flags+=("--description"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--notification-topic-arn"); 
$flags+=("--notification-topic-status"); 
$flags+=("--parameter-group-name"); 
$flags+=("--security-group-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dax-update-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--parameter-group-name"); 
$flags+=("--parameter-name-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dax-update-subnet-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subnet-group-name"); 
$flags+=("--description"); 
$flags+=("--subnet-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-tags-to-on-premises-instances"); 
$commands+=("batch-get-application-revisions"); 
$commands+=("batch-get-applications"); 
$commands+=("batch-get-deployment-groups"); 
$commands+=("batch-get-deployment-targets"); 
$commands+=("batch-get-deployments"); 
$commands+=("batch-get-on-premises-instances"); 
$commands+=("continue-deployment"); 
$commands+=("create-application"); 
$commands+=("create-deployment"); 
$commands+=("create-deployment-config"); 
$commands+=("create-deployment-group"); 
$commands+=("delete-application"); 
$commands+=("delete-deployment-config"); 
$commands+=("delete-deployment-group"); 
$commands+=("delete-git-hub-account-token"); 
$commands+=("deregister"); 
$commands+=("deregister-on-premises-instance"); 
$commands+=("get-application"); 
$commands+=("get-application-revision"); 
$commands+=("get-deployment"); 
$commands+=("get-deployment-config"); 
$commands+=("get-deployment-group"); 
$commands+=("get-deployment-target"); 
$commands+=("get-on-premises-instance"); 
$commands+=("install"); 
$commands+=("list-application-revisions"); 
$commands+=("list-applications"); 
$commands+=("list-deployment-configs"); 
$commands+=("list-deployment-groups"); 
$commands+=("list-deployment-targets"); 
$commands+=("list-deployments"); 
$commands+=("list-git-hub-account-token-names"); 
$commands+=("list-on-premises-instances"); 
$commands+=("list-tags-for-resource"); 
$commands+=("push"); 
$commands+=("put-lifecycle-event-hook-execution-status"); 
$commands+=("register"); 
$commands+=("register-application-revision"); 
$commands+=("register-on-premises-instance"); 
$commands+=("remove-tags-from-on-premises-instances"); 
$commands+=("stop-deployment"); 
$commands+=("tag-resource"); 
$commands+=("uninstall"); 
$commands+=("untag-resource"); 
$commands+=("update-application"); 
$commands+=("update-deployment-group"); 
$commands+=("wait");

return $commands;
}

 function Get-deploy-add-tags-to-on-premises-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--tags"); 
$flags+=("--instance-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-batch-get-application-revisions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--revisions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-batch-get-applications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-batch-get-deployment-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--deployment-group-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-batch-get-deployment-targets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--deployment-id"); 
$flags+=("--target-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-batch-get-deployments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--deployment-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-batch-get-on-premises-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-continue-deployment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--deployment-id"); 
$flags+=("--deployment-wait-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-create-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--compute-platform"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-create-deployment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--deployment-group-name"); 
$flags+=("--revision"); 
$flags+=("--deployment-config-name"); 
$flags+=("--description"); 
$flags+=("--ignore-application-stop-failures"); 
$flags+=("--no-ignore-application-stop-failures"); 
$flags+=("--target-instances"); 
$flags+=("--auto-rollback-configuration"); 
$flags+=("--update-outdated-instances-only"); 
$flags+=("--no-update-outdated-instances-only"); 
$flags+=("--file-exists-behavior"); 
$flags+=("--s"); 
$flags+=("--github-location"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-create-deployment-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--deployment-config-name"); 
$flags+=("--minimum-healthy-hosts"); 
$flags+=("--traffic-routing-config"); 
$flags+=("--compute-platform"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-create-deployment-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--deployment-group-name"); 
$flags+=("--deployment-config-name"); 
$flags+=("--ec"); 
$flags+=("--on-premises-instance-tag-filters"); 
$flags+=("--auto-scaling-groups"); 
$flags+=("--service-role-arn"); 
$flags+=("--trigger-configurations"); 
$flags+=("--alarm-configuration"); 
$flags+=("--auto-rollback-configuration"); 
$flags+=("--deployment-style"); 
$flags+=("--blue-green-deployment-configuration"); 
$flags+=("--load-balancer-info"); 
$flags+=("--ec"); 
$flags+=("--ecs-services"); 
$flags+=("--on-premises-tag-set"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-delete-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-delete-deployment-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--deployment-config-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-delete-deployment-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--deployment-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-delete-git-hub-account-token {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--token-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-deregister {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-name"); 
$flags+=("--no-delete-iam-user");

return $flags;
}

 function Get-deploy-deregister-on-premises-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-get-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-get-application-revision {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--revision"); 
$flags+=("--s"); 
$flags+=("--github-location"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-get-deployment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--deployment-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-get-deployment-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--deployment-config-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-get-deployment-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--deployment-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-get-deployment-target {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--deployment-id"); 
$flags+=("--target-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-get-on-premises-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-install {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--config-file"); 
$flags+=("--override-config"); 
$flags+=("--agent-installer");

return $flags;
}

 function Get-deploy-list-application-revisions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--s"); 
$flags+=("--s"); 
$flags+=("--deployed"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-list-applications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-list-deployment-configs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-list-deployment-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-list-deployment-targets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--deployment-id"); 
$flags+=("--target-filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-list-deployments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--deployment-group-name"); 
$flags+=("--include-only-statuses"); 
$flags+=("--create-time-range"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-list-git-hub-account-token-names {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-list-on-premises-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registration-status"); 
$flags+=("--tag-filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-push {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--s"); 
$flags+=("--ignore-hidden-files"); 
$flags+=("--no-ignore-hidden-files"); 
$flags+=("--source"); 
$flags+=("--description");

return $flags;
}

 function Get-deploy-put-lifecycle-event-hook-execution-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--deployment-id"); 
$flags+=("--lifecycle-event-hook-execution-id"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-register {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-name"); 
$flags+=("--tags"); 
$flags+=("--iam-user-arn");

return $flags;
}

 function Get-deploy-register-application-revision {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--description"); 
$flags+=("--revision"); 
$flags+=("--s"); 
$flags+=("--github-location"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-register-on-premises-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-name"); 
$flags+=("--iam-session-arn"); 
$flags+=("--iam-user-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-remove-tags-from-on-premises-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--tags"); 
$flags+=("--instance-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-stop-deployment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--deployment-id"); 
$flags+=("--auto-rollback-enabled"); 
$flags+=("--no-auto-rollback-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-uninstall {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-deploy-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-update-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--new-application-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-update-deployment-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--current-deployment-group-name"); 
$flags+=("--new-deployment-group-name"); 
$flags+=("--deployment-config-name"); 
$flags+=("--ec"); 
$flags+=("--on-premises-instance-tag-filters"); 
$flags+=("--auto-scaling-groups"); 
$flags+=("--service-role-arn"); 
$flags+=("--trigger-configurations"); 
$flags+=("--alarm-configuration"); 
$flags+=("--auto-rollback-configuration"); 
$flags+=("--deployment-style"); 
$flags+=("--blue-green-deployment-configuration"); 
$flags+=("--load-balancer-info"); 
$flags+=("--ec"); 
$flags+=("--ecs-services"); 
$flags+=("--on-premises-tag-set"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-deploy-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-detective {
    $commands = [System.Collections.ArrayList]@();

$commands+=("accept-invitation"); 
$commands+=("create-graph"); 
$commands+=("create-members"); 
$commands+=("delete-graph"); 
$commands+=("delete-members"); 
$commands+=("disassociate-membership"); 
$commands+=("get-members"); 
$commands+=("list-graphs"); 
$commands+=("list-invitations"); 
$commands+=("list-members"); 
$commands+=("reject-invitation"); 
$commands+=("start-monitoring-member");

return $commands;
}

 function Get-detective-accept-invitation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--graph-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-detective-create-graph {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-detective-create-members {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--graph-arn"); 
$flags+=("--message"); 
$flags+=("--accounts"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-detective-delete-graph {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--graph-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-detective-delete-members {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--graph-arn"); 
$flags+=("--account-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-detective-disassociate-membership {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--graph-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-detective-get-members {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--graph-arn"); 
$flags+=("--account-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-detective-list-graphs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-detective-list-invitations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-detective-list-members {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--graph-arn"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-detective-reject-invitation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--graph-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-detective-start-monitoring-member {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--graph-arn"); 
$flags+=("--account-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-device-pool"); 
$commands+=("create-instance-profile"); 
$commands+=("create-network-profile"); 
$commands+=("create-project"); 
$commands+=("create-remote-access-session"); 
$commands+=("create-test-grid-project"); 
$commands+=("create-test-grid-url"); 
$commands+=("create-upload"); 
$commands+=("create-vpce-configuration"); 
$commands+=("delete-device-pool"); 
$commands+=("delete-instance-profile"); 
$commands+=("delete-network-profile"); 
$commands+=("delete-project"); 
$commands+=("delete-remote-access-session"); 
$commands+=("delete-run"); 
$commands+=("delete-test-grid-project"); 
$commands+=("delete-upload"); 
$commands+=("delete-vpce-configuration"); 
$commands+=("get-account-settings"); 
$commands+=("get-device"); 
$commands+=("get-device-instance"); 
$commands+=("get-device-pool"); 
$commands+=("get-device-pool-compatibility"); 
$commands+=("get-instance-profile"); 
$commands+=("get-job"); 
$commands+=("get-network-profile"); 
$commands+=("get-offering-status"); 
$commands+=("get-project"); 
$commands+=("get-remote-access-session"); 
$commands+=("get-run"); 
$commands+=("get-suite"); 
$commands+=("get-test"); 
$commands+=("get-test-grid-project"); 
$commands+=("get-test-grid-session"); 
$commands+=("get-upload"); 
$commands+=("get-vpce-configuration"); 
$commands+=("install-to-remote-access-session"); 
$commands+=("list-artifacts"); 
$commands+=("list-device-instances"); 
$commands+=("list-device-pools"); 
$commands+=("list-devices"); 
$commands+=("list-instance-profiles"); 
$commands+=("list-jobs"); 
$commands+=("list-network-profiles"); 
$commands+=("list-offering-promotions"); 
$commands+=("list-offering-transactions"); 
$commands+=("list-offerings"); 
$commands+=("list-projects"); 
$commands+=("list-remote-access-sessions"); 
$commands+=("list-runs"); 
$commands+=("list-samples"); 
$commands+=("list-suites"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-test-grid-projects"); 
$commands+=("list-test-grid-session-actions"); 
$commands+=("list-test-grid-session-artifacts"); 
$commands+=("list-test-grid-sessions"); 
$commands+=("list-tests"); 
$commands+=("list-unique-problems"); 
$commands+=("list-uploads"); 
$commands+=("list-vpce-configurations"); 
$commands+=("purchase-offering"); 
$commands+=("renew-offering"); 
$commands+=("schedule-run"); 
$commands+=("stop-job"); 
$commands+=("stop-remote-access-session"); 
$commands+=("stop-run"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-device-instance"); 
$commands+=("update-device-pool"); 
$commands+=("update-instance-profile"); 
$commands+=("update-network-profile"); 
$commands+=("update-project"); 
$commands+=("update-test-grid-project"); 
$commands+=("update-upload"); 
$commands+=("update-vpce-configuration");

return $commands;
}

 function Get-devicefarm-create-device-pool {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-arn"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--rules"); 
$flags+=("--max-devices"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-create-instance-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--package-cleanup"); 
$flags+=("--no-package-cleanup"); 
$flags+=("--exclude-app-packages-from-cleanup"); 
$flags+=("--reboot-after-use"); 
$flags+=("--no-reboot-after-use"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-create-network-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-arn"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--type"); 
$flags+=("--uplink-bandwidth-bits"); 
$flags+=("--downlink-bandwidth-bits"); 
$flags+=("--uplink-delay-ms"); 
$flags+=("--downlink-delay-ms"); 
$flags+=("--uplink-jitter-ms"); 
$flags+=("--downlink-jitter-ms"); 
$flags+=("--uplink-loss-percent"); 
$flags+=("--downlink-loss-percent"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-create-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--default-job-timeout-minutes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-create-remote-access-session {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-arn"); 
$flags+=("--device-arn"); 
$flags+=("--instance-arn"); 
$flags+=("--ssh-public-key"); 
$flags+=("--remote-debug-enabled"); 
$flags+=("--no-remote-debug-enabled"); 
$flags+=("--remote-record-enabled"); 
$flags+=("--no-remote-record-enabled"); 
$flags+=("--remote-record-app-arn"); 
$flags+=("--name"); 
$flags+=("--client-id"); 
$flags+=("--configuration"); 
$flags+=("--interaction-mode"); 
$flags+=("--skip-app-resign"); 
$flags+=("--no-skip-app-resign"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-create-test-grid-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-create-test-grid-url {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-arn"); 
$flags+=("--expires-in-seconds"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-create-upload {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-arn"); 
$flags+=("--name"); 
$flags+=("--type"); 
$flags+=("--content-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-create-vpce-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vpce-configuration-name"); 
$flags+=("--vpce-service-name"); 
$flags+=("--service-dns-name"); 
$flags+=("--vpce-configuration-description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-delete-device-pool {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-delete-instance-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-delete-network-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-delete-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-delete-remote-access-session {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-delete-run {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-delete-test-grid-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-delete-upload {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-delete-vpce-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-get-account-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-get-device {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-get-device-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-get-device-pool {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-get-device-pool-compatibility {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-pool-arn"); 
$flags+=("--app-arn"); 
$flags+=("--test-type"); 
$flags+=("--test"); 
$flags+=("--configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-get-instance-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-get-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-get-network-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-get-offering-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-get-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-get-remote-access-session {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-get-run {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-get-suite {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-get-test {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-get-test-grid-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-get-test-grid-session {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-arn"); 
$flags+=("--session-id"); 
$flags+=("--session-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-get-upload {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-get-vpce-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-install-to-remote-access-session {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--remote-access-session-arn"); 
$flags+=("--app-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-list-artifacts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-list-device-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-list-device-pools {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-list-devices {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-list-instance-profiles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-list-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-list-network-profiles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-list-offering-promotions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-list-offering-transactions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-list-offerings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-list-projects {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-list-remote-access-sessions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-list-runs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-list-samples {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-list-suites {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-list-test-grid-projects {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-result"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-list-test-grid-session-actions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--session-arn"); 
$flags+=("--max-result"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-list-test-grid-session-artifacts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--session-arn"); 
$flags+=("--type"); 
$flags+=("--max-result"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-list-test-grid-sessions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-arn"); 
$flags+=("--status"); 
$flags+=("--creation-time-after"); 
$flags+=("--creation-time-before"); 
$flags+=("--end-time-after"); 
$flags+=("--end-time-before"); 
$flags+=("--max-result"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-list-tests {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-list-unique-problems {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-list-uploads {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-list-vpce-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-purchase-offering {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--offering-id"); 
$flags+=("--quantity"); 
$flags+=("--offering-promotion-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-renew-offering {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--offering-id"); 
$flags+=("--quantity"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-schedule-run {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-arn"); 
$flags+=("--app-arn"); 
$flags+=("--device-pool-arn"); 
$flags+=("--device-selection-configuration"); 
$flags+=("--name"); 
$flags+=("--test"); 
$flags+=("--configuration"); 
$flags+=("--execution-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-stop-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-stop-remote-access-session {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-stop-run {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-update-device-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--profile-arn"); 
$flags+=("--labels"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-update-device-pool {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--rules"); 
$flags+=("--max-devices"); 
$flags+=("--clear-max-devices"); 
$flags+=("--no-clear-max-devices"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-update-instance-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--package-cleanup"); 
$flags+=("--no-package-cleanup"); 
$flags+=("--exclude-app-packages-from-cleanup"); 
$flags+=("--reboot-after-use"); 
$flags+=("--no-reboot-after-use"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-update-network-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--type"); 
$flags+=("--uplink-bandwidth-bits"); 
$flags+=("--downlink-bandwidth-bits"); 
$flags+=("--uplink-delay-ms"); 
$flags+=("--downlink-delay-ms"); 
$flags+=("--uplink-jitter-ms"); 
$flags+=("--downlink-jitter-ms"); 
$flags+=("--uplink-loss-percent"); 
$flags+=("--downlink-loss-percent"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-update-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--name"); 
$flags+=("--default-job-timeout-minutes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-update-test-grid-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-arn"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-update-upload {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--name"); 
$flags+=("--content-type"); 
$flags+=("--edit-content"); 
$flags+=("--no-edit-content"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-devicefarm-update-vpce-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--vpce-configuration-name"); 
$flags+=("--vpce-service-name"); 
$flags+=("--service-dns-name"); 
$flags+=("--vpce-configuration-description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect {
    $commands = [System.Collections.ArrayList]@();

$commands+=("accept-direct-connect-gateway-association-proposal"); 
$commands+=("allocate-hosted-connection"); 
$commands+=("allocate-private-virtual-interface"); 
$commands+=("allocate-public-virtual-interface"); 
$commands+=("allocate-transit-virtual-interface"); 
$commands+=("associate-connection-with-lag"); 
$commands+=("associate-hosted-connection"); 
$commands+=("associate-virtual-interface"); 
$commands+=("confirm-connection"); 
$commands+=("confirm-private-virtual-interface"); 
$commands+=("confirm-public-virtual-interface"); 
$commands+=("confirm-transit-virtual-interface"); 
$commands+=("create-bgp-peer"); 
$commands+=("create-connection"); 
$commands+=("create-direct-connect-gateway"); 
$commands+=("create-direct-connect-gateway-association"); 
$commands+=("create-direct-connect-gateway-association-proposal"); 
$commands+=("create-interconnect"); 
$commands+=("create-lag"); 
$commands+=("create-private-virtual-interface"); 
$commands+=("create-public-virtual-interface"); 
$commands+=("create-transit-virtual-interface"); 
$commands+=("delete-bgp-peer"); 
$commands+=("delete-connection"); 
$commands+=("delete-direct-connect-gateway"); 
$commands+=("delete-direct-connect-gateway-association"); 
$commands+=("delete-direct-connect-gateway-association-proposal"); 
$commands+=("delete-interconnect"); 
$commands+=("delete-lag"); 
$commands+=("delete-virtual-interface"); 
$commands+=("describe-connections"); 
$commands+=("describe-direct-connect-gateway-association-proposals"); 
$commands+=("describe-direct-connect-gateway-associations"); 
$commands+=("describe-direct-connect-gateway-attachments"); 
$commands+=("describe-direct-connect-gateways"); 
$commands+=("describe-hosted-connections"); 
$commands+=("describe-interconnects"); 
$commands+=("describe-lags"); 
$commands+=("describe-loa"); 
$commands+=("describe-locations"); 
$commands+=("describe-tags"); 
$commands+=("describe-virtual-gateways"); 
$commands+=("describe-virtual-interfaces"); 
$commands+=("disassociate-connection-from-lag"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-direct-connect-gateway-association"); 
$commands+=("update-lag"); 
$commands+=("update-virtual-interface-attributes");

return $commands;
}

 function Get-directconnect-accept-direct-connect-gateway-association-proposal {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--direct-connect-gateway-id"); 
$flags+=("--proposal-id"); 
$flags+=("--associated-gateway-owner-account"); 
$flags+=("--override-allowed-prefixes-to-direct-connect-gateway"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-allocate-hosted-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connection-id"); 
$flags+=("--owner-account"); 
$flags+=("--bandwidth"); 
$flags+=("--connection-name"); 
$flags+=("--vlan"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-allocate-private-virtual-interface {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connection-id"); 
$flags+=("--owner-account"); 
$flags+=("--new-private-virtual-interface-allocation"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-allocate-public-virtual-interface {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connection-id"); 
$flags+=("--owner-account"); 
$flags+=("--new-public-virtual-interface-allocation"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-allocate-transit-virtual-interface {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connection-id"); 
$flags+=("--owner-account"); 
$flags+=("--new-transit-virtual-interface-allocation"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-associate-connection-with-lag {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connection-id"); 
$flags+=("--lag-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-associate-hosted-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connection-id"); 
$flags+=("--parent-connection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-associate-virtual-interface {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--virtual-interface-id"); 
$flags+=("--connection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-confirm-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-confirm-private-virtual-interface {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--virtual-interface-id"); 
$flags+=("--virtual-gateway-id"); 
$flags+=("--direct-connect-gateway-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-confirm-public-virtual-interface {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--virtual-interface-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-confirm-transit-virtual-interface {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--virtual-interface-id"); 
$flags+=("--direct-connect-gateway-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-create-bgp-peer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--virtual-interface-id"); 
$flags+=("--new-bgp-peer"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-create-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--location"); 
$flags+=("--bandwidth"); 
$flags+=("--connection-name"); 
$flags+=("--lag-id"); 
$flags+=("--tags"); 
$flags+=("--provider-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-create-direct-connect-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--direct-connect-gateway-name"); 
$flags+=("--amazon-side-asn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-create-direct-connect-gateway-association {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--direct-connect-gateway-id"); 
$flags+=("--gateway-id"); 
$flags+=("--add-allowed-prefixes-to-direct-connect-gateway"); 
$flags+=("--virtual-gateway-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-create-direct-connect-gateway-association-proposal {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--direct-connect-gateway-id"); 
$flags+=("--direct-connect-gateway-owner-account"); 
$flags+=("--gateway-id"); 
$flags+=("--add-allowed-prefixes-to-direct-connect-gateway"); 
$flags+=("--remove-allowed-prefixes-to-direct-connect-gateway"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-create-interconnect {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--interconnect-name"); 
$flags+=("--bandwidth"); 
$flags+=("--location"); 
$flags+=("--lag-id"); 
$flags+=("--tags"); 
$flags+=("--provider-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-create-lag {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--number-of-connections"); 
$flags+=("--location"); 
$flags+=("--connections-bandwidth"); 
$flags+=("--lag-name"); 
$flags+=("--connection-id"); 
$flags+=("--tags"); 
$flags+=("--child-connection-tags"); 
$flags+=("--provider-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-create-private-virtual-interface {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connection-id"); 
$flags+=("--new-private-virtual-interface"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-create-public-virtual-interface {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connection-id"); 
$flags+=("--new-public-virtual-interface"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-create-transit-virtual-interface {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connection-id"); 
$flags+=("--new-transit-virtual-interface"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-delete-bgp-peer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--virtual-interface-id"); 
$flags+=("--asn"); 
$flags+=("--customer-address"); 
$flags+=("--bgp-peer-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-delete-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-delete-direct-connect-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--direct-connect-gateway-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-delete-direct-connect-gateway-association {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--association-id"); 
$flags+=("--direct-connect-gateway-id"); 
$flags+=("--virtual-gateway-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-delete-direct-connect-gateway-association-proposal {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--proposal-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-delete-interconnect {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--interconnect-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-delete-lag {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--lag-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-delete-virtual-interface {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--virtual-interface-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-describe-connections {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-describe-direct-connect-gateway-association-proposals {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--direct-connect-gateway-id"); 
$flags+=("--proposal-id"); 
$flags+=("--associated-gateway-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-describe-direct-connect-gateway-associations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--association-id"); 
$flags+=("--associated-gateway-id"); 
$flags+=("--direct-connect-gateway-id"); 
$flags+=("--virtual-gateway-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-describe-direct-connect-gateway-attachments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--direct-connect-gateway-id"); 
$flags+=("--virtual-interface-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-describe-direct-connect-gateways {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--direct-connect-gateway-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-describe-hosted-connections {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-describe-interconnects {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--interconnect-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-describe-lags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--lag-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-describe-loa {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connection-id"); 
$flags+=("--provider-name"); 
$flags+=("--loa-content-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-describe-locations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-describe-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-describe-virtual-gateways {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-describe-virtual-interfaces {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connection-id"); 
$flags+=("--virtual-interface-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-disassociate-connection-from-lag {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connection-id"); 
$flags+=("--lag-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-update-direct-connect-gateway-association {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--association-id"); 
$flags+=("--add-allowed-prefixes-to-direct-connect-gateway"); 
$flags+=("--remove-allowed-prefixes-to-direct-connect-gateway"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-update-lag {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--lag-id"); 
$flags+=("--lag-name"); 
$flags+=("--minimum-links"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-directconnect-update-virtual-interface-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--virtual-interface-id"); 
$flags+=("--mtu"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-discovery {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-configuration-items-to-application"); 
$commands+=("batch-delete-import-data"); 
$commands+=("create-application"); 
$commands+=("create-tags"); 
$commands+=("delete-applications"); 
$commands+=("delete-tags"); 
$commands+=("describe-agents"); 
$commands+=("describe-configurations"); 
$commands+=("describe-continuous-exports"); 
$commands+=("describe-export-tasks"); 
$commands+=("describe-import-tasks"); 
$commands+=("describe-tags"); 
$commands+=("disassociate-configuration-items-from-application"); 
$commands+=("get-discovery-summary"); 
$commands+=("list-configurations"); 
$commands+=("list-server-neighbors"); 
$commands+=("start-continuous-export"); 
$commands+=("start-data-collection-by-agent-ids"); 
$commands+=("start-export-task"); 
$commands+=("start-import-task"); 
$commands+=("stop-continuous-export"); 
$commands+=("stop-data-collection-by-agent-ids"); 
$commands+=("update-application");

return $commands;
}

 function Get-discovery-associate-configuration-items-to-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-configuration-id"); 
$flags+=("--configuration-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-discovery-batch-delete-import-data {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--import-task-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-discovery-create-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-discovery-create-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-ids"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-discovery-delete-applications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-discovery-delete-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-ids"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-discovery-describe-agents {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--agent-ids"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-discovery-describe-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-discovery-describe-continuous-exports {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--export-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-discovery-describe-export-tasks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--export-ids"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-discovery-describe-import-tasks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-discovery-describe-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-discovery-disassociate-configuration-items-from-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-configuration-id"); 
$flags+=("--configuration-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-discovery-get-discovery-summary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-discovery-list-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-type"); 
$flags+=("--filters"); 
$flags+=("--order-by"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-discovery-list-server-neighbors {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-id"); 
$flags+=("--port-information-needed"); 
$flags+=("--no-port-information-needed"); 
$flags+=("--neighbor-configuration-ids"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-discovery-start-continuous-export {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-discovery-start-data-collection-by-agent-ids {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--agent-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-discovery-start-export-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--export-data-format"); 
$flags+=("--filters"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-discovery-start-import-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-request-token"); 
$flags+=("--name"); 
$flags+=("--import-url"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-discovery-stop-continuous-export {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--export-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-discovery-stop-data-collection-by-agent-ids {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--agent-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-discovery-update-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-id"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dlm {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-default-role"); 
$commands+=("create-lifecycle-policy"); 
$commands+=("delete-lifecycle-policy"); 
$commands+=("get-lifecycle-policies"); 
$commands+=("get-lifecycle-policy"); 
$commands+=("list-tags-for-resource"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-lifecycle-policy");

return $commands;
}

 function Get-dlm-create-default-role {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--iam-endpoint");

return $flags;
}

 function Get-dlm-create-lifecycle-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--execution-role-arn"); 
$flags+=("--description"); 
$flags+=("--state"); 
$flags+=("--policy-details"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dlm-delete-lifecycle-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dlm-get-lifecycle-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-ids"); 
$flags+=("--state"); 
$flags+=("--resource-types"); 
$flags+=("--target-tags"); 
$flags+=("--tags-to-add"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dlm-get-lifecycle-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dlm-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dlm-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dlm-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dlm-update-lifecycle-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-id"); 
$flags+=("--execution-role-arn"); 
$flags+=("--state"); 
$flags+=("--description"); 
$flags+=("--policy-details"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-tags-to-resource"); 
$commands+=("apply-pending-maintenance-action"); 
$commands+=("create-endpoint"); 
$commands+=("create-event-subscription"); 
$commands+=("create-replication-instance"); 
$commands+=("create-replication-subnet-group"); 
$commands+=("create-replication-task"); 
$commands+=("delete-certificate"); 
$commands+=("delete-connection"); 
$commands+=("delete-endpoint"); 
$commands+=("delete-event-subscription"); 
$commands+=("delete-replication-instance"); 
$commands+=("delete-replication-subnet-group"); 
$commands+=("delete-replication-task"); 
$commands+=("describe-account-attributes"); 
$commands+=("describe-certificates"); 
$commands+=("describe-connections"); 
$commands+=("describe-endpoint-types"); 
$commands+=("describe-endpoints"); 
$commands+=("describe-event-categories"); 
$commands+=("describe-event-subscriptions"); 
$commands+=("describe-events"); 
$commands+=("describe-orderable-replication-instances"); 
$commands+=("describe-pending-maintenance-actions"); 
$commands+=("describe-refresh-schemas-status"); 
$commands+=("describe-replication-instance-task-logs"); 
$commands+=("describe-replication-instances"); 
$commands+=("describe-replication-subnet-groups"); 
$commands+=("describe-replication-task-assessment-results"); 
$commands+=("describe-replication-tasks"); 
$commands+=("describe-schemas"); 
$commands+=("describe-table-statistics"); 
$commands+=("import-certificate"); 
$commands+=("list-tags-for-resource"); 
$commands+=("modify-endpoint"); 
$commands+=("modify-event-subscription"); 
$commands+=("modify-replication-instance"); 
$commands+=("modify-replication-subnet-group"); 
$commands+=("modify-replication-task"); 
$commands+=("reboot-replication-instance"); 
$commands+=("refresh-schemas"); 
$commands+=("reload-tables"); 
$commands+=("remove-tags-from-resource"); 
$commands+=("start-replication-task"); 
$commands+=("start-replication-task-assessment"); 
$commands+=("stop-replication-task"); 
$commands+=("test-connection"); 
$commands+=("wait");

return $commands;
}

 function Get-dms-add-tags-to-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-apply-pending-maintenance-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-instance-arn"); 
$flags+=("--apply-action"); 
$flags+=("--opt-in-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-create-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-identifier"); 
$flags+=("--endpoint-type"); 
$flags+=("--engine-name"); 
$flags+=("--username"); 
$flags+=("--password"); 
$flags+=("--server-name"); 
$flags+=("--port"); 
$flags+=("--database-name"); 
$flags+=("--extra-connection-attributes"); 
$flags+=("--kms-key-id"); 
$flags+=("--tags"); 
$flags+=("--certificate-arn"); 
$flags+=("--ssl-mode"); 
$flags+=("--service-access-role-arn"); 
$flags+=("--external-table-definition"); 
$flags+=("--dynamo-db-settings"); 
$flags+=("--s"); 
$flags+=("--dms-transfer-settings"); 
$flags+=("--mongo-db-settings"); 
$flags+=("--kinesis-settings"); 
$flags+=("--kafka-settings"); 
$flags+=("--elasticsearch-settings"); 
$flags+=("--neptune-settings"); 
$flags+=("--redshift-settings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-create-event-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-name"); 
$flags+=("--sns-topic-arn"); 
$flags+=("--source-type"); 
$flags+=("--event-categories"); 
$flags+=("--source-ids"); 
$flags+=("--enabled"); 
$flags+=("--no-enabled"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-create-replication-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-instance-identifier"); 
$flags+=("--allocated-storage"); 
$flags+=("--replication-instance-class"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--availability-zone"); 
$flags+=("--replication-subnet-group-identifier"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--multi-az"); 
$flags+=("--no-multi-az"); 
$flags+=("--engine-version"); 
$flags+=("--auto-minor-version-upgrade"); 
$flags+=("--no-auto-minor-version-upgrade"); 
$flags+=("--tags"); 
$flags+=("--kms-key-id"); 
$flags+=("--publicly-accessible"); 
$flags+=("--no-publicly-accessible"); 
$flags+=("--dns-name-servers"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-create-replication-subnet-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-subnet-group-identifier"); 
$flags+=("--replication-subnet-group-description"); 
$flags+=("--subnet-ids"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-create-replication-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-task-identifier"); 
$flags+=("--source-endpoint-arn"); 
$flags+=("--target-endpoint-arn"); 
$flags+=("--replication-instance-arn"); 
$flags+=("--migration-type"); 
$flags+=("--table-mappings"); 
$flags+=("--replication-task-settings"); 
$flags+=("--cdc-start-time"); 
$flags+=("--cdc-start-position"); 
$flags+=("--cdc-stop-position"); 
$flags+=("--tags"); 
$flags+=("--task-data"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-delete-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-delete-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-arn"); 
$flags+=("--replication-instance-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-delete-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-delete-event-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-delete-replication-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-instance-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-delete-replication-subnet-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-subnet-group-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-delete-replication-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-task-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-describe-account-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-describe-certificates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-describe-connections {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-describe-endpoint-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-describe-endpoints {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-describe-event-categories {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-type"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-describe-event-subscriptions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-name"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-describe-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-identifier"); 
$flags+=("--source-type"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--duration"); 
$flags+=("--event-categories"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-describe-orderable-replication-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-describe-pending-maintenance-actions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-instance-arn"); 
$flags+=("--filters"); 
$flags+=("--marker"); 
$flags+=("--max-records"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-describe-refresh-schemas-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-describe-replication-instance-task-logs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-instance-arn"); 
$flags+=("--max-records"); 
$flags+=("--marker"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-describe-replication-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-describe-replication-subnet-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-describe-replication-task-assessment-results {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-task-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-describe-replication-tasks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--without-settings"); 
$flags+=("--no-without-settings"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-describe-schemas {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-describe-table-statistics {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-task-arn"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-import-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-identifier"); 
$flags+=("--certificate-pem"); 
$flags+=("--certificate-wallet"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-modify-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-arn"); 
$flags+=("--endpoint-identifier"); 
$flags+=("--endpoint-type"); 
$flags+=("--engine-name"); 
$flags+=("--username"); 
$flags+=("--password"); 
$flags+=("--server-name"); 
$flags+=("--port"); 
$flags+=("--database-name"); 
$flags+=("--extra-connection-attributes"); 
$flags+=("--certificate-arn"); 
$flags+=("--ssl-mode"); 
$flags+=("--service-access-role-arn"); 
$flags+=("--external-table-definition"); 
$flags+=("--dynamo-db-settings"); 
$flags+=("--s"); 
$flags+=("--dms-transfer-settings"); 
$flags+=("--mongo-db-settings"); 
$flags+=("--kinesis-settings"); 
$flags+=("--kafka-settings"); 
$flags+=("--elasticsearch-settings"); 
$flags+=("--neptune-settings"); 
$flags+=("--redshift-settings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-modify-event-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-name"); 
$flags+=("--sns-topic-arn"); 
$flags+=("--source-type"); 
$flags+=("--event-categories"); 
$flags+=("--enabled"); 
$flags+=("--no-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-modify-replication-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-instance-arn"); 
$flags+=("--allocated-storage"); 
$flags+=("--apply-immediately"); 
$flags+=("--no-apply-immediately"); 
$flags+=("--replication-instance-class"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--multi-az"); 
$flags+=("--no-multi-az"); 
$flags+=("--engine-version"); 
$flags+=("--allow-major-version-upgrade"); 
$flags+=("--no-allow-major-version-upgrade"); 
$flags+=("--auto-minor-version-upgrade"); 
$flags+=("--no-auto-minor-version-upgrade"); 
$flags+=("--replication-instance-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-modify-replication-subnet-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-subnet-group-identifier"); 
$flags+=("--replication-subnet-group-description"); 
$flags+=("--subnet-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-modify-replication-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-task-arn"); 
$flags+=("--replication-task-identifier"); 
$flags+=("--migration-type"); 
$flags+=("--table-mappings"); 
$flags+=("--replication-task-settings"); 
$flags+=("--cdc-start-time"); 
$flags+=("--cdc-start-position"); 
$flags+=("--cdc-stop-position"); 
$flags+=("--task-data"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-reboot-replication-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-instance-arn"); 
$flags+=("--force-failover"); 
$flags+=("--no-force-failover"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-refresh-schemas {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-arn"); 
$flags+=("--replication-instance-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-reload-tables {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-task-arn"); 
$flags+=("--tables-to-reload"); 
$flags+=("--reload-option"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-remove-tags-from-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-start-replication-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-task-arn"); 
$flags+=("--start-replication-task-type"); 
$flags+=("--cdc-start-time"); 
$flags+=("--cdc-start-position"); 
$flags+=("--cdc-stop-position"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-start-replication-task-assessment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-task-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-stop-replication-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-task-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-test-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-instance-arn"); 
$flags+=("--endpoint-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dms-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-docdb {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-tags-to-resource"); 
$commands+=("apply-pending-maintenance-action"); 
$commands+=("copy-db-cluster-parameter-group"); 
$commands+=("copy-db-cluster-snapshot"); 
$commands+=("create-db-cluster"); 
$commands+=("create-db-cluster-parameter-group"); 
$commands+=("create-db-cluster-snapshot"); 
$commands+=("create-db-instance"); 
$commands+=("create-db-subnet-group"); 
$commands+=("delete-db-cluster"); 
$commands+=("delete-db-cluster-parameter-group"); 
$commands+=("delete-db-cluster-snapshot"); 
$commands+=("delete-db-instance"); 
$commands+=("delete-db-subnet-group"); 
$commands+=("describe-certificates"); 
$commands+=("describe-db-cluster-parameter-groups"); 
$commands+=("describe-db-cluster-parameters"); 
$commands+=("describe-db-cluster-snapshot-attributes"); 
$commands+=("describe-db-cluster-snapshots"); 
$commands+=("describe-db-clusters"); 
$commands+=("describe-db-engine-versions"); 
$commands+=("describe-db-instances"); 
$commands+=("describe-db-subnet-groups"); 
$commands+=("describe-engine-default-cluster-parameters"); 
$commands+=("describe-event-categories"); 
$commands+=("describe-events"); 
$commands+=("describe-orderable-db-instance-options"); 
$commands+=("describe-pending-maintenance-actions"); 
$commands+=("failover-db-cluster"); 
$commands+=("list-tags-for-resource"); 
$commands+=("modify-db-cluster"); 
$commands+=("modify-db-cluster-parameter-group"); 
$commands+=("modify-db-cluster-snapshot-attribute"); 
$commands+=("modify-db-instance"); 
$commands+=("modify-db-subnet-group"); 
$commands+=("reboot-db-instance"); 
$commands+=("remove-tags-from-resource"); 
$commands+=("reset-db-cluster-parameter-group"); 
$commands+=("restore-db-cluster-from-snapshot"); 
$commands+=("restore-db-cluster-to-point-in-time"); 
$commands+=("start-db-cluster"); 
$commands+=("stop-db-cluster"); 
$commands+=("wait");

return $commands;
}

 function Get-docdb-add-tags-to-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-apply-pending-maintenance-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-identifier"); 
$flags+=("--apply-action"); 
$flags+=("--opt-in-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-copy-db-cluster-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-db-cluster-parameter-group-identifier"); 
$flags+=("--target-db-cluster-parameter-group-identifier"); 
$flags+=("--target-db-cluster-parameter-group-description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-copy-db-cluster-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-db-cluster-snapshot-identifier"); 
$flags+=("--target-db-cluster-snapshot-identifier"); 
$flags+=("--kms-key-id"); 
$flags+=("--pre-signed-url"); 
$flags+=("--copy-tags"); 
$flags+=("--no-copy-tags"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-create-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--availability-zones"); 
$flags+=("--backup-retention-period"); 
$flags+=("--db-cluster-identifier"); 
$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--db-subnet-group-name"); 
$flags+=("--engine"); 
$flags+=("--engine-version"); 
$flags+=("--port"); 
$flags+=("--master-username"); 
$flags+=("--master-user-password"); 
$flags+=("--preferred-backup-window"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--tags"); 
$flags+=("--storage-encrypted"); 
$flags+=("--no-storage-encrypted"); 
$flags+=("--kms-key-id"); 
$flags+=("--enable-cloudwatch-logs-exports"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-create-db-cluster-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--db-parameter-group-family"); 
$flags+=("--description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-create-db-cluster-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-snapshot-identifier"); 
$flags+=("--db-cluster-identifier"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-create-db-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--db-instance-class"); 
$flags+=("--engine"); 
$flags+=("--availability-zone"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--auto-minor-version-upgrade"); 
$flags+=("--no-auto-minor-version-upgrade"); 
$flags+=("--tags"); 
$flags+=("--db-cluster-identifier"); 
$flags+=("--promotion-tier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-create-db-subnet-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-subnet-group-name"); 
$flags+=("--db-subnet-group-description"); 
$flags+=("--subnet-ids"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-delete-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--skip-final-snapshot"); 
$flags+=("--no-skip-final-snapshot"); 
$flags+=("--final-db-snapshot-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-delete-db-cluster-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-delete-db-cluster-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-snapshot-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-delete-db-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-delete-db-subnet-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-subnet-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-describe-certificates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-identifier"); 
$flags+=("--filters"); 
$flags+=("--max-records"); 
$flags+=("--marker"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-describe-db-cluster-parameter-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--filters"); 
$flags+=("--max-records"); 
$flags+=("--marker"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-describe-db-cluster-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--source"); 
$flags+=("--filters"); 
$flags+=("--max-records"); 
$flags+=("--marker"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-describe-db-cluster-snapshot-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-snapshot-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-describe-db-cluster-snapshots {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--db-cluster-snapshot-identifier"); 
$flags+=("--snapshot-type"); 
$flags+=("--filters"); 
$flags+=("--max-records"); 
$flags+=("--marker"); 
$flags+=("--include-shared"); 
$flags+=("--no-include-shared"); 
$flags+=("--include-public"); 
$flags+=("--no-include-public"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-describe-db-clusters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-describe-db-engine-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--engine"); 
$flags+=("--engine-version"); 
$flags+=("--db-parameter-group-family"); 
$flags+=("--filters"); 
$flags+=("--default-only"); 
$flags+=("--no-default-only"); 
$flags+=("--list-supported-character-sets"); 
$flags+=("--no-list-supported-character-sets"); 
$flags+=("--list-supported-timezones"); 
$flags+=("--no-list-supported-timezones"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-describe-db-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-describe-db-subnet-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-subnet-group-name"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-describe-engine-default-cluster-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-parameter-group-family"); 
$flags+=("--filters"); 
$flags+=("--max-records"); 
$flags+=("--marker"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-describe-event-categories {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-type"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-describe-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-identifier"); 
$flags+=("--source-type"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--duration"); 
$flags+=("--event-categories"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-describe-orderable-db-instance-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--engine"); 
$flags+=("--engine-version"); 
$flags+=("--db-instance-class"); 
$flags+=("--license-model"); 
$flags+=("--vpc"); 
$flags+=("--no-vpc"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-describe-pending-maintenance-actions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-identifier"); 
$flags+=("--filters"); 
$flags+=("--marker"); 
$flags+=("--max-records"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-failover-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--target-db-instance-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-modify-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--new-db-cluster-identifier"); 
$flags+=("--apply-immediately"); 
$flags+=("--no-apply-immediately"); 
$flags+=("--backup-retention-period"); 
$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--port"); 
$flags+=("--master-user-password"); 
$flags+=("--preferred-backup-window"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--cloudwatch-logs-export-configuration"); 
$flags+=("--engine-version"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-modify-db-cluster-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-modify-db-cluster-snapshot-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-snapshot-identifier"); 
$flags+=("--attribute-name"); 
$flags+=("--values-to-add"); 
$flags+=("--values-to-remove"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-modify-db-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--db-instance-class"); 
$flags+=("--apply-immediately"); 
$flags+=("--no-apply-immediately"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--auto-minor-version-upgrade"); 
$flags+=("--no-auto-minor-version-upgrade"); 
$flags+=("--new-db-instance-identifier"); 
$flags+=("--ca-certificate-identifier"); 
$flags+=("--promotion-tier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-modify-db-subnet-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-subnet-group-name"); 
$flags+=("--db-subnet-group-description"); 
$flags+=("--subnet-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-reboot-db-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--force-failover"); 
$flags+=("--no-force-failover"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-remove-tags-from-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-reset-db-cluster-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--reset-all-parameters"); 
$flags+=("--no-reset-all-parameters"); 
$flags+=("--parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-restore-db-cluster-from-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--availability-zones"); 
$flags+=("--db-cluster-identifier"); 
$flags+=("--snapshot-identifier"); 
$flags+=("--engine"); 
$flags+=("--engine-version"); 
$flags+=("--port"); 
$flags+=("--db-subnet-group-name"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--tags"); 
$flags+=("--kms-key-id"); 
$flags+=("--enable-cloudwatch-logs-exports"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-restore-db-cluster-to-point-in-time {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--source-db-cluster-identifier"); 
$flags+=("--restore-to-time"); 
$flags+=("--use-latest-restorable-time"); 
$flags+=("--no-use-latest-restorable-time"); 
$flags+=("--port"); 
$flags+=("--db-subnet-group-name"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--tags"); 
$flags+=("--kms-key-id"); 
$flags+=("--enable-cloudwatch-logs-exports"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-start-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-stop-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-docdb-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-ds {
    $commands = [System.Collections.ArrayList]@();

$commands+=("accept-shared-directory"); 
$commands+=("add-ip-routes"); 
$commands+=("add-tags-to-resource"); 
$commands+=("cancel-schema-extension"); 
$commands+=("connect-directory"); 
$commands+=("create-alias"); 
$commands+=("create-computer"); 
$commands+=("create-conditional-forwarder"); 
$commands+=("create-directory"); 
$commands+=("create-log-subscription"); 
$commands+=("create-microsoft-ad"); 
$commands+=("create-snapshot"); 
$commands+=("create-trust"); 
$commands+=("delete-conditional-forwarder"); 
$commands+=("delete-directory"); 
$commands+=("delete-log-subscription"); 
$commands+=("delete-snapshot"); 
$commands+=("delete-trust"); 
$commands+=("deregister-certificate"); 
$commands+=("deregister-event-topic"); 
$commands+=("describe-certificate"); 
$commands+=("describe-conditional-forwarders"); 
$commands+=("describe-directories"); 
$commands+=("describe-domain-controllers"); 
$commands+=("describe-event-topics"); 
$commands+=("describe-ldaps-settings"); 
$commands+=("describe-shared-directories"); 
$commands+=("describe-snapshots"); 
$commands+=("describe-trusts"); 
$commands+=("disable-ldaps"); 
$commands+=("disable-radius"); 
$commands+=("disable-sso"); 
$commands+=("enable-ldaps"); 
$commands+=("enable-radius"); 
$commands+=("enable-sso"); 
$commands+=("get-directory-limits"); 
$commands+=("get-snapshot-limits"); 
$commands+=("list-certificates"); 
$commands+=("list-ip-routes"); 
$commands+=("list-log-subscriptions"); 
$commands+=("list-schema-extensions"); 
$commands+=("list-tags-for-resource"); 
$commands+=("register-certificate"); 
$commands+=("register-event-topic"); 
$commands+=("reject-shared-directory"); 
$commands+=("remove-ip-routes"); 
$commands+=("remove-tags-from-resource"); 
$commands+=("reset-user-password"); 
$commands+=("restore-from-snapshot"); 
$commands+=("share-directory"); 
$commands+=("start-schema-extension"); 
$commands+=("unshare-directory"); 
$commands+=("update-conditional-forwarder"); 
$commands+=("update-number-of-domain-controllers"); 
$commands+=("update-radius"); 
$commands+=("update-trust"); 
$commands+=("verify-trust");

return $commands;
}

 function Get-ds-accept-shared-directory {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--shared-directory-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-add-ip-routes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--ip-routes"); 
$flags+=("--update-security-group-for-directory-controllers"); 
$flags+=("--no-update-security-group-for-directory-controllers"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-add-tags-to-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-cancel-schema-extension {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--schema-extension-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-connect-directory {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--short-name"); 
$flags+=("--password"); 
$flags+=("--description"); 
$flags+=("--size"); 
$flags+=("--connect-settings"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-create-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--alias"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-create-computer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--computer-name"); 
$flags+=("--password"); 
$flags+=("--organizational-unit-distinguished-name"); 
$flags+=("--computer-attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-create-conditional-forwarder {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--remote-domain-name"); 
$flags+=("--dns-ip-addrs"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-create-directory {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--short-name"); 
$flags+=("--password"); 
$flags+=("--description"); 
$flags+=("--size"); 
$flags+=("--vpc-settings"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-create-log-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--log-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-create-microsoft-ad {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--short-name"); 
$flags+=("--password"); 
$flags+=("--description"); 
$flags+=("--vpc-settings"); 
$flags+=("--edition"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-create-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-create-trust {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--remote-domain-name"); 
$flags+=("--trust-password"); 
$flags+=("--trust-direction"); 
$flags+=("--trust-type"); 
$flags+=("--conditional-forwarder-ip-addrs"); 
$flags+=("--selective-auth"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-delete-conditional-forwarder {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--remote-domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-delete-directory {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-delete-log-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-delete-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--snapshot-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-delete-trust {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--trust-id"); 
$flags+=("--delete-associated-conditional-forwarder"); 
$flags+=("--no-delete-associated-conditional-forwarder"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-deregister-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--certificate-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-deregister-event-topic {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--topic-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-describe-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--certificate-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-describe-conditional-forwarders {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--remote-domain-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-describe-directories {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-describe-domain-controllers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--domain-controller-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-describe-event-topics {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--topic-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-describe-ldaps-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--type"); 
$flags+=("--next-token"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-describe-shared-directories {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--owner-directory-id"); 
$flags+=("--shared-directory-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-describe-snapshots {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--snapshot-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-describe-trusts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--trust-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-disable-ldaps {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-disable-radius {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-disable-sso {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--user-name"); 
$flags+=("--password"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-enable-ldaps {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-enable-radius {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--radius-settings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-enable-sso {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--user-name"); 
$flags+=("--password"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-get-directory-limits {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-get-snapshot-limits {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-list-certificates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--next-token"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-list-ip-routes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-list-log-subscriptions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-list-schema-extensions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-register-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--certificate-data"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-register-event-topic {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--topic-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-reject-shared-directory {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--shared-directory-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-remove-ip-routes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--cidr-ips"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-remove-tags-from-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-reset-user-password {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--user-name"); 
$flags+=("--new-password"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-restore-from-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--snapshot-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-share-directory {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--share-notes"); 
$flags+=("--share-target"); 
$flags+=("--share-method"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-start-schema-extension {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--create-snapshot-before-schema-extension"); 
$flags+=("--no-create-snapshot-before-schema-extension"); 
$flags+=("--ldif-content"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-unshare-directory {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--unshare-target"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-update-conditional-forwarder {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--remote-domain-name"); 
$flags+=("--dns-ip-addrs"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-update-number-of-domain-controllers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--desired-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-update-radius {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--radius-settings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-update-trust {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--trust-id"); 
$flags+=("--selective-auth"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ds-verify-trust {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--trust-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb {
    $commands = [System.Collections.ArrayList]@();

$commands+=("batch-get-item"); 
$commands+=("batch-write-item"); 
$commands+=("create-backup"); 
$commands+=("create-global-table"); 
$commands+=("create-table"); 
$commands+=("delete-backup"); 
$commands+=("delete-item"); 
$commands+=("delete-table"); 
$commands+=("describe-backup"); 
$commands+=("describe-continuous-backups"); 
$commands+=("describe-contributor-insights"); 
$commands+=("describe-endpoints"); 
$commands+=("describe-global-table"); 
$commands+=("describe-global-table-settings"); 
$commands+=("describe-limits"); 
$commands+=("describe-table"); 
$commands+=("describe-table-replica-auto-scaling"); 
$commands+=("describe-time-to-live"); 
$commands+=("get-item"); 
$commands+=("list-backups"); 
$commands+=("list-contributor-insights"); 
$commands+=("list-global-tables"); 
$commands+=("list-tables"); 
$commands+=("list-tags-of-resource"); 
$commands+=("put-item"); 
$commands+=("query"); 
$commands+=("restore-table-from-backup"); 
$commands+=("restore-table-to-point-in-time"); 
$commands+=("scan"); 
$commands+=("tag-resource"); 
$commands+=("transact-get-items"); 
$commands+=("transact-write-items"); 
$commands+=("untag-resource"); 
$commands+=("update-continuous-backups"); 
$commands+=("update-contributor-insights"); 
$commands+=("update-global-table"); 
$commands+=("update-global-table-settings"); 
$commands+=("update-item"); 
$commands+=("update-table"); 
$commands+=("update-table-replica-auto-scaling"); 
$commands+=("update-time-to-live"); 
$commands+=("wait");

return $commands;
}

 function Get-dynamodb-batch-get-item {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--request-items"); 
$flags+=("--return-consumed-capacity"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-batch-write-item {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--request-items"); 
$flags+=("--return-consumed-capacity"); 
$flags+=("--return-item-collection-metrics"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-create-backup {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--table-name"); 
$flags+=("--backup-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-create-global-table {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-table-name"); 
$flags+=("--replication-group"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-create-table {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--attribute-definitions"); 
$flags+=("--table-name"); 
$flags+=("--key-schema"); 
$flags+=("--local-secondary-indexes"); 
$flags+=("--global-secondary-indexes"); 
$flags+=("--billing-mode"); 
$flags+=("--provisioned-throughput"); 
$flags+=("--stream-specification"); 
$flags+=("--sse-specification"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-delete-backup {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-delete-item {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--table-name"); 
$flags+=("--key"); 
$flags+=("--expected"); 
$flags+=("--conditional-operator"); 
$flags+=("--return-values"); 
$flags+=("--return-consumed-capacity"); 
$flags+=("--return-item-collection-metrics"); 
$flags+=("--condition-expression"); 
$flags+=("--expression-attribute-names"); 
$flags+=("--expression-attribute-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-delete-table {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--table-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-describe-backup {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-describe-continuous-backups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--table-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-describe-contributor-insights {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--table-name"); 
$flags+=("--index-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-describe-endpoints {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-describe-global-table {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-table-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-describe-global-table-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-table-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-describe-limits {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-describe-table {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--table-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-describe-table-replica-auto-scaling {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--table-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-describe-time-to-live {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--table-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-get-item {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--table-name"); 
$flags+=("--key"); 
$flags+=("--attributes-to-get"); 
$flags+=("--consistent-read"); 
$flags+=("--no-consistent-read"); 
$flags+=("--return-consumed-capacity"); 
$flags+=("--projection-expression"); 
$flags+=("--expression-attribute-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-list-backups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--table-name"); 
$flags+=("--time-range-lower-bound"); 
$flags+=("--time-range-upper-bound"); 
$flags+=("--backup-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-list-contributor-insights {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--table-name"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-list-global-tables {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--exclusive-start-global-table-name"); 
$flags+=("--limit"); 
$flags+=("--region-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-list-tables {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-list-tags-of-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-put-item {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--table-name"); 
$flags+=("--item"); 
$flags+=("--expected"); 
$flags+=("--return-values"); 
$flags+=("--return-consumed-capacity"); 
$flags+=("--return-item-collection-metrics"); 
$flags+=("--conditional-operator"); 
$flags+=("--condition-expression"); 
$flags+=("--expression-attribute-names"); 
$flags+=("--expression-attribute-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-query {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--table-name"); 
$flags+=("--index-name"); 
$flags+=("--select"); 
$flags+=("--attributes-to-get"); 
$flags+=("--consistent-read"); 
$flags+=("--no-consistent-read"); 
$flags+=("--key-conditions"); 
$flags+=("--query-filter"); 
$flags+=("--conditional-operator"); 
$flags+=("--scan-index-forward"); 
$flags+=("--no-scan-index-forward"); 
$flags+=("--return-consumed-capacity"); 
$flags+=("--projection-expression"); 
$flags+=("--filter-expression"); 
$flags+=("--key-condition-expression"); 
$flags+=("--expression-attribute-names"); 
$flags+=("--expression-attribute-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-restore-table-from-backup {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--target-table-name"); 
$flags+=("--backup-arn"); 
$flags+=("--billing-mode-override"); 
$flags+=("--global-secondary-index-override"); 
$flags+=("--local-secondary-index-override"); 
$flags+=("--provisioned-throughput-override"); 
$flags+=("--sse-specification-override"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-restore-table-to-point-in-time {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-table-arn"); 
$flags+=("--source-table-name"); 
$flags+=("--target-table-name"); 
$flags+=("--use-latest-restorable-time"); 
$flags+=("--no-use-latest-restorable-time"); 
$flags+=("--restore-date-time"); 
$flags+=("--billing-mode-override"); 
$flags+=("--global-secondary-index-override"); 
$flags+=("--local-secondary-index-override"); 
$flags+=("--provisioned-throughput-override"); 
$flags+=("--sse-specification-override"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-scan {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--table-name"); 
$flags+=("--index-name"); 
$flags+=("--attributes-to-get"); 
$flags+=("--select"); 
$flags+=("--scan-filter"); 
$flags+=("--conditional-operator"); 
$flags+=("--return-consumed-capacity"); 
$flags+=("--total-segments"); 
$flags+=("--segment"); 
$flags+=("--projection-expression"); 
$flags+=("--filter-expression"); 
$flags+=("--expression-attribute-names"); 
$flags+=("--expression-attribute-values"); 
$flags+=("--consistent-read"); 
$flags+=("--no-consistent-read"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-transact-get-items {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transact-items"); 
$flags+=("--return-consumed-capacity"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-transact-write-items {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transact-items"); 
$flags+=("--return-consumed-capacity"); 
$flags+=("--return-item-collection-metrics"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-update-continuous-backups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--table-name"); 
$flags+=("--point-in-time-recovery-specification"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-update-contributor-insights {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--table-name"); 
$flags+=("--index-name"); 
$flags+=("--contributor-insights-action"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-update-global-table {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-table-name"); 
$flags+=("--replica-updates"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-update-global-table-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-table-name"); 
$flags+=("--global-table-billing-mode"); 
$flags+=("--global-table-provisioned-write-capacity-units"); 
$flags+=("--global-table-provisioned-write-capacity-auto-scaling-settings-update"); 
$flags+=("--global-table-global-secondary-index-settings-update"); 
$flags+=("--replica-settings-update"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-update-item {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--table-name"); 
$flags+=("--key"); 
$flags+=("--attribute-updates"); 
$flags+=("--expected"); 
$flags+=("--conditional-operator"); 
$flags+=("--return-values"); 
$flags+=("--return-consumed-capacity"); 
$flags+=("--return-item-collection-metrics"); 
$flags+=("--update-expression"); 
$flags+=("--condition-expression"); 
$flags+=("--expression-attribute-names"); 
$flags+=("--expression-attribute-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-update-table {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--attribute-definitions"); 
$flags+=("--table-name"); 
$flags+=("--billing-mode"); 
$flags+=("--provisioned-throughput"); 
$flags+=("--global-secondary-index-updates"); 
$flags+=("--stream-specification"); 
$flags+=("--sse-specification"); 
$flags+=("--replica-updates"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-update-table-replica-auto-scaling {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-secondary-index-updates"); 
$flags+=("--table-name"); 
$flags+=("--provisioned-write-capacity-auto-scaling-update"); 
$flags+=("--replica-updates"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-update-time-to-live {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--table-name"); 
$flags+=("--time-to-live-specification"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodb-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-dynamodbstreams {
    $commands = [System.Collections.ArrayList]@();

$commands+=("describe-stream"); 
$commands+=("get-records"); 
$commands+=("get-shard-iterator"); 
$commands+=("list-streams");

return $commands;
}

 function Get-dynamodbstreams-describe-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-arn"); 
$flags+=("--limit"); 
$flags+=("--exclusive-start-shard-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodbstreams-get-records {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--shard-iterator"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodbstreams-get-shard-iterator {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-arn"); 
$flags+=("--shard-id"); 
$flags+=("--shard-iterator-type"); 
$flags+=("--sequence-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-dynamodbstreams-list-streams {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--table-name"); 
$flags+=("--limit"); 
$flags+=("--exclusive-start-stream-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ebs {
    $commands = [System.Collections.ArrayList]@();

$commands+=("get-snapshot-block"); 
$commands+=("list-changed-blocks"); 
$commands+=("list-snapshot-blocks");

return $commands;
}

 function Get-ebs-get-snapshot-block {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--snapshot-id"); 
$flags+=("--block-index"); 
$flags+=("--block-token");

return $flags;
}

 function Get-ebs-list-changed-blocks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--first-snapshot-id"); 
$flags+=("--second-snapshot-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--starting-block-index"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ebs-list-snapshot-blocks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--snapshot-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--starting-block-index"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2 {
    $commands = [System.Collections.ArrayList]@();

$commands+=("accept-reserved-instances-exchange-quote"); 
$commands+=("accept-transit-gateway-peering-attachment"); 
$commands+=("accept-transit-gateway-vpc-attachment"); 
$commands+=("accept-vpc-endpoint-connections"); 
$commands+=("accept-vpc-peering-connection"); 
$commands+=("advertise-byoip-cidr"); 
$commands+=("allocate-address"); 
$commands+=("allocate-hosts"); 
$commands+=("apply-security-groups-to-client-vpn-target-network"); 
$commands+=("assign-ipv6-addresses"); 
$commands+=("assign-private-ip-addresses"); 
$commands+=("associate-address"); 
$commands+=("associate-client-vpn-target-network"); 
$commands+=("associate-dhcp-options"); 
$commands+=("associate-iam-instance-profile"); 
$commands+=("associate-route-table"); 
$commands+=("associate-subnet-cidr-block"); 
$commands+=("associate-transit-gateway-multicast-domain"); 
$commands+=("associate-transit-gateway-route-table"); 
$commands+=("associate-vpc-cidr-block"); 
$commands+=("attach-classic-link-vpc"); 
$commands+=("attach-internet-gateway"); 
$commands+=("attach-network-interface"); 
$commands+=("attach-volume"); 
$commands+=("attach-vpn-gateway"); 
$commands+=("authorize-client-vpn-ingress"); 
$commands+=("authorize-security-group-egress"); 
$commands+=("authorize-security-group-ingress"); 
$commands+=("bundle-instance"); 
$commands+=("cancel-bundle-task"); 
$commands+=("cancel-capacity-reservation"); 
$commands+=("cancel-conversion-task"); 
$commands+=("cancel-export-task"); 
$commands+=("cancel-import-task"); 
$commands+=("cancel-reserved-instances-listing"); 
$commands+=("cancel-spot-fleet-requests"); 
$commands+=("cancel-spot-instance-requests"); 
$commands+=("confirm-product-instance"); 
$commands+=("copy-fpga-image"); 
$commands+=("copy-image"); 
$commands+=("copy-snapshot"); 
$commands+=("create-capacity-reservation"); 
$commands+=("create-client-vpn-endpoint"); 
$commands+=("create-client-vpn-route"); 
$commands+=("create-customer-gateway"); 
$commands+=("create-default-subnet"); 
$commands+=("create-default-vpc"); 
$commands+=("create-dhcp-options"); 
$commands+=("create-egress-only-internet-gateway"); 
$commands+=("create-fleet"); 
$commands+=("create-flow-logs"); 
$commands+=("create-fpga-image"); 
$commands+=("create-image"); 
$commands+=("create-instance-export-task"); 
$commands+=("create-internet-gateway"); 
$commands+=("create-key-pair"); 
$commands+=("create-launch-template"); 
$commands+=("create-launch-template-version"); 
$commands+=("create-local-gateway-route"); 
$commands+=("create-local-gateway-route-table-vpc-association"); 
$commands+=("create-nat-gateway"); 
$commands+=("create-network-acl"); 
$commands+=("create-network-acl-entry"); 
$commands+=("create-network-interface"); 
$commands+=("create-network-interface-permission"); 
$commands+=("create-placement-group"); 
$commands+=("create-reserved-instances-listing"); 
$commands+=("create-route"); 
$commands+=("create-route-table"); 
$commands+=("create-security-group"); 
$commands+=("create-snapshot"); 
$commands+=("create-snapshots"); 
$commands+=("create-spot-datafeed-subscription"); 
$commands+=("create-subnet"); 
$commands+=("create-tags"); 
$commands+=("create-traffic-mirror-filter"); 
$commands+=("create-traffic-mirror-filter-rule"); 
$commands+=("create-traffic-mirror-session"); 
$commands+=("create-traffic-mirror-target"); 
$commands+=("create-transit-gateway"); 
$commands+=("create-transit-gateway-multicast-domain"); 
$commands+=("create-transit-gateway-peering-attachment"); 
$commands+=("create-transit-gateway-route"); 
$commands+=("create-transit-gateway-route-table"); 
$commands+=("create-transit-gateway-vpc-attachment"); 
$commands+=("create-volume"); 
$commands+=("create-vpc"); 
$commands+=("create-vpc-endpoint"); 
$commands+=("create-vpc-endpoint-connection-notification"); 
$commands+=("create-vpc-endpoint-service-configuration"); 
$commands+=("create-vpc-peering-connection"); 
$commands+=("create-vpn-connection"); 
$commands+=("create-vpn-connection-route"); 
$commands+=("create-vpn-gateway"); 
$commands+=("delete-client-vpn-endpoint"); 
$commands+=("delete-client-vpn-route"); 
$commands+=("delete-customer-gateway"); 
$commands+=("delete-dhcp-options"); 
$commands+=("delete-egress-only-internet-gateway"); 
$commands+=("delete-fleets"); 
$commands+=("delete-flow-logs"); 
$commands+=("delete-fpga-image"); 
$commands+=("delete-internet-gateway"); 
$commands+=("delete-key-pair"); 
$commands+=("delete-launch-template"); 
$commands+=("delete-launch-template-versions"); 
$commands+=("delete-local-gateway-route"); 
$commands+=("delete-local-gateway-route-table-vpc-association"); 
$commands+=("delete-nat-gateway"); 
$commands+=("delete-network-acl"); 
$commands+=("delete-network-acl-entry"); 
$commands+=("delete-network-interface"); 
$commands+=("delete-network-interface-permission"); 
$commands+=("delete-placement-group"); 
$commands+=("delete-queued-reserved-instances"); 
$commands+=("delete-route"); 
$commands+=("delete-route-table"); 
$commands+=("delete-security-group"); 
$commands+=("delete-snapshot"); 
$commands+=("delete-spot-datafeed-subscription"); 
$commands+=("delete-subnet"); 
$commands+=("delete-tags"); 
$commands+=("delete-traffic-mirror-filter"); 
$commands+=("delete-traffic-mirror-filter-rule"); 
$commands+=("delete-traffic-mirror-session"); 
$commands+=("delete-traffic-mirror-target"); 
$commands+=("delete-transit-gateway"); 
$commands+=("delete-transit-gateway-multicast-domain"); 
$commands+=("delete-transit-gateway-peering-attachment"); 
$commands+=("delete-transit-gateway-route"); 
$commands+=("delete-transit-gateway-route-table"); 
$commands+=("delete-transit-gateway-vpc-attachment"); 
$commands+=("delete-volume"); 
$commands+=("delete-vpc"); 
$commands+=("delete-vpc-endpoint-connection-notifications"); 
$commands+=("delete-vpc-endpoint-service-configurations"); 
$commands+=("delete-vpc-endpoints"); 
$commands+=("delete-vpc-peering-connection"); 
$commands+=("delete-vpn-connection"); 
$commands+=("delete-vpn-connection-route"); 
$commands+=("delete-vpn-gateway"); 
$commands+=("deprovision-byoip-cidr"); 
$commands+=("deregister-image"); 
$commands+=("deregister-instance-event-notification-attributes"); 
$commands+=("deregister-transit-gateway-multicast-group-members"); 
$commands+=("deregister-transit-gateway-multicast-group-sources"); 
$commands+=("describe-account-attributes"); 
$commands+=("describe-addresses"); 
$commands+=("describe-aggregate-id-format"); 
$commands+=("describe-availability-zones"); 
$commands+=("describe-bundle-tasks"); 
$commands+=("describe-byoip-cidrs"); 
$commands+=("describe-capacity-reservations"); 
$commands+=("describe-classic-link-instances"); 
$commands+=("describe-client-vpn-authorization-rules"); 
$commands+=("describe-client-vpn-connections"); 
$commands+=("describe-client-vpn-endpoints"); 
$commands+=("describe-client-vpn-routes"); 
$commands+=("describe-client-vpn-target-networks"); 
$commands+=("describe-coip-pools"); 
$commands+=("describe-conversion-tasks"); 
$commands+=("describe-customer-gateways"); 
$commands+=("describe-dhcp-options"); 
$commands+=("describe-egress-only-internet-gateways"); 
$commands+=("describe-elastic-gpus"); 
$commands+=("describe-export-image-tasks"); 
$commands+=("describe-export-tasks"); 
$commands+=("describe-fast-snapshot-restores"); 
$commands+=("describe-fleet-history"); 
$commands+=("describe-fleet-instances"); 
$commands+=("describe-fleets"); 
$commands+=("describe-flow-logs"); 
$commands+=("describe-fpga-image-attribute"); 
$commands+=("describe-fpga-images"); 
$commands+=("describe-host-reservation-offerings"); 
$commands+=("describe-host-reservations"); 
$commands+=("describe-hosts"); 
$commands+=("describe-iam-instance-profile-associations"); 
$commands+=("describe-id-format"); 
$commands+=("describe-identity-id-format"); 
$commands+=("describe-image-attribute"); 
$commands+=("describe-images"); 
$commands+=("describe-import-image-tasks"); 
$commands+=("describe-import-snapshot-tasks"); 
$commands+=("describe-instance-attribute"); 
$commands+=("describe-instance-credit-specifications"); 
$commands+=("describe-instance-event-notification-attributes"); 
$commands+=("describe-instance-status"); 
$commands+=("describe-instance-type-offerings"); 
$commands+=("describe-instance-types"); 
$commands+=("describe-instances"); 
$commands+=("describe-internet-gateways"); 
$commands+=("describe-ipv6-pools"); 
$commands+=("describe-key-pairs"); 
$commands+=("describe-launch-template-versions"); 
$commands+=("describe-launch-templates"); 
$commands+=("describe-local-gateway-route-table-virtual-interface-group-associations"); 
$commands+=("describe-local-gateway-route-table-vpc-associations"); 
$commands+=("describe-local-gateway-route-tables"); 
$commands+=("describe-local-gateway-virtual-interface-groups"); 
$commands+=("describe-local-gateway-virtual-interfaces"); 
$commands+=("describe-local-gateways"); 
$commands+=("describe-moving-addresses"); 
$commands+=("describe-nat-gateways"); 
$commands+=("describe-network-acls"); 
$commands+=("describe-network-interface-attribute"); 
$commands+=("describe-network-interface-permissions"); 
$commands+=("describe-network-interfaces"); 
$commands+=("describe-placement-groups"); 
$commands+=("describe-prefix-lists"); 
$commands+=("describe-principal-id-format"); 
$commands+=("describe-public-ipv4-pools"); 
$commands+=("describe-regions"); 
$commands+=("describe-reserved-instances"); 
$commands+=("describe-reserved-instances-listings"); 
$commands+=("describe-reserved-instances-modifications"); 
$commands+=("describe-reserved-instances-offerings"); 
$commands+=("describe-route-tables"); 
$commands+=("describe-scheduled-instance-availability"); 
$commands+=("describe-scheduled-instances"); 
$commands+=("describe-security-group-references"); 
$commands+=("describe-security-groups"); 
$commands+=("describe-snapshot-attribute"); 
$commands+=("describe-snapshots"); 
$commands+=("describe-spot-datafeed-subscription"); 
$commands+=("describe-spot-fleet-instances"); 
$commands+=("describe-spot-fleet-request-history"); 
$commands+=("describe-spot-fleet-requests"); 
$commands+=("describe-spot-instance-requests"); 
$commands+=("describe-spot-price-history"); 
$commands+=("describe-stale-security-groups"); 
$commands+=("describe-subnets"); 
$commands+=("describe-tags"); 
$commands+=("describe-traffic-mirror-filters"); 
$commands+=("describe-traffic-mirror-sessions"); 
$commands+=("describe-traffic-mirror-targets"); 
$commands+=("describe-transit-gateway-attachments"); 
$commands+=("describe-transit-gateway-multicast-domains"); 
$commands+=("describe-transit-gateway-peering-attachments"); 
$commands+=("describe-transit-gateway-route-tables"); 
$commands+=("describe-transit-gateway-vpc-attachments"); 
$commands+=("describe-transit-gateways"); 
$commands+=("describe-volume-attribute"); 
$commands+=("describe-volume-status"); 
$commands+=("describe-volumes"); 
$commands+=("describe-volumes-modifications"); 
$commands+=("describe-vpc-attribute"); 
$commands+=("describe-vpc-classic-link"); 
$commands+=("describe-vpc-classic-link-dns-support"); 
$commands+=("describe-vpc-endpoint-connection-notifications"); 
$commands+=("describe-vpc-endpoint-connections"); 
$commands+=("describe-vpc-endpoint-service-configurations"); 
$commands+=("describe-vpc-endpoint-service-permissions"); 
$commands+=("describe-vpc-endpoint-services"); 
$commands+=("describe-vpc-endpoints"); 
$commands+=("describe-vpc-peering-connections"); 
$commands+=("describe-vpcs"); 
$commands+=("describe-vpn-connections"); 
$commands+=("describe-vpn-gateways"); 
$commands+=("detach-classic-link-vpc"); 
$commands+=("detach-internet-gateway"); 
$commands+=("detach-network-interface"); 
$commands+=("detach-volume"); 
$commands+=("detach-vpn-gateway"); 
$commands+=("disable-ebs-encryption-by-default"); 
$commands+=("disable-fast-snapshot-restores"); 
$commands+=("disable-transit-gateway-route-table-propagation"); 
$commands+=("disable-vgw-route-propagation"); 
$commands+=("disable-vpc-classic-link"); 
$commands+=("disable-vpc-classic-link-dns-support"); 
$commands+=("disassociate-address"); 
$commands+=("disassociate-client-vpn-target-network"); 
$commands+=("disassociate-iam-instance-profile"); 
$commands+=("disassociate-route-table"); 
$commands+=("disassociate-subnet-cidr-block"); 
$commands+=("disassociate-transit-gateway-multicast-domain"); 
$commands+=("disassociate-transit-gateway-route-table"); 
$commands+=("disassociate-vpc-cidr-block"); 
$commands+=("enable-ebs-encryption-by-default"); 
$commands+=("enable-fast-snapshot-restores"); 
$commands+=("enable-transit-gateway-route-table-propagation"); 
$commands+=("enable-vgw-route-propagation"); 
$commands+=("enable-volume-io"); 
$commands+=("enable-vpc-classic-link"); 
$commands+=("enable-vpc-classic-link-dns-support"); 
$commands+=("export-client-vpn-client-certificate-revocation-list"); 
$commands+=("export-client-vpn-client-configuration"); 
$commands+=("export-image"); 
$commands+=("export-transit-gateway-routes"); 
$commands+=("get-associated-ipv6-pool-cidrs"); 
$commands+=("get-capacity-reservation-usage"); 
$commands+=("get-coip-pool-usage"); 
$commands+=("get-console-output"); 
$commands+=("get-console-screenshot"); 
$commands+=("get-default-credit-specification"); 
$commands+=("get-ebs-default-kms-key-id"); 
$commands+=("get-ebs-encryption-by-default"); 
$commands+=("get-host-reservation-purchase-preview"); 
$commands+=("get-launch-template-data"); 
$commands+=("get-password-data"); 
$commands+=("get-reserved-instances-exchange-quote"); 
$commands+=("get-transit-gateway-attachment-propagations"); 
$commands+=("get-transit-gateway-multicast-domain-associations"); 
$commands+=("get-transit-gateway-route-table-associations"); 
$commands+=("get-transit-gateway-route-table-propagations"); 
$commands+=("import-client-vpn-client-certificate-revocation-list"); 
$commands+=("import-image"); 
$commands+=("import-key-pair"); 
$commands+=("import-snapshot"); 
$commands+=("modify-availability-zone-group"); 
$commands+=("modify-capacity-reservation"); 
$commands+=("modify-client-vpn-endpoint"); 
$commands+=("modify-default-credit-specification"); 
$commands+=("modify-ebs-default-kms-key-id"); 
$commands+=("modify-fleet"); 
$commands+=("modify-fpga-image-attribute"); 
$commands+=("modify-hosts"); 
$commands+=("modify-id-format"); 
$commands+=("modify-identity-id-format"); 
$commands+=("modify-image-attribute"); 
$commands+=("modify-instance-attribute"); 
$commands+=("modify-instance-capacity-reservation-attributes"); 
$commands+=("modify-instance-credit-specification"); 
$commands+=("modify-instance-event-start-time"); 
$commands+=("modify-instance-metadata-options"); 
$commands+=("modify-instance-placement"); 
$commands+=("modify-launch-template"); 
$commands+=("modify-network-interface-attribute"); 
$commands+=("modify-reserved-instances"); 
$commands+=("modify-snapshot-attribute"); 
$commands+=("modify-spot-fleet-request"); 
$commands+=("modify-subnet-attribute"); 
$commands+=("modify-traffic-mirror-filter-network-services"); 
$commands+=("modify-traffic-mirror-filter-rule"); 
$commands+=("modify-traffic-mirror-session"); 
$commands+=("modify-transit-gateway-vpc-attachment"); 
$commands+=("modify-volume"); 
$commands+=("modify-volume-attribute"); 
$commands+=("modify-vpc-attribute"); 
$commands+=("modify-vpc-endpoint"); 
$commands+=("modify-vpc-endpoint-connection-notification"); 
$commands+=("modify-vpc-endpoint-service-configuration"); 
$commands+=("modify-vpc-endpoint-service-permissions"); 
$commands+=("modify-vpc-peering-connection-options"); 
$commands+=("modify-vpc-tenancy"); 
$commands+=("modify-vpn-connection"); 
$commands+=("modify-vpn-tunnel-certificate"); 
$commands+=("modify-vpn-tunnel-options"); 
$commands+=("monitor-instances"); 
$commands+=("move-address-to-vpc"); 
$commands+=("provision-byoip-cidr"); 
$commands+=("purchase-host-reservation"); 
$commands+=("purchase-reserved-instances-offering"); 
$commands+=("purchase-scheduled-instances"); 
$commands+=("reboot-instances"); 
$commands+=("register-image"); 
$commands+=("register-instance-event-notification-attributes"); 
$commands+=("register-transit-gateway-multicast-group-members"); 
$commands+=("register-transit-gateway-multicast-group-sources"); 
$commands+=("reject-transit-gateway-peering-attachment"); 
$commands+=("reject-transit-gateway-vpc-attachment"); 
$commands+=("reject-vpc-endpoint-connections"); 
$commands+=("reject-vpc-peering-connection"); 
$commands+=("release-address"); 
$commands+=("release-hosts"); 
$commands+=("replace-iam-instance-profile-association"); 
$commands+=("replace-network-acl-association"); 
$commands+=("replace-network-acl-entry"); 
$commands+=("replace-route"); 
$commands+=("replace-route-table-association"); 
$commands+=("replace-transit-gateway-route"); 
$commands+=("report-instance-status"); 
$commands+=("request-spot-fleet"); 
$commands+=("request-spot-instances"); 
$commands+=("reset-ebs-default-kms-key-id"); 
$commands+=("reset-fpga-image-attribute"); 
$commands+=("reset-image-attribute"); 
$commands+=("reset-instance-attribute"); 
$commands+=("reset-network-interface-attribute"); 
$commands+=("reset-snapshot-attribute"); 
$commands+=("restore-address-to-classic"); 
$commands+=("revoke-client-vpn-ingress"); 
$commands+=("revoke-security-group-egress"); 
$commands+=("revoke-security-group-ingress"); 
$commands+=("run-instances"); 
$commands+=("run-scheduled-instances"); 
$commands+=("search-local-gateway-routes"); 
$commands+=("search-transit-gateway-multicast-groups"); 
$commands+=("search-transit-gateway-routes"); 
$commands+=("send-diagnostic-interrupt"); 
$commands+=("start-instances"); 
$commands+=("start-vpc-endpoint-service-private-dns-verification"); 
$commands+=("stop-instances"); 
$commands+=("terminate-client-vpn-connections"); 
$commands+=("terminate-instances"); 
$commands+=("unassign-ipv6-addresses"); 
$commands+=("unassign-private-ip-addresses"); 
$commands+=("unmonitor-instances"); 
$commands+=("update-security-group-rule-descriptions-egress"); 
$commands+=("update-security-group-rule-descriptions-ingress"); 
$commands+=("wait"); 
$commands+=("withdraw-byoip-cidr");

return $commands;
}

 function Get-ec2-accept-reserved-instances-exchange-quote {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--reserved-instance-ids"); 
$flags+=("--target-configurations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-accept-transit-gateway-peering-attachment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-attachment-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-accept-transit-gateway-vpc-attachment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-attachment-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-accept-vpc-endpoint-connections {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--service-id"); 
$flags+=("--vpc-endpoint-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-accept-vpc-peering-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--vpc-peering-connection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-advertise-byoip-cidr {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cidr"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-allocate-address {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--address"); 
$flags+=("--public-ipv"); 
$flags+=("--network-border-group"); 
$flags+=("--customer-owned-ipv"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-allocate-hosts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-placement"); 
$flags+=("--availability-zone"); 
$flags+=("--client-token"); 
$flags+=("--instance-type"); 
$flags+=("--instance-family"); 
$flags+=("--quantity"); 
$flags+=("--tag-specifications"); 
$flags+=("--host-recovery"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-apply-security-groups-to-client-vpn-target-network {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-vpn-endpoint-id"); 
$flags+=("--vpc-id"); 
$flags+=("--security-group-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-assign-ipv6-addresses {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ipv"); 
$flags+=("--ipv"); 
$flags+=("--network-interface-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-assign-private-ip-addresses {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--allow-reassignment"); 
$flags+=("--no-allow-reassignment"); 
$flags+=("--network-interface-id"); 
$flags+=("--private-ip-addresses"); 
$flags+=("--secondary-private-ip-address-count"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-associate-address {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--allocation-id"); 
$flags+=("--instance-id"); 
$flags+=("--public-ip"); 
$flags+=("--allow-reassociation"); 
$flags+=("--no-allow-reassociation"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--network-interface-id"); 
$flags+=("--private-ip-address"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-associate-client-vpn-target-network {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-vpn-endpoint-id"); 
$flags+=("--subnet-id"); 
$flags+=("--client-token"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-associate-dhcp-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dhcp-options-id"); 
$flags+=("--vpc-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-associate-iam-instance-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--iam-instance-profile"); 
$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-associate-route-table {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--route-table-id"); 
$flags+=("--subnet-id"); 
$flags+=("--gateway-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-associate-subnet-cidr-block {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ipv"); 
$flags+=("--subnet-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-associate-transit-gateway-multicast-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-multicast-domain-id"); 
$flags+=("--transit-gateway-attachment-id"); 
$flags+=("--subnet-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-associate-transit-gateway-route-table {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-route-table-id"); 
$flags+=("--transit-gateway-attachment-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-associate-vpc-cidr-block {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--amazon-provided-ipv"); 
$flags+=("--no-amazon-provided-ipv"); 
$flags+=("--cidr-block"); 
$flags+=("--vpc-id"); 
$flags+=("--ipv"); 
$flags+=("--ipv"); 
$flags+=("--ipv"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-attach-classic-link-vpc {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--groups"); 
$flags+=("--instance-id"); 
$flags+=("--vpc-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-attach-internet-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--internet-gateway-id"); 
$flags+=("--vpc-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-attach-network-interface {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-index"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--instance-id"); 
$flags+=("--network-interface-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-attach-volume {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device"); 
$flags+=("--instance-id"); 
$flags+=("--volume-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-attach-vpn-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vpc-id"); 
$flags+=("--vpn-gateway-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-authorize-client-vpn-ingress {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-vpn-endpoint-id"); 
$flags+=("--target-network-cidr"); 
$flags+=("--access-group-id"); 
$flags+=("--authorize-all-groups"); 
$flags+=("--no-authorize-all-groups"); 
$flags+=("--description"); 
$flags+=("--client-token"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-authorize-security-group-egress {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--group-id"); 
$flags+=("--ip-permissions"); 
$flags+=("--protocol"); 
$flags+=("--port"); 
$flags+=("--cidr"); 
$flags+=("--source-group"); 
$flags+=("--group-owner"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-authorize-security-group-ingress {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-id"); 
$flags+=("--group-name"); 
$flags+=("--ip-permissions"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--protocol"); 
$flags+=("--port"); 
$flags+=("--cidr"); 
$flags+=("--source-group"); 
$flags+=("--group-owner"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-bundle-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--storage"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--bucket"); 
$flags+=("--prefix"); 
$flags+=("--owner-akid"); 
$flags+=("--owner-sak"); 
$flags+=("--policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-cancel-bundle-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bundle-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-cancel-capacity-reservation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--capacity-reservation-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-cancel-conversion-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--conversion-task-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--reason-message"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-cancel-export-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--export-task-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-cancel-import-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cancel-reason"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--import-task-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-cancel-reserved-instances-listing {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--reserved-instances-listing-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-cancel-spot-fleet-requests {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--spot-fleet-request-ids"); 
$flags+=("--terminate-instances"); 
$flags+=("--no-terminate-instances"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-cancel-spot-instance-requests {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--spot-instance-request-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-confirm-product-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--product-code"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-copy-fpga-image {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--source-fpga-image-id"); 
$flags+=("--description"); 
$flags+=("--name"); 
$flags+=("--source-region"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-copy-image {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-token"); 
$flags+=("--description"); 
$flags+=("--encrypted"); 
$flags+=("--no-encrypted"); 
$flags+=("--kms-key-id"); 
$flags+=("--name"); 
$flags+=("--source-image-id"); 
$flags+=("--source-region"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-copy-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--destination-region"); 
$flags+=("--encrypted"); 
$flags+=("--no-encrypted"); 
$flags+=("--kms-key-id"); 
$flags+=("--presigned-url"); 
$flags+=("--source-region"); 
$flags+=("--source-snapshot-id"); 
$flags+=("--tag-specifications"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-capacity-reservation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-token"); 
$flags+=("--instance-type"); 
$flags+=("--instance-platform"); 
$flags+=("--availability-zone"); 
$flags+=("--availability-zone-id"); 
$flags+=("--tenancy"); 
$flags+=("--instance-count"); 
$flags+=("--ebs-optimized"); 
$flags+=("--no-ebs-optimized"); 
$flags+=("--ephemeral-storage"); 
$flags+=("--no-ephemeral-storage"); 
$flags+=("--end-date"); 
$flags+=("--end-date-type"); 
$flags+=("--instance-match-criteria"); 
$flags+=("--tag-specifications"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-client-vpn-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-cidr-block"); 
$flags+=("--server-certificate-arn"); 
$flags+=("--authentication-options"); 
$flags+=("--connection-log-options"); 
$flags+=("--dns-servers"); 
$flags+=("--transport-protocol"); 
$flags+=("--vpn-port"); 
$flags+=("--description"); 
$flags+=("--split-tunnel"); 
$flags+=("--no-split-tunnel"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--client-token"); 
$flags+=("--tag-specifications"); 
$flags+=("--security-group-ids"); 
$flags+=("--vpc-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-client-vpn-route {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-vpn-endpoint-id"); 
$flags+=("--destination-cidr-block"); 
$flags+=("--target-vpc-subnet-id"); 
$flags+=("--description"); 
$flags+=("--client-token"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-customer-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bgp-asn"); 
$flags+=("--public-ip"); 
$flags+=("--certificate-arn"); 
$flags+=("--type"); 
$flags+=("--device-name"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-default-subnet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--availability-zone"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-default-vpc {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-dhcp-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dhcp-configurations"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-egress-only-internet-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-token"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--vpc-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-fleet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--client-token"); 
$flags+=("--spot-options"); 
$flags+=("--on-demand-options"); 
$flags+=("--excess-capacity-termination-policy"); 
$flags+=("--launch-template-configs"); 
$flags+=("--target-capacity-specification"); 
$flags+=("--terminate-instances-with-expiration"); 
$flags+=("--no-terminate-instances-with-expiration"); 
$flags+=("--type"); 
$flags+=("--valid-from"); 
$flags+=("--valid-until"); 
$flags+=("--replace-unhealthy-instances"); 
$flags+=("--no-replace-unhealthy-instances"); 
$flags+=("--tag-specifications"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-flow-logs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--client-token"); 
$flags+=("--deliver-logs-permission-arn"); 
$flags+=("--log-group-name"); 
$flags+=("--resource-ids"); 
$flags+=("--resource-type"); 
$flags+=("--traffic-type"); 
$flags+=("--log-destination-type"); 
$flags+=("--log-destination"); 
$flags+=("--log-format"); 
$flags+=("--tag-specifications"); 
$flags+=("--max-aggregation-interval"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-fpga-image {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--input-storage-location"); 
$flags+=("--logs-storage-location"); 
$flags+=("--description"); 
$flags+=("--name"); 
$flags+=("--client-token"); 
$flags+=("--tag-specifications"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-image {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--block-device-mappings"); 
$flags+=("--description"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--instance-id"); 
$flags+=("--name"); 
$flags+=("--no-reboot"); 
$flags+=("--reboot"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-instance-export-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--export-to-s"); 
$flags+=("--instance-id"); 
$flags+=("--target-environment"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-internet-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-key-pair {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-name"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--tag-specifications"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-launch-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--client-token"); 
$flags+=("--launch-template-name"); 
$flags+=("--version-description"); 
$flags+=("--launch-template-data"); 
$flags+=("--tag-specifications"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-launch-template-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--client-token"); 
$flags+=("--launch-template-id"); 
$flags+=("--launch-template-name"); 
$flags+=("--source-version"); 
$flags+=("--version-description"); 
$flags+=("--launch-template-data"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-local-gateway-route {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--destination-cidr-block"); 
$flags+=("--local-gateway-route-table-id"); 
$flags+=("--local-gateway-virtual-interface-group-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-local-gateway-route-table-vpc-association {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--local-gateway-route-table-id"); 
$flags+=("--vpc-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-nat-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--allocation-id"); 
$flags+=("--client-token"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--subnet-id"); 
$flags+=("--tag-specifications"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-network-acl {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--vpc-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-network-acl-entry {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cidr-block"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--egress"); 
$flags+=("--ingress"); 
$flags+=("--icmp-type-code"); 
$flags+=("--ipv"); 
$flags+=("--network-acl-id"); 
$flags+=("--port-range"); 
$flags+=("--protocol"); 
$flags+=("--rule-action"); 
$flags+=("--rule-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-network-interface {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--groups"); 
$flags+=("--ipv"); 
$flags+=("--ipv"); 
$flags+=("--private-ip-address"); 
$flags+=("--private-ip-addresses"); 
$flags+=("--secondary-private-ip-address-count"); 
$flags+=("--interface-type"); 
$flags+=("--subnet-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-network-interface-permission {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--network-interface-id"); 
$flags+=("--aws-account-id"); 
$flags+=("--aws-service"); 
$flags+=("--permission"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-placement-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--group-name"); 
$flags+=("--strategy"); 
$flags+=("--partition-count"); 
$flags+=("--tag-specifications"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-reserved-instances-listing {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-token"); 
$flags+=("--instance-count"); 
$flags+=("--price-schedules"); 
$flags+=("--reserved-instances-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-route {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--destination-cidr-block"); 
$flags+=("--destination-ipv"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--egress-only-internet-gateway-id"); 
$flags+=("--gateway-id"); 
$flags+=("--instance-id"); 
$flags+=("--nat-gateway-id"); 
$flags+=("--transit-gateway-id"); 
$flags+=("--local-gateway-id"); 
$flags+=("--network-interface-id"); 
$flags+=("--route-table-id"); 
$flags+=("--vpc-peering-connection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-route-table {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--vpc-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-security-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--group-name"); 
$flags+=("--vpc-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--volume-id"); 
$flags+=("--tag-specifications"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-snapshots {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--instance-specification"); 
$flags+=("--tag-specifications"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--copy-tags-from-source"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-spot-datafeed-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--prefix"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-subnet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--availability-zone"); 
$flags+=("--availability-zone-id"); 
$flags+=("--cidr-block"); 
$flags+=("--ipv"); 
$flags+=("--outpost-arn"); 
$flags+=("--vpc-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--resources"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-traffic-mirror-filter {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--tag-specifications"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-traffic-mirror-filter-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--traffic-mirror-filter-id"); 
$flags+=("--traffic-direction"); 
$flags+=("--rule-number"); 
$flags+=("--rule-action"); 
$flags+=("--destination-port-range"); 
$flags+=("--source-port-range"); 
$flags+=("--protocol"); 
$flags+=("--destination-cidr-block"); 
$flags+=("--source-cidr-block"); 
$flags+=("--description"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-traffic-mirror-session {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--network-interface-id"); 
$flags+=("--traffic-mirror-target-id"); 
$flags+=("--traffic-mirror-filter-id"); 
$flags+=("--packet-length"); 
$flags+=("--session-number"); 
$flags+=("--virtual-network-id"); 
$flags+=("--description"); 
$flags+=("--tag-specifications"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-traffic-mirror-target {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--network-interface-id"); 
$flags+=("--network-load-balancer-arn"); 
$flags+=("--description"); 
$flags+=("--tag-specifications"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-transit-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--options"); 
$flags+=("--tag-specifications"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-transit-gateway-multicast-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-id"); 
$flags+=("--tag-specifications"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-transit-gateway-peering-attachment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-id"); 
$flags+=("--peer-transit-gateway-id"); 
$flags+=("--peer-account-id"); 
$flags+=("--peer-region"); 
$flags+=("--tag-specifications"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-transit-gateway-route {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--destination-cidr-block"); 
$flags+=("--transit-gateway-route-table-id"); 
$flags+=("--transit-gateway-attachment-id"); 
$flags+=("--blackhole"); 
$flags+=("--no-blackhole"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-transit-gateway-route-table {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-id"); 
$flags+=("--tag-specifications"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-transit-gateway-vpc-attachment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-id"); 
$flags+=("--vpc-id"); 
$flags+=("--subnet-ids"); 
$flags+=("--options"); 
$flags+=("--tag-specifications"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-volume {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--availability-zone"); 
$flags+=("--encrypted"); 
$flags+=("--no-encrypted"); 
$flags+=("--iops"); 
$flags+=("--kms-key-id"); 
$flags+=("--outpost-arn"); 
$flags+=("--size"); 
$flags+=("--snapshot-id"); 
$flags+=("--volume-type"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--tag-specifications"); 
$flags+=("--multi-attach-enabled"); 
$flags+=("--no-multi-attach-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-vpc {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cidr-block"); 
$flags+=("--amazon-provided-ipv"); 
$flags+=("--no-amazon-provided-ipv"); 
$flags+=("--ipv"); 
$flags+=("--ipv"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--instance-tenancy"); 
$flags+=("--ipv"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-vpc-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--vpc-endpoint-type"); 
$flags+=("--vpc-id"); 
$flags+=("--service-name"); 
$flags+=("--policy-document"); 
$flags+=("--route-table-ids"); 
$flags+=("--subnet-ids"); 
$flags+=("--security-group-ids"); 
$flags+=("--client-token"); 
$flags+=("--private-dns-enabled"); 
$flags+=("--no-private-dns-enabled"); 
$flags+=("--tag-specifications"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-vpc-endpoint-connection-notification {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--service-id"); 
$flags+=("--vpc-endpoint-id"); 
$flags+=("--connection-notification-arn"); 
$flags+=("--connection-events"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-vpc-endpoint-service-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--acceptance-required"); 
$flags+=("--no-acceptance-required"); 
$flags+=("--private-dns-name"); 
$flags+=("--network-load-balancer-arns"); 
$flags+=("--client-token"); 
$flags+=("--tag-specifications"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-vpc-peering-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--peer-owner-id"); 
$flags+=("--peer-vpc-id"); 
$flags+=("--vpc-id"); 
$flags+=("--peer-region"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-vpn-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--customer-gateway-id"); 
$flags+=("--type"); 
$flags+=("--vpn-gateway-id"); 
$flags+=("--transit-gateway-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--options"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-vpn-connection-route {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--destination-cidr-block"); 
$flags+=("--vpn-connection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-create-vpn-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--availability-zone"); 
$flags+=("--type"); 
$flags+=("--amazon-side-asn"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-client-vpn-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-vpn-endpoint-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-client-vpn-route {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-vpn-endpoint-id"); 
$flags+=("--target-vpc-subnet-id"); 
$flags+=("--destination-cidr-block"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-customer-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--customer-gateway-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-dhcp-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dhcp-options-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-egress-only-internet-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--egress-only-internet-gateway-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-fleets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--fleet-ids"); 
$flags+=("--terminate-instances"); 
$flags+=("--no-terminate-instances"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-flow-logs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--flow-log-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-fpga-image {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--fpga-image-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-internet-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--internet-gateway-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-key-pair {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-name"); 
$flags+=("--key-pair-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-launch-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--launch-template-id"); 
$flags+=("--launch-template-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-launch-template-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--launch-template-id"); 
$flags+=("--launch-template-name"); 
$flags+=("--versions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-local-gateway-route {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--destination-cidr-block"); 
$flags+=("--local-gateway-route-table-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-local-gateway-route-table-vpc-association {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--local-gateway-route-table-vpc-association-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-nat-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--nat-gateway-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-network-acl {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--network-acl-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-network-acl-entry {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--egress"); 
$flags+=("--ingress"); 
$flags+=("--network-acl-id"); 
$flags+=("--rule-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-network-interface {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--network-interface-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-network-interface-permission {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--network-interface-permission-id"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-placement-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-queued-reserved-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--reserved-instances-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-route {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--destination-cidr-block"); 
$flags+=("--destination-ipv"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--route-table-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-route-table {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--route-table-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-security-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-id"); 
$flags+=("--group-name"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--snapshot-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-spot-datafeed-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-subnet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subnet-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--resources"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-traffic-mirror-filter {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--traffic-mirror-filter-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-traffic-mirror-filter-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--traffic-mirror-filter-rule-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-traffic-mirror-session {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--traffic-mirror-session-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-traffic-mirror-target {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--traffic-mirror-target-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-transit-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-transit-gateway-multicast-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-multicast-domain-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-transit-gateway-peering-attachment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-attachment-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-transit-gateway-route {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-route-table-id"); 
$flags+=("--destination-cidr-block"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-transit-gateway-route-table {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-route-table-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-transit-gateway-vpc-attachment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-attachment-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-volume {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--volume-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-vpc {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vpc-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-vpc-endpoint-connection-notifications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--connection-notification-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-vpc-endpoint-service-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--service-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-vpc-endpoints {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--vpc-endpoint-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-vpc-peering-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--vpc-peering-connection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-vpn-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vpn-connection-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-vpn-connection-route {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--destination-cidr-block"); 
$flags+=("--vpn-connection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-delete-vpn-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vpn-gateway-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-deprovision-byoip-cidr {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cidr"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-deregister-image {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-deregister-instance-event-notification-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--instance-tag-attribute"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-deregister-transit-gateway-multicast-group-members {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-multicast-domain-id"); 
$flags+=("--group-ip-address"); 
$flags+=("--network-interface-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-deregister-transit-gateway-multicast-group-sources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-multicast-domain-id"); 
$flags+=("--group-ip-address"); 
$flags+=("--network-interface-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-account-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--attribute-names"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-addresses {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--public-ips"); 
$flags+=("--allocation-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-aggregate-id-format {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-availability-zones {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--zone-names"); 
$flags+=("--zone-ids"); 
$flags+=("--all-availability-zones"); 
$flags+=("--no-all-availability-zones"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-bundle-tasks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bundle-ids"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-byoip-cidrs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-capacity-reservations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--capacity-reservation-ids"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-classic-link-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--instance-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-client-vpn-authorization-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-vpn-endpoint-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-client-vpn-connections {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-vpn-endpoint-id"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-client-vpn-endpoints {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-vpn-endpoint-ids"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-client-vpn-routes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-vpn-endpoint-id"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-client-vpn-target-networks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-vpn-endpoint-id"); 
$flags+=("--association-ids"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-coip-pools {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pool-ids"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-conversion-tasks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--conversion-task-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-customer-gateways {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--customer-gateway-ids"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-dhcp-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dhcp-options-ids"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-egress-only-internet-gateways {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--egress-only-internet-gateway-ids"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-elastic-gpus {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--elastic-gpu-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--filters"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-export-image-tasks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--filters"); 
$flags+=("--export-image-task-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-export-tasks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--export-task-ids"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-fast-snapshot-restores {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-fleet-history {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--event-type"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--fleet-id"); 
$flags+=("--start-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-fleet-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--fleet-id"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-fleets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--fleet-ids"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-flow-logs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--filter"); 
$flags+=("--flow-log-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-fpga-image-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--fpga-image-id"); 
$flags+=("--attribute"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-fpga-images {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--fpga-image-ids"); 
$flags+=("--owners"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-host-reservation-offerings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--max-duration"); 
$flags+=("--min-duration"); 
$flags+=("--offering-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-host-reservations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--host-reservation-id-set"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-hosts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--host-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-iam-instance-profile-associations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--association-ids"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-id-format {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-identity-id-format {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--principal-arn"); 
$flags+=("--resource"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-image-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--attribute"); 
$flags+=("--image-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-images {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--executable-users"); 
$flags+=("--filters"); 
$flags+=("--image-ids"); 
$flags+=("--owners"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-import-image-tasks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--filters"); 
$flags+=("--import-task-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-import-snapshot-tasks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--filters"); 
$flags+=("--import-task-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-instance-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--attribute"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-instance-credit-specifications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--filters"); 
$flags+=("--instance-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-instance-event-notification-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-instance-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--instance-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--include-all-instances"); 
$flags+=("--no-include-all-instances"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-instance-type-offerings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--location-type"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-instance-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--instance-types"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--instance-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-internet-gateways {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--internet-gateway-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-ipv6-pools {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pool-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-key-pairs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--key-names"); 
$flags+=("--key-pair-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-launch-template-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--launch-template-id"); 
$flags+=("--launch-template-name"); 
$flags+=("--versions"); 
$flags+=("--min-version"); 
$flags+=("--max-version"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-launch-templates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--launch-template-ids"); 
$flags+=("--launch-template-names"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-local-gateway-route-table-virtual-interface-group-associations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--local-gateway-route-table-virtual-interface-group-association-ids"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-local-gateway-route-table-vpc-associations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--local-gateway-route-table-vpc-association-ids"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-local-gateway-route-tables {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--local-gateway-route-table-ids"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-local-gateway-virtual-interface-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--local-gateway-virtual-interface-group-ids"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-local-gateway-virtual-interfaces {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--local-gateway-virtual-interface-ids"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-local-gateways {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--local-gateway-ids"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-moving-addresses {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--public-ips"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-nat-gateways {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--filter"); 
$flags+=("--nat-gateway-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-network-acls {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--network-acl-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-network-interface-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--attribute"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--network-interface-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-network-interface-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--network-interface-permission-ids"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-network-interfaces {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--network-interface-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-placement-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--group-names"); 
$flags+=("--group-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-prefix-lists {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--filters"); 
$flags+=("--prefix-list-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-principal-id-format {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--resources"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-public-ipv4-pools {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pool-ids"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-regions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--region-names"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--all-regions"); 
$flags+=("--no-all-regions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-reserved-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--offering-class"); 
$flags+=("--reserved-instances-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--offering-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-reserved-instances-listings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--reserved-instances-id"); 
$flags+=("--reserved-instances-listing-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-reserved-instances-modifications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--reserved-instances-modification-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-reserved-instances-offerings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--availability-zone"); 
$flags+=("--filters"); 
$flags+=("--include-marketplace"); 
$flags+=("--no-include-marketplace"); 
$flags+=("--instance-type"); 
$flags+=("--max-duration"); 
$flags+=("--max-instance-count"); 
$flags+=("--min-duration"); 
$flags+=("--offering-class"); 
$flags+=("--product-description"); 
$flags+=("--reserved-instances-offering-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--instance-tenancy"); 
$flags+=("--offering-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-route-tables {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--route-table-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-scheduled-instance-availability {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--filters"); 
$flags+=("--first-slot-start-time-range"); 
$flags+=("--max-slot-duration-in-hours"); 
$flags+=("--min-slot-duration-in-hours"); 
$flags+=("--recurrence"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-scheduled-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--filters"); 
$flags+=("--scheduled-instance-ids"); 
$flags+=("--slot-start-time-range"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-security-group-references {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-security-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--group-ids"); 
$flags+=("--group-names"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-snapshot-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--attribute"); 
$flags+=("--snapshot-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-snapshots {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--owner-ids"); 
$flags+=("--restorable-by-user-ids"); 
$flags+=("--snapshot-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-spot-datafeed-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-spot-fleet-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--spot-fleet-request-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-spot-fleet-request-history {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--event-type"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--spot-fleet-request-id"); 
$flags+=("--start-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-spot-fleet-requests {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--spot-fleet-request-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-spot-instance-requests {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--spot-instance-request-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-spot-price-history {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--availability-zone"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--end-time"); 
$flags+=("--instance-types"); 
$flags+=("--product-descriptions"); 
$flags+=("--start-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-stale-security-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--vpc-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-subnets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--subnet-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-traffic-mirror-filters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--traffic-mirror-filter-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-traffic-mirror-sessions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--traffic-mirror-session-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-traffic-mirror-targets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--traffic-mirror-target-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-transit-gateway-attachments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-attachment-ids"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-transit-gateway-multicast-domains {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-multicast-domain-ids"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-transit-gateway-peering-attachments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-attachment-ids"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-transit-gateway-route-tables {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-route-table-ids"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-transit-gateway-vpc-attachments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-attachment-ids"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-transit-gateways {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-ids"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-volume-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--attribute"); 
$flags+=("--volume-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-volume-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--volume-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-volumes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--volume-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-volumes-modifications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--volume-ids"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-vpc-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--attribute"); 
$flags+=("--vpc-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-vpc-classic-link {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--vpc-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-vpc-classic-link-dns-support {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vpc-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-vpc-endpoint-connection-notifications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--connection-notification-id"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-vpc-endpoint-connections {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-vpc-endpoint-service-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--service-ids"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-vpc-endpoint-service-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--service-id"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-vpc-endpoint-services {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--service-names"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-vpc-endpoints {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--vpc-endpoint-ids"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-vpc-peering-connections {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--vpc-peering-connection-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-vpcs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--vpc-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-vpn-connections {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--vpn-connection-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-describe-vpn-gateways {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--vpn-gateway-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-detach-classic-link-vpc {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--instance-id"); 
$flags+=("--vpc-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-detach-internet-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--internet-gateway-id"); 
$flags+=("--vpc-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-detach-network-interface {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--attachment-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-detach-volume {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--instance-id"); 
$flags+=("--volume-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-detach-vpn-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vpc-id"); 
$flags+=("--vpn-gateway-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-disable-ebs-encryption-by-default {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-disable-fast-snapshot-restores {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--availability-zones"); 
$flags+=("--source-snapshot-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-disable-transit-gateway-route-table-propagation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-route-table-id"); 
$flags+=("--transit-gateway-attachment-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-disable-vgw-route-propagation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-id"); 
$flags+=("--route-table-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-disable-vpc-classic-link {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--vpc-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-disable-vpc-classic-link-dns-support {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vpc-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-disassociate-address {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--association-id"); 
$flags+=("--public-ip"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-disassociate-client-vpn-target-network {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-vpn-endpoint-id"); 
$flags+=("--association-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-disassociate-iam-instance-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--association-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-disassociate-route-table {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--association-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-disassociate-subnet-cidr-block {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--association-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-disassociate-transit-gateway-multicast-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-multicast-domain-id"); 
$flags+=("--transit-gateway-attachment-id"); 
$flags+=("--subnet-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-disassociate-transit-gateway-route-table {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-route-table-id"); 
$flags+=("--transit-gateway-attachment-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-disassociate-vpc-cidr-block {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--association-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-enable-ebs-encryption-by-default {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-enable-fast-snapshot-restores {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--availability-zones"); 
$flags+=("--source-snapshot-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-enable-transit-gateway-route-table-propagation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-route-table-id"); 
$flags+=("--transit-gateway-attachment-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-enable-vgw-route-propagation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-id"); 
$flags+=("--route-table-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-enable-volume-io {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--volume-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-enable-vpc-classic-link {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--vpc-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-enable-vpc-classic-link-dns-support {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vpc-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-export-client-vpn-client-certificate-revocation-list {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-vpn-endpoint-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-export-client-vpn-client-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-vpn-endpoint-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-export-image {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-token"); 
$flags+=("--description"); 
$flags+=("--disk-image-format"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--image-id"); 
$flags+=("--s"); 
$flags+=("--role-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-export-transit-gateway-routes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-route-table-id"); 
$flags+=("--filters"); 
$flags+=("--s"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-get-associated-ipv6-pool-cidrs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pool-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-get-capacity-reservation-usage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--capacity-reservation-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-get-coip-pool-usage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pool-id"); 
$flags+=("--filters"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-get-console-output {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--latest"); 
$flags+=("--no-latest"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-get-console-screenshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--instance-id"); 
$flags+=("--wake-up"); 
$flags+=("--no-wake-up"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-get-default-credit-specification {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--instance-family"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-get-ebs-default-kms-key-id {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-get-ebs-encryption-by-default {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-get-host-reservation-purchase-preview {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--host-id-set"); 
$flags+=("--offering-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-get-launch-template-data {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-get-password-data {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--priv-launch-key"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-get-reserved-instances-exchange-quote {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--reserved-instance-ids"); 
$flags+=("--target-configurations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-get-transit-gateway-attachment-propagations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-attachment-id"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-get-transit-gateway-multicast-domain-associations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-multicast-domain-id"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-get-transit-gateway-route-table-associations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-route-table-id"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-get-transit-gateway-route-table-propagations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-route-table-id"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-import-client-vpn-client-certificate-revocation-list {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-vpn-endpoint-id"); 
$flags+=("--certificate-revocation-list"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-import-image {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--architecture"); 
$flags+=("--client-data"); 
$flags+=("--client-token"); 
$flags+=("--description"); 
$flags+=("--disk-containers"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--encrypted"); 
$flags+=("--no-encrypted"); 
$flags+=("--hypervisor"); 
$flags+=("--kms-key-id"); 
$flags+=("--license-type"); 
$flags+=("--platform"); 
$flags+=("--role-name"); 
$flags+=("--license-specifications"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-import-key-pair {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--key-name"); 
$flags+=("--public-key-material"); 
$flags+=("--tag-specifications"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-import-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-data"); 
$flags+=("--client-token"); 
$flags+=("--description"); 
$flags+=("--disk-container"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--encrypted"); 
$flags+=("--no-encrypted"); 
$flags+=("--kms-key-id"); 
$flags+=("--role-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-availability-zone-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--opt-in-status"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-capacity-reservation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--capacity-reservation-id"); 
$flags+=("--instance-count"); 
$flags+=("--end-date"); 
$flags+=("--end-date-type"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-client-vpn-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-vpn-endpoint-id"); 
$flags+=("--server-certificate-arn"); 
$flags+=("--connection-log-options"); 
$flags+=("--dns-servers"); 
$flags+=("--vpn-port"); 
$flags+=("--description"); 
$flags+=("--split-tunnel"); 
$flags+=("--no-split-tunnel"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--security-group-ids"); 
$flags+=("--vpc-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-default-credit-specification {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--instance-family"); 
$flags+=("--cpu-credits"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-ebs-default-kms-key-id {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--kms-key-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-fleet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--excess-capacity-termination-policy"); 
$flags+=("--fleet-id"); 
$flags+=("--target-capacity-specification"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-fpga-image-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--fpga-image-id"); 
$flags+=("--attribute"); 
$flags+=("--operation-type"); 
$flags+=("--user-ids"); 
$flags+=("--user-groups"); 
$flags+=("--product-codes"); 
$flags+=("--load-permission"); 
$flags+=("--description"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-hosts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-placement"); 
$flags+=("--host-ids"); 
$flags+=("--host-recovery"); 
$flags+=("--instance-type"); 
$flags+=("--instance-family"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-id-format {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource"); 
$flags+=("--use-long-ids"); 
$flags+=("--no-use-long-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-identity-id-format {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--principal-arn"); 
$flags+=("--resource"); 
$flags+=("--use-long-ids"); 
$flags+=("--no-use-long-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-image-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--attribute"); 
$flags+=("--description"); 
$flags+=("--image-id"); 
$flags+=("--launch-permission"); 
$flags+=("--operation-type"); 
$flags+=("--product-codes"); 
$flags+=("--user-groups"); 
$flags+=("--user-ids"); 
$flags+=("--value"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-instance-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-dest-check"); 
$flags+=("--no-source-dest-check"); 
$flags+=("--attribute"); 
$flags+=("--block-device-mappings"); 
$flags+=("--disable-api-termination"); 
$flags+=("--no-disable-api-termination"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--ebs-optimized"); 
$flags+=("--no-ebs-optimized"); 
$flags+=("--ena-support"); 
$flags+=("--no-ena-support"); 
$flags+=("--groups"); 
$flags+=("--instance-id"); 
$flags+=("--instance-initiated-shutdown-behavior"); 
$flags+=("--instance-type"); 
$flags+=("--kernel"); 
$flags+=("--ramdisk"); 
$flags+=("--sriov-net-support"); 
$flags+=("--user-data"); 
$flags+=("--value"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-instance-capacity-reservation-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--capacity-reservation-specification"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-instance-credit-specification {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--client-token"); 
$flags+=("--instance-credit-specifications"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-instance-event-start-time {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--instance-id"); 
$flags+=("--instance-event-id"); 
$flags+=("--not-before"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-instance-metadata-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--http-tokens"); 
$flags+=("--http-put-response-hop-limit"); 
$flags+=("--http-endpoint"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-instance-placement {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--affinity"); 
$flags+=("--group-name"); 
$flags+=("--host-id"); 
$flags+=("--instance-id"); 
$flags+=("--tenancy"); 
$flags+=("--partition-number"); 
$flags+=("--host-resource-group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-launch-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--client-token"); 
$flags+=("--launch-template-id"); 
$flags+=("--launch-template-name"); 
$flags+=("--default-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-network-interface-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--attachment"); 
$flags+=("--description"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--groups"); 
$flags+=("--network-interface-id"); 
$flags+=("--source-dest-check"); 
$flags+=("--no-source-dest-check"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-reserved-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--reserved-instances-ids"); 
$flags+=("--client-token"); 
$flags+=("--target-configurations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-snapshot-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--attribute"); 
$flags+=("--create-volume-permission"); 
$flags+=("--group-names"); 
$flags+=("--operation-type"); 
$flags+=("--snapshot-id"); 
$flags+=("--user-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-spot-fleet-request {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--excess-capacity-termination-policy"); 
$flags+=("--spot-fleet-request-id"); 
$flags+=("--target-capacity"); 
$flags+=("--on-demand-target-capacity"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-subnet-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assign-ipv"); 
$flags+=("--no-assign-ipv"); 
$flags+=("--map-public-ip-on-launch"); 
$flags+=("--no-map-public-ip-on-launch"); 
$flags+=("--subnet-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-traffic-mirror-filter-network-services {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--traffic-mirror-filter-id"); 
$flags+=("--add-network-services"); 
$flags+=("--remove-network-services"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-traffic-mirror-filter-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--traffic-mirror-filter-rule-id"); 
$flags+=("--traffic-direction"); 
$flags+=("--rule-number"); 
$flags+=("--rule-action"); 
$flags+=("--destination-port-range"); 
$flags+=("--source-port-range"); 
$flags+=("--protocol"); 
$flags+=("--destination-cidr-block"); 
$flags+=("--source-cidr-block"); 
$flags+=("--description"); 
$flags+=("--remove-fields"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-traffic-mirror-session {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--traffic-mirror-session-id"); 
$flags+=("--traffic-mirror-target-id"); 
$flags+=("--traffic-mirror-filter-id"); 
$flags+=("--packet-length"); 
$flags+=("--session-number"); 
$flags+=("--virtual-network-id"); 
$flags+=("--description"); 
$flags+=("--remove-fields"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-transit-gateway-vpc-attachment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-attachment-id"); 
$flags+=("--add-subnet-ids"); 
$flags+=("--remove-subnet-ids"); 
$flags+=("--options"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-volume {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--volume-id"); 
$flags+=("--size"); 
$flags+=("--volume-type"); 
$flags+=("--iops"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-volume-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-enable-io"); 
$flags+=("--no-auto-enable-io"); 
$flags+=("--volume-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-vpc-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--enable-dns-hostnames"); 
$flags+=("--no-enable-dns-hostnames"); 
$flags+=("--enable-dns-support"); 
$flags+=("--no-enable-dns-support"); 
$flags+=("--vpc-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-vpc-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--vpc-endpoint-id"); 
$flags+=("--reset-policy"); 
$flags+=("--no-reset-policy"); 
$flags+=("--policy-document"); 
$flags+=("--add-route-table-ids"); 
$flags+=("--remove-route-table-ids"); 
$flags+=("--add-subnet-ids"); 
$flags+=("--remove-subnet-ids"); 
$flags+=("--add-security-group-ids"); 
$flags+=("--remove-security-group-ids"); 
$flags+=("--private-dns-enabled"); 
$flags+=("--no-private-dns-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-vpc-endpoint-connection-notification {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--connection-notification-id"); 
$flags+=("--connection-notification-arn"); 
$flags+=("--connection-events"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-vpc-endpoint-service-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--service-id"); 
$flags+=("--private-dns-name"); 
$flags+=("--remove-private-dns-name"); 
$flags+=("--no-remove-private-dns-name"); 
$flags+=("--acceptance-required"); 
$flags+=("--no-acceptance-required"); 
$flags+=("--add-network-load-balancer-arns"); 
$flags+=("--remove-network-load-balancer-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-vpc-endpoint-service-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--service-id"); 
$flags+=("--add-allowed-principals"); 
$flags+=("--remove-allowed-principals"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-vpc-peering-connection-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accepter-peering-connection-options"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--requester-peering-connection-options"); 
$flags+=("--vpc-peering-connection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-vpc-tenancy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vpc-id"); 
$flags+=("--instance-tenancy"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-vpn-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vpn-connection-id"); 
$flags+=("--transit-gateway-id"); 
$flags+=("--customer-gateway-id"); 
$flags+=("--vpn-gateway-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-vpn-tunnel-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vpn-connection-id"); 
$flags+=("--vpn-tunnel-outside-ip-address"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-modify-vpn-tunnel-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vpn-connection-id"); 
$flags+=("--vpn-tunnel-outside-ip-address"); 
$flags+=("--tunnel-options"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-monitor-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-move-address-to-vpc {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--public-ip"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-provision-byoip-cidr {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cidr"); 
$flags+=("--cidr-authorization-context"); 
$flags+=("--publicly-advertisable"); 
$flags+=("--no-publicly-advertisable"); 
$flags+=("--description"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-purchase-host-reservation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-token"); 
$flags+=("--currency-code"); 
$flags+=("--host-id-set"); 
$flags+=("--limit-price"); 
$flags+=("--offering-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-purchase-reserved-instances-offering {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-count"); 
$flags+=("--reserved-instances-offering-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--limit-price"); 
$flags+=("--purchase-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-purchase-scheduled-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-token"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--purchase-requests"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-reboot-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-register-image {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image-location"); 
$flags+=("--architecture"); 
$flags+=("--block-device-mappings"); 
$flags+=("--description"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--ena-support"); 
$flags+=("--no-ena-support"); 
$flags+=("--kernel-id"); 
$flags+=("--name"); 
$flags+=("--billing-products"); 
$flags+=("--ramdisk-id"); 
$flags+=("--root-device-name"); 
$flags+=("--sriov-net-support"); 
$flags+=("--virtualization-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-register-instance-event-notification-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--instance-tag-attribute"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-register-transit-gateway-multicast-group-members {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-multicast-domain-id"); 
$flags+=("--group-ip-address"); 
$flags+=("--network-interface-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-register-transit-gateway-multicast-group-sources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-multicast-domain-id"); 
$flags+=("--group-ip-address"); 
$flags+=("--network-interface-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-reject-transit-gateway-peering-attachment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-attachment-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-reject-transit-gateway-vpc-attachment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-attachment-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-reject-vpc-endpoint-connections {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--service-id"); 
$flags+=("--vpc-endpoint-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-reject-vpc-peering-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--vpc-peering-connection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-release-address {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--allocation-id"); 
$flags+=("--public-ip"); 
$flags+=("--network-border-group"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-release-hosts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--host-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-replace-iam-instance-profile-association {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--iam-instance-profile"); 
$flags+=("--association-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-replace-network-acl-association {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--association-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--network-acl-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-replace-network-acl-entry {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cidr-block"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--egress"); 
$flags+=("--ingress"); 
$flags+=("--icmp-type-code"); 
$flags+=("--ipv"); 
$flags+=("--network-acl-id"); 
$flags+=("--port-range"); 
$flags+=("--protocol"); 
$flags+=("--rule-action"); 
$flags+=("--rule-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-replace-route {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--destination-cidr-block"); 
$flags+=("--destination-ipv"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--egress-only-internet-gateway-id"); 
$flags+=("--gateway-id"); 
$flags+=("--instance-id"); 
$flags+=("--local-target"); 
$flags+=("--no-local-target"); 
$flags+=("--nat-gateway-id"); 
$flags+=("--transit-gateway-id"); 
$flags+=("--local-gateway-id"); 
$flags+=("--network-interface-id"); 
$flags+=("--route-table-id"); 
$flags+=("--vpc-peering-connection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-replace-route-table-association {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--association-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--route-table-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-replace-transit-gateway-route {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--destination-cidr-block"); 
$flags+=("--transit-gateway-route-table-id"); 
$flags+=("--transit-gateway-attachment-id"); 
$flags+=("--blackhole"); 
$flags+=("--no-blackhole"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-report-instance-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--end-time"); 
$flags+=("--instances"); 
$flags+=("--reason-codes"); 
$flags+=("--start-time"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-request-spot-fleet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--spot-fleet-request-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-request-spot-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--availability-zone-group"); 
$flags+=("--block-duration-minutes"); 
$flags+=("--client-token"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--instance-count"); 
$flags+=("--launch-group"); 
$flags+=("--launch-specification"); 
$flags+=("--spot-price"); 
$flags+=("--type"); 
$flags+=("--valid-from"); 
$flags+=("--valid-until"); 
$flags+=("--instance-interruption-behavior"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-reset-ebs-default-kms-key-id {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-reset-fpga-image-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--fpga-image-id"); 
$flags+=("--attribute"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-reset-image-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--attribute"); 
$flags+=("--image-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-reset-instance-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--attribute"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-reset-network-interface-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--network-interface-id"); 
$flags+=("--source-dest-check"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-reset-snapshot-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--attribute"); 
$flags+=("--snapshot-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-restore-address-to-classic {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--public-ip"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-revoke-client-vpn-ingress {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-vpn-endpoint-id"); 
$flags+=("--target-network-cidr"); 
$flags+=("--access-group-id"); 
$flags+=("--revoke-all-groups"); 
$flags+=("--no-revoke-all-groups"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-revoke-security-group-egress {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--group-id"); 
$flags+=("--ip-permissions"); 
$flags+=("--protocol"); 
$flags+=("--port"); 
$flags+=("--cidr"); 
$flags+=("--source-group"); 
$flags+=("--group-owner"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-revoke-security-group-ingress {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-id"); 
$flags+=("--group-name"); 
$flags+=("--ip-permissions"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--protocol"); 
$flags+=("--port"); 
$flags+=("--cidr"); 
$flags+=("--source-group"); 
$flags+=("--group-owner"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-run-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--block-device-mappings"); 
$flags+=("--image-id"); 
$flags+=("--instance-type"); 
$flags+=("--ipv"); 
$flags+=("--ipv"); 
$flags+=("--kernel-id"); 
$flags+=("--key-name"); 
$flags+=("--monitoring"); 
$flags+=("--placement"); 
$flags+=("--ramdisk-id"); 
$flags+=("--security-group-ids"); 
$flags+=("--security-groups"); 
$flags+=("--subnet-id"); 
$flags+=("--user-data"); 
$flags+=("--additional-info"); 
$flags+=("--client-token"); 
$flags+=("--disable-api-termination"); 
$flags+=("--enable-api-termination"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--ebs-optimized"); 
$flags+=("--no-ebs-optimized"); 
$flags+=("--iam-instance-profile"); 
$flags+=("--instance-initiated-shutdown-behavior"); 
$flags+=("--network-interfaces"); 
$flags+=("--private-ip-address"); 
$flags+=("--elastic-gpu-specification"); 
$flags+=("--elastic-inference-accelerators"); 
$flags+=("--tag-specifications"); 
$flags+=("--launch-template"); 
$flags+=("--instance-market-options"); 
$flags+=("--credit-specification"); 
$flags+=("--cpu-options"); 
$flags+=("--capacity-reservation-specification"); 
$flags+=("--hibernation-options"); 
$flags+=("--license-specifications"); 
$flags+=("--metadata-options"); 
$flags+=("--count"); 
$flags+=("--secondary-private-ip-addresses"); 
$flags+=("--secondary-private-ip-address-count"); 
$flags+=("--associate-public-ip-address"); 
$flags+=("--no-associate-public-ip-address"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-run-scheduled-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-token"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--instance-count"); 
$flags+=("--launch-specification"); 
$flags+=("--scheduled-instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-search-local-gateway-routes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--local-gateway-route-table-id"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-search-transit-gateway-multicast-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-multicast-domain-id"); 
$flags+=("--filters"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-search-transit-gateway-routes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transit-gateway-route-table-id"); 
$flags+=("--filters"); 
$flags+=("--max-results"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-send-diagnostic-interrupt {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-start-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-ids"); 
$flags+=("--additional-info"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-start-vpc-endpoint-service-private-dns-verification {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--service-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-stop-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-ids"); 
$flags+=("--hibernate"); 
$flags+=("--no-hibernate"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-terminate-client-vpn-connections {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-vpn-endpoint-id"); 
$flags+=("--connection-id"); 
$flags+=("--username"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-terminate-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-unassign-ipv6-addresses {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ipv"); 
$flags+=("--network-interface-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-unassign-private-ip-addresses {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--network-interface-id"); 
$flags+=("--private-ip-addresses"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-unmonitor-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-ids"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-update-security-group-rule-descriptions-egress {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--group-id"); 
$flags+=("--group-name"); 
$flags+=("--ip-permissions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-update-security-group-rule-descriptions-ingress {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--group-id"); 
$flags+=("--group-name"); 
$flags+=("--ip-permissions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-ec2-withdraw-byoip-cidr {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cidr"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ec2-instance-connect {
    $commands = [System.Collections.ArrayList]@();

$commands+=("send-ssh-public-key");

return $commands;
}

 function Get-ec2-instance-connect-send-ssh-public-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--instance-os-user"); 
$flags+=("--ssh-public-key"); 
$flags+=("--availability-zone"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr {
    $commands = [System.Collections.ArrayList]@();

$commands+=("batch-check-layer-availability"); 
$commands+=("batch-delete-image"); 
$commands+=("batch-get-image"); 
$commands+=("complete-layer-upload"); 
$commands+=("create-repository"); 
$commands+=("delete-lifecycle-policy"); 
$commands+=("delete-repository"); 
$commands+=("delete-repository-policy"); 
$commands+=("describe-image-scan-findings"); 
$commands+=("describe-images"); 
$commands+=("describe-repositories"); 
$commands+=("get-authorization-token"); 
$commands+=("get-download-url-for-layer"); 
$commands+=("get-lifecycle-policy"); 
$commands+=("get-lifecycle-policy-preview"); 
$commands+=("get-login"); 
$commands+=("get-login-password"); 
$commands+=("get-repository-policy"); 
$commands+=("initiate-layer-upload"); 
$commands+=("list-images"); 
$commands+=("list-tags-for-resource"); 
$commands+=("put-image"); 
$commands+=("put-image-scanning-configuration"); 
$commands+=("put-image-tag-mutability"); 
$commands+=("put-lifecycle-policy"); 
$commands+=("set-repository-policy"); 
$commands+=("start-image-scan"); 
$commands+=("start-lifecycle-policy-preview"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("upload-layer-part"); 
$commands+=("wait");

return $commands;
}

 function Get-ecr-batch-check-layer-availability {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-id"); 
$flags+=("--repository-name"); 
$flags+=("--layer-digests"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-batch-delete-image {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-id"); 
$flags+=("--repository-name"); 
$flags+=("--image-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-batch-get-image {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-id"); 
$flags+=("--repository-name"); 
$flags+=("--image-ids"); 
$flags+=("--accepted-media-types"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-complete-layer-upload {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-id"); 
$flags+=("--repository-name"); 
$flags+=("--upload-id"); 
$flags+=("--layer-digests"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-create-repository {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--repository-name"); 
$flags+=("--tags"); 
$flags+=("--image-tag-mutability"); 
$flags+=("--image-scanning-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-delete-lifecycle-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-id"); 
$flags+=("--repository-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-delete-repository {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-id"); 
$flags+=("--repository-name"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-delete-repository-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-id"); 
$flags+=("--repository-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-describe-image-scan-findings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-id"); 
$flags+=("--repository-name"); 
$flags+=("--image-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-describe-images {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-id"); 
$flags+=("--repository-name"); 
$flags+=("--image-ids"); 
$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-describe-repositories {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-id"); 
$flags+=("--repository-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-get-authorization-token {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-get-download-url-for-layer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-id"); 
$flags+=("--repository-name"); 
$flags+=("--layer-digest"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-get-lifecycle-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-id"); 
$flags+=("--repository-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-get-lifecycle-policy-preview {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-id"); 
$flags+=("--repository-name"); 
$flags+=("--image-ids"); 
$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-get-login {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-ids"); 
$flags+=("--include-email"); 
$flags+=("--no-include-email");

return $flags;
}

 function Get-ecr-get-login-password {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-ecr-get-repository-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-id"); 
$flags+=("--repository-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-initiate-layer-upload {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-id"); 
$flags+=("--repository-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-list-images {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-id"); 
$flags+=("--repository-name"); 
$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-put-image {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-id"); 
$flags+=("--repository-name"); 
$flags+=("--image-manifest"); 
$flags+=("--image-tag"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-put-image-scanning-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-id"); 
$flags+=("--repository-name"); 
$flags+=("--image-scanning-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-put-image-tag-mutability {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-id"); 
$flags+=("--repository-name"); 
$flags+=("--image-tag-mutability"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-put-lifecycle-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-id"); 
$flags+=("--repository-name"); 
$flags+=("--lifecycle-policy-text"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-set-repository-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-id"); 
$flags+=("--repository-name"); 
$flags+=("--policy-text"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-start-image-scan {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-id"); 
$flags+=("--repository-name"); 
$flags+=("--image-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-start-lifecycle-policy-preview {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-id"); 
$flags+=("--repository-name"); 
$flags+=("--lifecycle-policy-text"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-upload-layer-part {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-id"); 
$flags+=("--repository-name"); 
$flags+=("--upload-id"); 
$flags+=("--part-first-byte"); 
$flags+=("--part-last-byte"); 
$flags+=("--layer-part-blob"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecr-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-ecs {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-capacity-provider"); 
$commands+=("create-cluster"); 
$commands+=("create-service"); 
$commands+=("create-task-set"); 
$commands+=("delete-account-setting"); 
$commands+=("delete-attributes"); 
$commands+=("delete-cluster"); 
$commands+=("delete-service"); 
$commands+=("delete-task-set"); 
$commands+=("deploy/index"); 
$commands+=("deregister-container-instance"); 
$commands+=("deregister-task-definition"); 
$commands+=("describe-capacity-providers"); 
$commands+=("describe-clusters"); 
$commands+=("describe-container-instances"); 
$commands+=("describe-services"); 
$commands+=("describe-task-definition"); 
$commands+=("describe-task-sets"); 
$commands+=("describe-tasks"); 
$commands+=("discover-poll-endpoint"); 
$commands+=("list-account-settings"); 
$commands+=("list-attributes"); 
$commands+=("list-clusters"); 
$commands+=("list-container-instances"); 
$commands+=("list-services"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-task-definition-families"); 
$commands+=("list-task-definitions"); 
$commands+=("list-tasks"); 
$commands+=("put-account-setting"); 
$commands+=("put-account-setting-default"); 
$commands+=("put-attributes"); 
$commands+=("put-cluster-capacity-providers"); 
$commands+=("register-container-instance"); 
$commands+=("register-task-definition"); 
$commands+=("run-task"); 
$commands+=("start-task"); 
$commands+=("stop-task"); 
$commands+=("submit-attachment-state-changes"); 
$commands+=("submit-container-state-change"); 
$commands+=("submit-task-state-change"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-cluster-settings"); 
$commands+=("update-container-agent"); 
$commands+=("update-container-instances-state"); 
$commands+=("update-service"); 
$commands+=("update-service-primary-task-set"); 
$commands+=("update-task-set"); 
$commands+=("wait");

return $commands;
}

 function Get-ecs-create-capacity-provider {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--auto-scaling-group-provider"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-create-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-name"); 
$flags+=("--tags"); 
$flags+=("--settings"); 
$flags+=("--capacity-providers"); 
$flags+=("--default-capacity-provider-strategy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-create-service {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--service-name"); 
$flags+=("--task-definition"); 
$flags+=("--load-balancers"); 
$flags+=("--service-registries"); 
$flags+=("--desired-count"); 
$flags+=("--client-token"); 
$flags+=("--launch-type"); 
$flags+=("--capacity-provider-strategy"); 
$flags+=("--platform-version"); 
$flags+=("--role"); 
$flags+=("--deployment-configuration"); 
$flags+=("--placement-constraints"); 
$flags+=("--placement-strategy"); 
$flags+=("--network-configuration"); 
$flags+=("--health-check-grace-period-seconds"); 
$flags+=("--scheduling-strategy"); 
$flags+=("--deployment-controller"); 
$flags+=("--tags"); 
$flags+=("--enable-ecs-managed-tags"); 
$flags+=("--no-enable-ecs-managed-tags"); 
$flags+=("--propagate-tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-create-task-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service"); 
$flags+=("--cluster"); 
$flags+=("--external-id"); 
$flags+=("--task-definition"); 
$flags+=("--network-configuration"); 
$flags+=("--load-balancers"); 
$flags+=("--service-registries"); 
$flags+=("--launch-type"); 
$flags+=("--capacity-provider-strategy"); 
$flags+=("--platform-version"); 
$flags+=("--scale"); 
$flags+=("--client-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-delete-account-setting {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--principal-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-delete-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-delete-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-delete-service {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--service"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-delete-task-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--service"); 
$flags+=("--task-set"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-deploy/index {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service"); 
$flags+=("--task-definition"); 
$flags+=("--codedeploy-appspec"); 
$flags+=("--cluster"); 
$flags+=("--codedeploy-application"); 
$flags+=("--codedeploy-deployment-group");

return $flags;
}

 function Get-ecs-deregister-container-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--container-instance"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-deregister-task-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-definition"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-describe-capacity-providers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--capacity-providers"); 
$flags+=("--include"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-describe-clusters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--clusters"); 
$flags+=("--include"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-describe-container-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--container-instances"); 
$flags+=("--include"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-describe-services {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--services"); 
$flags+=("--include"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-describe-task-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-definition"); 
$flags+=("--include"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-describe-task-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--service"); 
$flags+=("--task-sets"); 
$flags+=("--include"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-describe-tasks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--tasks"); 
$flags+=("--include"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-discover-poll-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--container-instance"); 
$flags+=("--cluster"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-list-account-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--value"); 
$flags+=("--principal-arn"); 
$flags+=("--effective-settings"); 
$flags+=("--no-effective-settings"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-list-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--target-type"); 
$flags+=("--attribute-name"); 
$flags+=("--attribute-value"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-list-clusters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-list-container-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--filter"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-list-services {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--launch-type"); 
$flags+=("--scheduling-strategy"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-list-task-definition-families {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--family-prefix"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-list-task-definitions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--family-prefix"); 
$flags+=("--status"); 
$flags+=("--sort"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-list-tasks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--container-instance"); 
$flags+=("--family"); 
$flags+=("--started-by"); 
$flags+=("--service-name"); 
$flags+=("--desired-status"); 
$flags+=("--launch-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-put-account-setting {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--value"); 
$flags+=("--principal-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-put-account-setting-default {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--value"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-put-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-put-cluster-capacity-providers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--capacity-providers"); 
$flags+=("--default-capacity-provider-strategy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-register-container-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--instance-identity-document"); 
$flags+=("--instance-identity-document-signature"); 
$flags+=("--total-resources"); 
$flags+=("--version-info"); 
$flags+=("--container-instance-arn"); 
$flags+=("--attributes"); 
$flags+=("--platform-devices"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-register-task-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--family"); 
$flags+=("--task-role-arn"); 
$flags+=("--execution-role-arn"); 
$flags+=("--network-mode"); 
$flags+=("--container-definitions"); 
$flags+=("--volumes"); 
$flags+=("--placement-constraints"); 
$flags+=("--requires-compatibilities"); 
$flags+=("--cpu"); 
$flags+=("--memory"); 
$flags+=("--tags"); 
$flags+=("--pid-mode"); 
$flags+=("--ipc-mode"); 
$flags+=("--proxy-configuration"); 
$flags+=("--inference-accelerators"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-run-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--capacity-provider-strategy"); 
$flags+=("--cluster"); 
$flags+=("--count"); 
$flags+=("--enable-ecs-managed-tags"); 
$flags+=("--no-enable-ecs-managed-tags"); 
$flags+=("--group"); 
$flags+=("--launch-type"); 
$flags+=("--network-configuration"); 
$flags+=("--overrides"); 
$flags+=("--placement-constraints"); 
$flags+=("--placement-strategy"); 
$flags+=("--platform-version"); 
$flags+=("--propagate-tags"); 
$flags+=("--reference-id"); 
$flags+=("--started-by"); 
$flags+=("--tags"); 
$flags+=("--task-definition"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-start-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--container-instances"); 
$flags+=("--enable-ecs-managed-tags"); 
$flags+=("--no-enable-ecs-managed-tags"); 
$flags+=("--group"); 
$flags+=("--network-configuration"); 
$flags+=("--overrides"); 
$flags+=("--propagate-tags"); 
$flags+=("--reference-id"); 
$flags+=("--started-by"); 
$flags+=("--tags"); 
$flags+=("--task-definition"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-stop-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--task"); 
$flags+=("--reason"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-submit-attachment-state-changes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--attachments"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-submit-container-state-change {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--task"); 
$flags+=("--container-name"); 
$flags+=("--runtime-id"); 
$flags+=("--status"); 
$flags+=("--exit-code"); 
$flags+=("--reason"); 
$flags+=("--network-bindings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-submit-task-state-change {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--task"); 
$flags+=("--status"); 
$flags+=("--reason"); 
$flags+=("--containers"); 
$flags+=("--attachments"); 
$flags+=("--pull-started-at"); 
$flags+=("--pull-stopped-at"); 
$flags+=("--execution-stopped-at"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-update-cluster-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--settings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-update-container-agent {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--container-instance"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-update-container-instances-state {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--container-instances"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-update-service {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--service"); 
$flags+=("--desired-count"); 
$flags+=("--task-definition"); 
$flags+=("--capacity-provider-strategy"); 
$flags+=("--deployment-configuration"); 
$flags+=("--network-configuration"); 
$flags+=("--placement-constraints"); 
$flags+=("--placement-strategy"); 
$flags+=("--platform-version"); 
$flags+=("--force-new-deployment"); 
$flags+=("--no-force-new-deployment"); 
$flags+=("--health-check-grace-period-seconds"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-update-service-primary-task-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--service"); 
$flags+=("--primary-task-set"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-update-task-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster"); 
$flags+=("--service"); 
$flags+=("--task-set"); 
$flags+=("--scale"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ecs-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-efs {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-access-point"); 
$commands+=("create-file-system"); 
$commands+=("create-mount-target"); 
$commands+=("delete-access-point"); 
$commands+=("delete-file-system"); 
$commands+=("delete-file-system-policy"); 
$commands+=("delete-mount-target"); 
$commands+=("describe-access-points"); 
$commands+=("describe-file-system-policy"); 
$commands+=("describe-file-systems"); 
$commands+=("describe-lifecycle-configuration"); 
$commands+=("describe-mount-target-security-groups"); 
$commands+=("describe-mount-targets"); 
$commands+=("list-tags-for-resource"); 
$commands+=("modify-mount-target-security-groups"); 
$commands+=("put-file-system-policy"); 
$commands+=("put-lifecycle-configuration"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-file-system");

return $commands;
}

 function Get-efs-create-access-point {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-token"); 
$flags+=("--tags"); 
$flags+=("--file-system-id"); 
$flags+=("--posix-user"); 
$flags+=("--root-directory"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-efs-create-file-system {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--creation-token"); 
$flags+=("--performance-mode"); 
$flags+=("--encrypted"); 
$flags+=("--no-encrypted"); 
$flags+=("--kms-key-id"); 
$flags+=("--throughput-mode"); 
$flags+=("--provisioned-throughput-in-mibps"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-efs-create-mount-target {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--file-system-id"); 
$flags+=("--subnet-id"); 
$flags+=("--ip-address"); 
$flags+=("--security-groups"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-efs-delete-access-point {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--access-point-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-efs-delete-file-system {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--file-system-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-efs-delete-file-system-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--file-system-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-efs-delete-mount-target {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--mount-target-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-efs-describe-access-points {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--access-point-id"); 
$flags+=("--file-system-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-efs-describe-file-system-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--file-system-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-efs-describe-file-systems {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-items"); 
$flags+=("--creation-token"); 
$flags+=("--file-system-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-efs-describe-lifecycle-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--file-system-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-efs-describe-mount-target-security-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--mount-target-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-efs-describe-mount-targets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-items"); 
$flags+=("--file-system-id"); 
$flags+=("--mount-target-id"); 
$flags+=("--access-point-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-efs-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-efs-modify-mount-target-security-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--mount-target-id"); 
$flags+=("--security-groups"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-efs-put-file-system-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--file-system-id"); 
$flags+=("--policy"); 
$flags+=("--bypass-policy-lockout-safety-check"); 
$flags+=("--no-bypass-policy-lockout-safety-check"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-efs-put-lifecycle-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--file-system-id"); 
$flags+=("--lifecycle-policies"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-efs-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-efs-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-efs-update-file-system {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--file-system-id"); 
$flags+=("--throughput-mode"); 
$flags+=("--provisioned-throughput-in-mibps"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-eks {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-cluster"); 
$commands+=("create-fargate-profile"); 
$commands+=("create-nodegroup"); 
$commands+=("delete-cluster"); 
$commands+=("delete-fargate-profile"); 
$commands+=("delete-nodegroup"); 
$commands+=("describe-cluster"); 
$commands+=("describe-fargate-profile"); 
$commands+=("describe-nodegroup"); 
$commands+=("describe-update"); 
$commands+=("get-token"); 
$commands+=("list-clusters"); 
$commands+=("list-fargate-profiles"); 
$commands+=("list-nodegroups"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-updates"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-cluster-config"); 
$commands+=("update-cluster-version"); 
$commands+=("update-kubeconfig"); 
$commands+=("update-nodegroup-config"); 
$commands+=("update-nodegroup-version"); 
$commands+=("wait");

return $commands;
}

 function Get-eks-create-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--role-arn"); 
$flags+=("--resources-vpc-config"); 
$flags+=("--logging"); 
$flags+=("--client-request-token"); 
$flags+=("--tags"); 
$flags+=("--encryption-config"); 
$flags+=("--kubernetes-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-eks-create-fargate-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fargate-profile-name"); 
$flags+=("--cluster-name"); 
$flags+=("--pod-execution-role-arn"); 
$flags+=("--subnets"); 
$flags+=("--selectors"); 
$flags+=("--client-request-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-eks-create-nodegroup {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-name"); 
$flags+=("--nodegroup-name"); 
$flags+=("--scaling-config"); 
$flags+=("--disk-size"); 
$flags+=("--subnets"); 
$flags+=("--instance-types"); 
$flags+=("--ami-type"); 
$flags+=("--remote-access"); 
$flags+=("--node-role"); 
$flags+=("--labels"); 
$flags+=("--tags"); 
$flags+=("--client-request-token"); 
$flags+=("--release-version"); 
$flags+=("--kubernetes-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-eks-delete-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-eks-delete-fargate-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-name"); 
$flags+=("--fargate-profile-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-eks-delete-nodegroup {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-name"); 
$flags+=("--nodegroup-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-eks-describe-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-eks-describe-fargate-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-name"); 
$flags+=("--fargate-profile-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-eks-describe-nodegroup {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-name"); 
$flags+=("--nodegroup-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-eks-describe-update {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--update-id"); 
$flags+=("--nodegroup-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-eks-get-token {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-name"); 
$flags+=("--role-arn");

return $flags;
}

 function Get-eks-list-clusters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-eks-list-fargate-profiles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-eks-list-nodegroups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-eks-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-eks-list-updates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--nodegroup-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-eks-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-eks-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-eks-update-cluster-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--resources-vpc-config"); 
$flags+=("--logging"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-eks-update-cluster-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--client-request-token"); 
$flags+=("--kubernetes-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-eks-update-kubeconfig {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--kubeconfig"); 
$flags+=("--role-arn"); 
$flags+=("--dry-run"); 
$flags+=("--verbose"); 
$flags+=("--alias");

return $flags;
}

 function Get-eks-update-nodegroup-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-name"); 
$flags+=("--nodegroup-name"); 
$flags+=("--labels"); 
$flags+=("--scaling-config"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-eks-update-nodegroup-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-name"); 
$flags+=("--nodegroup-name"); 
$flags+=("--release-version"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--client-request-token"); 
$flags+=("--kubernetes-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-eks-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name");

return $flags;
}

 function Get-elastic-inference {
    $commands = [System.Collections.ArrayList]@();

$commands+=("describe-accelerator-offerings"); 
$commands+=("describe-accelerator-types"); 
$commands+=("describe-accelerators"); 
$commands+=("list-tags-for-resource"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource");

return $commands;
}

 function Get-elastic-inference-describe-accelerator-offerings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--location-type"); 
$flags+=("--accelerator-types"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elastic-inference-describe-accelerator-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elastic-inference-describe-accelerators {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accelerator-ids"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elastic-inference-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elastic-inference-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elastic-inference-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-tags-to-resource"); 
$commands+=("authorize-cache-security-group-ingress"); 
$commands+=("batch-apply-update-action"); 
$commands+=("batch-stop-update-action"); 
$commands+=("complete-migration"); 
$commands+=("copy-snapshot"); 
$commands+=("create-cache-cluster"); 
$commands+=("create-cache-parameter-group"); 
$commands+=("create-cache-security-group"); 
$commands+=("create-cache-subnet-group"); 
$commands+=("create-global-replication-group"); 
$commands+=("create-replication-group"); 
$commands+=("create-snapshot"); 
$commands+=("decrease-node-groups-in-global-replication-group"); 
$commands+=("decrease-replica-count"); 
$commands+=("delete-cache-cluster"); 
$commands+=("delete-cache-parameter-group"); 
$commands+=("delete-cache-security-group"); 
$commands+=("delete-cache-subnet-group"); 
$commands+=("delete-global-replication-group"); 
$commands+=("delete-replication-group"); 
$commands+=("delete-snapshot"); 
$commands+=("describe-cache-clusters"); 
$commands+=("describe-cache-engine-versions"); 
$commands+=("describe-cache-parameter-groups"); 
$commands+=("describe-cache-parameters"); 
$commands+=("describe-cache-security-groups"); 
$commands+=("describe-cache-subnet-groups"); 
$commands+=("describe-engine-default-parameters"); 
$commands+=("describe-events"); 
$commands+=("describe-global-replication-groups"); 
$commands+=("describe-replication-groups"); 
$commands+=("describe-reserved-cache-nodes"); 
$commands+=("describe-reserved-cache-nodes-offerings"); 
$commands+=("describe-service-updates"); 
$commands+=("describe-snapshots"); 
$commands+=("describe-update-actions"); 
$commands+=("disassociate-global-replication-group"); 
$commands+=("failover-global-replication-group"); 
$commands+=("increase-node-groups-in-global-replication-group"); 
$commands+=("increase-replica-count"); 
$commands+=("list-allowed-node-type-modifications"); 
$commands+=("list-tags-for-resource"); 
$commands+=("modify-cache-cluster"); 
$commands+=("modify-cache-parameter-group"); 
$commands+=("modify-cache-subnet-group"); 
$commands+=("modify-global-replication-group"); 
$commands+=("modify-replication-group"); 
$commands+=("modify-replication-group-shard-configuration"); 
$commands+=("purchase-reserved-cache-nodes-offering"); 
$commands+=("rebalance-slots-in-global-replication-group"); 
$commands+=("reboot-cache-cluster"); 
$commands+=("remove-tags-from-resource"); 
$commands+=("reset-cache-parameter-group"); 
$commands+=("revoke-cache-security-group-ingress"); 
$commands+=("start-migration"); 
$commands+=("test-failover"); 
$commands+=("wait");

return $commands;
}

 function Get-elasticache-add-tags-to-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-authorize-cache-security-group-ingress {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cache-security-group-name"); 
$flags+=("--ec"); 
$flags+=("--ec"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-batch-apply-update-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-group-ids"); 
$flags+=("--cache-cluster-ids"); 
$flags+=("--service-update-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-batch-stop-update-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-group-ids"); 
$flags+=("--cache-cluster-ids"); 
$flags+=("--service-update-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-complete-migration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-group-id"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-copy-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-snapshot-name"); 
$flags+=("--target-snapshot-name"); 
$flags+=("--target-bucket"); 
$flags+=("--kms-key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-create-cache-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cache-cluster-id"); 
$flags+=("--replication-group-id"); 
$flags+=("--az-mode"); 
$flags+=("--preferred-availability-zone"); 
$flags+=("--preferred-availability-zones"); 
$flags+=("--num-cache-nodes"); 
$flags+=("--cache-node-type"); 
$flags+=("--engine"); 
$flags+=("--engine-version"); 
$flags+=("--cache-parameter-group-name"); 
$flags+=("--cache-subnet-group-name"); 
$flags+=("--cache-security-group-names"); 
$flags+=("--security-group-ids"); 
$flags+=("--tags"); 
$flags+=("--snapshot-arns"); 
$flags+=("--snapshot-name"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--port"); 
$flags+=("--notification-topic-arn"); 
$flags+=("--auto-minor-version-upgrade"); 
$flags+=("--no-auto-minor-version-upgrade"); 
$flags+=("--snapshot-retention-limit"); 
$flags+=("--snapshot-window"); 
$flags+=("--auth-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-create-cache-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cache-parameter-group-name"); 
$flags+=("--cache-parameter-group-family"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-create-cache-security-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cache-security-group-name"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-create-cache-subnet-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cache-subnet-group-name"); 
$flags+=("--cache-subnet-group-description"); 
$flags+=("--subnet-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-create-global-replication-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-replication-group-id-suffix"); 
$flags+=("--global-replication-group-description"); 
$flags+=("--primary-replication-group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-create-replication-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-group-id"); 
$flags+=("--replication-group-description"); 
$flags+=("--global-replication-group-id"); 
$flags+=("--primary-cluster-id"); 
$flags+=("--automatic-failover-enabled"); 
$flags+=("--no-automatic-failover-enabled"); 
$flags+=("--num-cache-clusters"); 
$flags+=("--preferred-cache-cluster-a-zs"); 
$flags+=("--num-node-groups"); 
$flags+=("--replicas-per-node-group"); 
$flags+=("--node-group-configuration"); 
$flags+=("--cache-node-type"); 
$flags+=("--engine"); 
$flags+=("--engine-version"); 
$flags+=("--cache-parameter-group-name"); 
$flags+=("--cache-subnet-group-name"); 
$flags+=("--cache-security-group-names"); 
$flags+=("--security-group-ids"); 
$flags+=("--tags"); 
$flags+=("--snapshot-arns"); 
$flags+=("--snapshot-name"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--port"); 
$flags+=("--notification-topic-arn"); 
$flags+=("--auto-minor-version-upgrade"); 
$flags+=("--no-auto-minor-version-upgrade"); 
$flags+=("--snapshot-retention-limit"); 
$flags+=("--snapshot-window"); 
$flags+=("--auth-token"); 
$flags+=("--transit-encryption-enabled"); 
$flags+=("--no-transit-encryption-enabled"); 
$flags+=("--at-rest-encryption-enabled"); 
$flags+=("--no-at-rest-encryption-enabled"); 
$flags+=("--kms-key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-create-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-group-id"); 
$flags+=("--cache-cluster-id"); 
$flags+=("--snapshot-name"); 
$flags+=("--kms-key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-decrease-node-groups-in-global-replication-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-replication-group-id"); 
$flags+=("--node-group-count"); 
$flags+=("--global-node-groups-to-remove"); 
$flags+=("--global-node-groups-to-retain"); 
$flags+=("--apply-immediately"); 
$flags+=("--no-apply-immediately"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-decrease-replica-count {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-group-id"); 
$flags+=("--new-replica-count"); 
$flags+=("--replica-configuration"); 
$flags+=("--replicas-to-remove"); 
$flags+=("--apply-immediately"); 
$flags+=("--no-apply-immediately"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-delete-cache-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cache-cluster-id"); 
$flags+=("--final-snapshot-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-delete-cache-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cache-parameter-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-delete-cache-security-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cache-security-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-delete-cache-subnet-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cache-subnet-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-delete-global-replication-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-replication-group-id"); 
$flags+=("--retain-primary-replication-group"); 
$flags+=("--no-retain-primary-replication-group"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-delete-replication-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-group-id"); 
$flags+=("--retain-primary-cluster"); 
$flags+=("--no-retain-primary-cluster"); 
$flags+=("--final-snapshot-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-delete-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--snapshot-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-describe-cache-clusters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cache-cluster-id"); 
$flags+=("--show-cache-node-info"); 
$flags+=("--no-show-cache-node-info"); 
$flags+=("--show-cache-clusters-not-in-replication-groups"); 
$flags+=("--no-show-cache-clusters-not-in-replication-groups"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-describe-cache-engine-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--engine"); 
$flags+=("--engine-version"); 
$flags+=("--cache-parameter-group-family"); 
$flags+=("--default-only"); 
$flags+=("--no-default-only"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-describe-cache-parameter-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cache-parameter-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-describe-cache-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cache-parameter-group-name"); 
$flags+=("--source"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-describe-cache-security-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cache-security-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-describe-cache-subnet-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cache-subnet-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-describe-engine-default-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cache-parameter-group-family"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-describe-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-identifier"); 
$flags+=("--source-type"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--duration"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-describe-global-replication-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-replication-group-id"); 
$flags+=("--show-member-info"); 
$flags+=("--no-show-member-info"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-describe-replication-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-describe-reserved-cache-nodes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--reserved-cache-node-id"); 
$flags+=("--reserved-cache-nodes-offering-id"); 
$flags+=("--cache-node-type"); 
$flags+=("--duration"); 
$flags+=("--product-description"); 
$flags+=("--offering-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-describe-reserved-cache-nodes-offerings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--reserved-cache-nodes-offering-id"); 
$flags+=("--cache-node-type"); 
$flags+=("--duration"); 
$flags+=("--product-description"); 
$flags+=("--offering-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-describe-service-updates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-update-name"); 
$flags+=("--service-update-status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-describe-snapshots {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-group-id"); 
$flags+=("--cache-cluster-id"); 
$flags+=("--snapshot-name"); 
$flags+=("--snapshot-source"); 
$flags+=("--show-node-group-config"); 
$flags+=("--no-show-node-group-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-describe-update-actions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-update-name"); 
$flags+=("--replication-group-ids"); 
$flags+=("--cache-cluster-ids"); 
$flags+=("--engine"); 
$flags+=("--service-update-status"); 
$flags+=("--service-update-time-range"); 
$flags+=("--update-action-status"); 
$flags+=("--show-node-level-update-status"); 
$flags+=("--no-show-node-level-update-status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-disassociate-global-replication-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-replication-group-id"); 
$flags+=("--replication-group-id"); 
$flags+=("--replication-group-region"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-failover-global-replication-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-replication-group-id"); 
$flags+=("--primary-region"); 
$flags+=("--primary-replication-group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-increase-node-groups-in-global-replication-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-replication-group-id"); 
$flags+=("--node-group-count"); 
$flags+=("--regional-configurations"); 
$flags+=("--apply-immediately"); 
$flags+=("--no-apply-immediately"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-increase-replica-count {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-group-id"); 
$flags+=("--new-replica-count"); 
$flags+=("--replica-configuration"); 
$flags+=("--apply-immediately"); 
$flags+=("--no-apply-immediately"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-list-allowed-node-type-modifications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cache-cluster-id"); 
$flags+=("--replication-group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-modify-cache-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cache-cluster-id"); 
$flags+=("--num-cache-nodes"); 
$flags+=("--cache-node-ids-to-remove"); 
$flags+=("--az-mode"); 
$flags+=("--new-availability-zones"); 
$flags+=("--cache-security-group-names"); 
$flags+=("--security-group-ids"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--notification-topic-arn"); 
$flags+=("--cache-parameter-group-name"); 
$flags+=("--notification-topic-status"); 
$flags+=("--apply-immediately"); 
$flags+=("--no-apply-immediately"); 
$flags+=("--engine-version"); 
$flags+=("--auto-minor-version-upgrade"); 
$flags+=("--no-auto-minor-version-upgrade"); 
$flags+=("--snapshot-retention-limit"); 
$flags+=("--snapshot-window"); 
$flags+=("--cache-node-type"); 
$flags+=("--auth-token"); 
$flags+=("--auth-token-update-strategy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-modify-cache-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cache-parameter-group-name"); 
$flags+=("--parameter-name-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-modify-cache-subnet-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cache-subnet-group-name"); 
$flags+=("--cache-subnet-group-description"); 
$flags+=("--subnet-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-modify-global-replication-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-replication-group-id"); 
$flags+=("--apply-immediately"); 
$flags+=("--no-apply-immediately"); 
$flags+=("--cache-node-type"); 
$flags+=("--engine-version"); 
$flags+=("--global-replication-group-description"); 
$flags+=("--automatic-failover-enabled"); 
$flags+=("--no-automatic-failover-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-modify-replication-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-group-id"); 
$flags+=("--replication-group-description"); 
$flags+=("--primary-cluster-id"); 
$flags+=("--snapshotting-cluster-id"); 
$flags+=("--automatic-failover-enabled"); 
$flags+=("--no-automatic-failover-enabled"); 
$flags+=("--node-group-id"); 
$flags+=("--cache-security-group-names"); 
$flags+=("--security-group-ids"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--notification-topic-arn"); 
$flags+=("--cache-parameter-group-name"); 
$flags+=("--notification-topic-status"); 
$flags+=("--apply-immediately"); 
$flags+=("--no-apply-immediately"); 
$flags+=("--engine-version"); 
$flags+=("--auto-minor-version-upgrade"); 
$flags+=("--no-auto-minor-version-upgrade"); 
$flags+=("--snapshot-retention-limit"); 
$flags+=("--snapshot-window"); 
$flags+=("--cache-node-type"); 
$flags+=("--auth-token"); 
$flags+=("--auth-token-update-strategy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-modify-replication-group-shard-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-group-id"); 
$flags+=("--node-group-count"); 
$flags+=("--apply-immediately"); 
$flags+=("--no-apply-immediately"); 
$flags+=("--resharding-configuration"); 
$flags+=("--node-groups-to-remove"); 
$flags+=("--node-groups-to-retain"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-purchase-reserved-cache-nodes-offering {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--reserved-cache-nodes-offering-id"); 
$flags+=("--reserved-cache-node-id"); 
$flags+=("--cache-node-count"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-rebalance-slots-in-global-replication-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-replication-group-id"); 
$flags+=("--apply-immediately"); 
$flags+=("--no-apply-immediately"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-reboot-cache-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cache-cluster-id"); 
$flags+=("--cache-node-ids-to-reboot"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-remove-tags-from-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-reset-cache-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cache-parameter-group-name"); 
$flags+=("--reset-all-parameters"); 
$flags+=("--no-reset-all-parameters"); 
$flags+=("--parameter-name-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-revoke-cache-security-group-ingress {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cache-security-group-name"); 
$flags+=("--ec"); 
$flags+=("--ec"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-start-migration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-group-id"); 
$flags+=("--customer-node-endpoint-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-test-failover {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-group-id"); 
$flags+=("--node-group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticache-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-elasticbeanstalk {
    $commands = [System.Collections.ArrayList]@();

$commands+=("abort-environment-update"); 
$commands+=("apply-environment-managed-action"); 
$commands+=("check-dns-availability"); 
$commands+=("compose-environments"); 
$commands+=("create-application"); 
$commands+=("create-application-version"); 
$commands+=("create-configuration-template"); 
$commands+=("create-environment"); 
$commands+=("create-platform-version"); 
$commands+=("create-storage-location"); 
$commands+=("delete-application"); 
$commands+=("delete-application-version"); 
$commands+=("delete-configuration-template"); 
$commands+=("delete-environment-configuration"); 
$commands+=("delete-platform-version"); 
$commands+=("describe-account-attributes"); 
$commands+=("describe-application-versions"); 
$commands+=("describe-applications"); 
$commands+=("describe-configuration-options"); 
$commands+=("describe-configuration-settings"); 
$commands+=("describe-environment-health"); 
$commands+=("describe-environment-managed-action-history"); 
$commands+=("describe-environment-managed-actions"); 
$commands+=("describe-environment-resources"); 
$commands+=("describe-environments"); 
$commands+=("describe-events"); 
$commands+=("describe-instances-health"); 
$commands+=("describe-platform-version"); 
$commands+=("list-available-solution-stacks"); 
$commands+=("list-platform-branches"); 
$commands+=("list-platform-versions"); 
$commands+=("list-tags-for-resource"); 
$commands+=("rebuild-environment"); 
$commands+=("request-environment-info"); 
$commands+=("restart-app-server"); 
$commands+=("retrieve-environment-info"); 
$commands+=("swap-environment-cnames"); 
$commands+=("terminate-environment"); 
$commands+=("update-application"); 
$commands+=("update-application-resource-lifecycle"); 
$commands+=("update-application-version"); 
$commands+=("update-configuration-template"); 
$commands+=("update-environment"); 
$commands+=("update-tags-for-resource"); 
$commands+=("validate-configuration-settings");

return $commands;
}

 function Get-elasticbeanstalk-abort-environment-update {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--environment-id"); 
$flags+=("--environment-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-apply-environment-managed-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--environment-name"); 
$flags+=("--environment-id"); 
$flags+=("--action-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-check-dns-availability {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cname-prefix"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-compose-environments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--group-name"); 
$flags+=("--version-labels"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-create-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--description"); 
$flags+=("--resource-lifecycle-config"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-create-application-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--version-label"); 
$flags+=("--description"); 
$flags+=("--source-build-information"); 
$flags+=("--source-bundle"); 
$flags+=("--build-configuration"); 
$flags+=("--auto-create-application"); 
$flags+=("--no-auto-create-application"); 
$flags+=("--process"); 
$flags+=("--no-process"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-create-configuration-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--template-name"); 
$flags+=("--solution-stack-name"); 
$flags+=("--platform-arn"); 
$flags+=("--source-configuration"); 
$flags+=("--environment-id"); 
$flags+=("--description"); 
$flags+=("--option-settings"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-create-environment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--environment-name"); 
$flags+=("--group-name"); 
$flags+=("--description"); 
$flags+=("--cname-prefix"); 
$flags+=("--tier"); 
$flags+=("--tags"); 
$flags+=("--version-label"); 
$flags+=("--template-name"); 
$flags+=("--solution-stack-name"); 
$flags+=("--platform-arn"); 
$flags+=("--option-settings"); 
$flags+=("--options-to-remove"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-create-platform-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--platform-name"); 
$flags+=("--platform-version"); 
$flags+=("--platform-definition-bundle"); 
$flags+=("--environment-name"); 
$flags+=("--option-settings"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-create-storage-location {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-delete-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--terminate-env-by-force"); 
$flags+=("--no-terminate-env-by-force"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-delete-application-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--version-label"); 
$flags+=("--delete-source-bundle"); 
$flags+=("--no-delete-source-bundle"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-delete-configuration-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--template-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-delete-environment-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--environment-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-delete-platform-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--platform-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-describe-account-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-describe-application-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--version-labels"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-describe-applications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-describe-configuration-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--template-name"); 
$flags+=("--environment-name"); 
$flags+=("--solution-stack-name"); 
$flags+=("--platform-arn"); 
$flags+=("--options"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-describe-configuration-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--template-name"); 
$flags+=("--environment-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-describe-environment-health {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--environment-name"); 
$flags+=("--environment-id"); 
$flags+=("--attribute-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-describe-environment-managed-action-history {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--environment-id"); 
$flags+=("--environment-name"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-describe-environment-managed-actions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--environment-name"); 
$flags+=("--environment-id"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-describe-environment-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--environment-id"); 
$flags+=("--environment-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-describe-environments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--version-label"); 
$flags+=("--environment-ids"); 
$flags+=("--environment-names"); 
$flags+=("--include-deleted"); 
$flags+=("--no-include-deleted"); 
$flags+=("--included-deleted-back-to"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-describe-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--version-label"); 
$flags+=("--template-name"); 
$flags+=("--environment-id"); 
$flags+=("--environment-name"); 
$flags+=("--platform-arn"); 
$flags+=("--request-id"); 
$flags+=("--severity"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-describe-instances-health {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--environment-name"); 
$flags+=("--environment-id"); 
$flags+=("--attribute-names"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-describe-platform-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--platform-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-list-available-solution-stacks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-list-platform-branches {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--max-records"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-list-platform-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-rebuild-environment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--environment-id"); 
$flags+=("--environment-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-request-environment-info {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--environment-id"); 
$flags+=("--environment-name"); 
$flags+=("--info-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-restart-app-server {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--environment-id"); 
$flags+=("--environment-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-retrieve-environment-info {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--environment-id"); 
$flags+=("--environment-name"); 
$flags+=("--info-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-swap-environment-cnames {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-environment-id"); 
$flags+=("--source-environment-name"); 
$flags+=("--destination-environment-id"); 
$flags+=("--destination-environment-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-terminate-environment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--environment-id"); 
$flags+=("--environment-name"); 
$flags+=("--terminate-resources"); 
$flags+=("--no-terminate-resources"); 
$flags+=("--force-terminate"); 
$flags+=("--no-force-terminate"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-update-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-update-application-resource-lifecycle {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--resource-lifecycle-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-update-application-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--version-label"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-update-configuration-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--template-name"); 
$flags+=("--description"); 
$flags+=("--option-settings"); 
$flags+=("--options-to-remove"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-update-environment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--environment-id"); 
$flags+=("--environment-name"); 
$flags+=("--group-name"); 
$flags+=("--description"); 
$flags+=("--tier"); 
$flags+=("--version-label"); 
$flags+=("--template-name"); 
$flags+=("--solution-stack-name"); 
$flags+=("--platform-arn"); 
$flags+=("--option-settings"); 
$flags+=("--options-to-remove"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-update-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags-to-add"); 
$flags+=("--tags-to-remove"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elasticbeanstalk-validate-configuration-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--template-name"); 
$flags+=("--environment-name"); 
$flags+=("--option-settings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elastictranscoder {
    $commands = [System.Collections.ArrayList]@();

$commands+=("cancel-job"); 
$commands+=("create-job"); 
$commands+=("create-pipeline"); 
$commands+=("create-preset"); 
$commands+=("delete-pipeline"); 
$commands+=("delete-preset"); 
$commands+=("list-jobs-by-pipeline"); 
$commands+=("list-jobs-by-status"); 
$commands+=("list-pipelines"); 
$commands+=("list-presets"); 
$commands+=("read-job"); 
$commands+=("read-pipeline"); 
$commands+=("read-preset"); 
$commands+=("update-pipeline"); 
$commands+=("update-pipeline-notifications"); 
$commands+=("update-pipeline-status"); 
$commands+=("wait");

return $commands;
}

 function Get-elastictranscoder-cancel-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elastictranscoder-create-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-id"); 
$flags+=("--input"); 
$flags+=("--inputs"); 
$flags+=("--outputs"); 
$flags+=("--output-key-prefix"); 
$flags+=("--playlists"); 
$flags+=("--user-metadata"); 
$flags+=("--job-output"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elastictranscoder-create-pipeline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--input-bucket"); 
$flags+=("--output-bucket"); 
$flags+=("--role"); 
$flags+=("--aws-kms-key-arn"); 
$flags+=("--notifications"); 
$flags+=("--content-config"); 
$flags+=("--thumbnail-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elastictranscoder-create-preset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--container"); 
$flags+=("--video"); 
$flags+=("--audio"); 
$flags+=("--thumbnails"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elastictranscoder-delete-pipeline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elastictranscoder-delete-preset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elastictranscoder-list-jobs-by-pipeline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-id"); 
$flags+=("--ascending"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elastictranscoder-list-jobs-by-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--status"); 
$flags+=("--ascending"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elastictranscoder-list-pipelines {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ascending"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elastictranscoder-list-presets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ascending"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elastictranscoder-read-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elastictranscoder-read-pipeline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elastictranscoder-read-preset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elastictranscoder-update-pipeline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--name"); 
$flags+=("--input-bucket"); 
$flags+=("--role"); 
$flags+=("--aws-kms-key-arn"); 
$flags+=("--notifications"); 
$flags+=("--content-config"); 
$flags+=("--thumbnail-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elastictranscoder-update-pipeline-notifications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--notifications"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elastictranscoder-update-pipeline-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elastictranscoder-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-elb {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-tags"); 
$commands+=("apply-security-groups-to-load-balancer"); 
$commands+=("attach-load-balancer-to-subnets"); 
$commands+=("configure-health-check"); 
$commands+=("create-app-cookie-stickiness-policy"); 
$commands+=("create-lb-cookie-stickiness-policy"); 
$commands+=("create-load-balancer"); 
$commands+=("create-load-balancer-listeners"); 
$commands+=("create-load-balancer-policy"); 
$commands+=("delete-load-balancer"); 
$commands+=("delete-load-balancer-listeners"); 
$commands+=("delete-load-balancer-policy"); 
$commands+=("deregister-instances-from-load-balancer"); 
$commands+=("describe-account-limits"); 
$commands+=("describe-instance-health"); 
$commands+=("describe-load-balancer-attributes"); 
$commands+=("describe-load-balancer-policies"); 
$commands+=("describe-load-balancer-policy-types"); 
$commands+=("describe-load-balancers"); 
$commands+=("describe-tags"); 
$commands+=("detach-load-balancer-from-subnets"); 
$commands+=("disable-availability-zones-for-load-balancer"); 
$commands+=("enable-availability-zones-for-load-balancer"); 
$commands+=("modify-load-balancer-attributes"); 
$commands+=("register-instances-with-load-balancer"); 
$commands+=("remove-tags"); 
$commands+=("set-load-balancer-listener-ssl-certificate"); 
$commands+=("set-load-balancer-policies-for-backend-server"); 
$commands+=("set-load-balancer-policies-of-listener"); 
$commands+=("wait");

return $commands;
}

 function Get-elb-add-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-names"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-apply-security-groups-to-load-balancer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--security-groups"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-attach-load-balancer-to-subnets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--subnets"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-configure-health-check {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--health-check"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-create-app-cookie-stickiness-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--policy-name"); 
$flags+=("--cookie-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-create-lb-cookie-stickiness-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--policy-name"); 
$flags+=("--cookie-expiration-period"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-create-load-balancer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--listeners"); 
$flags+=("--availability-zones"); 
$flags+=("--subnets"); 
$flags+=("--security-groups"); 
$flags+=("--scheme"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-create-load-balancer-listeners {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--listeners"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-create-load-balancer-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--policy-name"); 
$flags+=("--policy-type-name"); 
$flags+=("--policy-attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-delete-load-balancer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-delete-load-balancer-listeners {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--load-balancer-ports"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-delete-load-balancer-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--policy-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-deregister-instances-from-load-balancer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--instances"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-describe-account-limits {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-describe-instance-health {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--instances"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-describe-load-balancer-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-describe-load-balancer-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--policy-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-describe-load-balancer-policy-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-type-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-describe-load-balancers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-names"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-describe-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-detach-load-balancer-from-subnets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--subnets"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-disable-availability-zones-for-load-balancer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--availability-zones"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-enable-availability-zones-for-load-balancer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--availability-zones"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-modify-load-balancer-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--load-balancer-attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-register-instances-with-load-balancer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--instances"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-remove-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-names"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-set-load-balancer-listener-ssl-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--load-balancer-port"); 
$flags+=("--ssl-certificate-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-set-load-balancer-policies-for-backend-server {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--instance-port"); 
$flags+=("--policy-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-set-load-balancer-policies-of-listener {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--load-balancer-port"); 
$flags+=("--policy-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elb-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-elbv2 {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-listener-certificates"); 
$commands+=("add-tags"); 
$commands+=("create-listener"); 
$commands+=("create-load-balancer"); 
$commands+=("create-rule"); 
$commands+=("create-target-group"); 
$commands+=("delete-listener"); 
$commands+=("delete-load-balancer"); 
$commands+=("delete-rule"); 
$commands+=("delete-target-group"); 
$commands+=("deregister-targets"); 
$commands+=("describe-account-limits"); 
$commands+=("describe-listener-certificates"); 
$commands+=("describe-listeners"); 
$commands+=("describe-load-balancer-attributes"); 
$commands+=("describe-load-balancers"); 
$commands+=("describe-rules"); 
$commands+=("describe-ssl-policies"); 
$commands+=("describe-tags"); 
$commands+=("describe-target-group-attributes"); 
$commands+=("describe-target-groups"); 
$commands+=("describe-target-health"); 
$commands+=("modify-listener"); 
$commands+=("modify-load-balancer-attributes"); 
$commands+=("modify-rule"); 
$commands+=("modify-target-group"); 
$commands+=("modify-target-group-attributes"); 
$commands+=("register-targets"); 
$commands+=("remove-listener-certificates"); 
$commands+=("remove-tags"); 
$commands+=("set-ip-address-type"); 
$commands+=("set-rule-priorities"); 
$commands+=("set-security-groups"); 
$commands+=("set-subnets"); 
$commands+=("wait");

return $commands;
}

 function Get-elbv2-add-listener-certificates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--listener-arn"); 
$flags+=("--certificates"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-add-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arns"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-create-listener {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-arn"); 
$flags+=("--protocol"); 
$flags+=("--port"); 
$flags+=("--ssl-policy"); 
$flags+=("--certificates"); 
$flags+=("--default-actions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-create-load-balancer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--subnets"); 
$flags+=("--subnet-mappings"); 
$flags+=("--security-groups"); 
$flags+=("--scheme"); 
$flags+=("--tags"); 
$flags+=("--type"); 
$flags+=("--ip-address-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-create-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--listener-arn"); 
$flags+=("--conditions"); 
$flags+=("--priority"); 
$flags+=("--actions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-create-target-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--protocol"); 
$flags+=("--port"); 
$flags+=("--vpc-id"); 
$flags+=("--health-check-protocol"); 
$flags+=("--health-check-port"); 
$flags+=("--health-check-enabled"); 
$flags+=("--no-health-check-enabled"); 
$flags+=("--health-check-path"); 
$flags+=("--health-check-interval-seconds"); 
$flags+=("--health-check-timeout-seconds"); 
$flags+=("--healthy-threshold-count"); 
$flags+=("--unhealthy-threshold-count"); 
$flags+=("--matcher"); 
$flags+=("--target-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-delete-listener {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--listener-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-delete-load-balancer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-delete-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-delete-target-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--target-group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-deregister-targets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--target-group-arn"); 
$flags+=("--targets"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-describe-account-limits {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-describe-listener-certificates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--listener-arn"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-describe-listeners {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-arn"); 
$flags+=("--listener-arns"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-describe-load-balancer-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-describe-load-balancers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-arns"); 
$flags+=("--names"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-describe-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--listener-arn"); 
$flags+=("--rule-arns"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-describe-ssl-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--names"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-describe-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-describe-target-group-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--target-group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-describe-target-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-arn"); 
$flags+=("--target-group-arns"); 
$flags+=("--names"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-describe-target-health {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--target-group-arn"); 
$flags+=("--targets"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-modify-listener {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--listener-arn"); 
$flags+=("--port"); 
$flags+=("--protocol"); 
$flags+=("--ssl-policy"); 
$flags+=("--certificates"); 
$flags+=("--default-actions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-modify-load-balancer-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-arn"); 
$flags+=("--attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-modify-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-arn"); 
$flags+=("--conditions"); 
$flags+=("--actions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-modify-target-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--target-group-arn"); 
$flags+=("--health-check-protocol"); 
$flags+=("--health-check-port"); 
$flags+=("--health-check-path"); 
$flags+=("--health-check-enabled"); 
$flags+=("--no-health-check-enabled"); 
$flags+=("--health-check-interval-seconds"); 
$flags+=("--health-check-timeout-seconds"); 
$flags+=("--healthy-threshold-count"); 
$flags+=("--unhealthy-threshold-count"); 
$flags+=("--matcher"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-modify-target-group-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--target-group-arn"); 
$flags+=("--attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-register-targets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--target-group-arn"); 
$flags+=("--targets"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-remove-listener-certificates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--listener-arn"); 
$flags+=("--certificates"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-remove-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arns"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-set-ip-address-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-arn"); 
$flags+=("--ip-address-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-set-rule-priorities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-priorities"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-set-security-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-arn"); 
$flags+=("--security-groups"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-set-subnets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-arn"); 
$flags+=("--subnets"); 
$flags+=("--subnet-mappings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-elbv2-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-emr {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-instance-fleet"); 
$commands+=("add-instance-groups"); 
$commands+=("add-steps"); 
$commands+=("add-tags"); 
$commands+=("cancel-steps"); 
$commands+=("create-cluster"); 
$commands+=("create-default-roles"); 
$commands+=("create-hbase-backup"); 
$commands+=("create-security-configuration"); 
$commands+=("delete-security-configuration"); 
$commands+=("describe-cluster"); 
$commands+=("describe-security-configuration"); 
$commands+=("describe-step"); 
$commands+=("disable-hbase-backups"); 
$commands+=("get"); 
$commands+=("get-block-public-access-configuration"); 
$commands+=("get-managed-scaling-policy"); 
$commands+=("install-applications"); 
$commands+=("list-clusters"); 
$commands+=("list-instance-fleets"); 
$commands+=("list-instances"); 
$commands+=("list-security-configurations"); 
$commands+=("list-steps"); 
$commands+=("modify-cluster"); 
$commands+=("modify-cluster-attributes"); 
$commands+=("modify-instance-fleet"); 
$commands+=("modify-instance-groups"); 
$commands+=("put"); 
$commands+=("put-auto-scaling-policy"); 
$commands+=("put-block-public-access-configuration"); 
$commands+=("put-managed-scaling-policy"); 
$commands+=("remove-auto-scaling-policy"); 
$commands+=("remove-managed-scaling-policy"); 
$commands+=("remove-tags"); 
$commands+=("restore-from-hbase-backup"); 
$commands+=("schedule-hbase-backup"); 
$commands+=("socks"); 
$commands+=("ssh"); 
$commands+=("terminate-clusters"); 
$commands+=("wait");

return $commands;
}

 function Get-emr-add-instance-fleet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--instance-fleet"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-emr-add-instance-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--instance-groups");

return $flags;
}

 function Get-emr-add-steps {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--steps");

return $flags;
}

 function Get-emr-add-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-emr-cancel-steps {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--step-ids"); 
$flags+=("--step-cancellation-option"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-emr-create-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--release-label"); 
$flags+=("--ami-version"); 
$flags+=("--instance-fleets"); 
$flags+=("--instance-groups"); 
$flags+=("--instance-type"); 
$flags+=("--instance-count"); 
$flags+=("--auto-terminate"); 
$flags+=("--no-auto-terminate"); 
$flags+=("--use-default-roles"); 
$flags+=("--service-role"); 
$flags+=("--configurations"); 
$flags+=("--name"); 
$flags+=("--log-uri"); 
$flags+=("--additional-info"); 
$flags+=("--ec"); 
$flags+=("--termination-protected"); 
$flags+=("--no-termination-protected"); 
$flags+=("--scale-down-behavior"); 
$flags+=("--visible-to-all-users"); 
$flags+=("--no-visible-to-all-users"); 
$flags+=("--enable-debugging"); 
$flags+=("--no-enable-debugging"); 
$flags+=("--tags"); 
$flags+=("--applications"); 
$flags+=("--emrfs"); 
$flags+=("--bootstrap-actions"); 
$flags+=("--steps"); 
$flags+=("--restore-from-hbase-backup"); 
$flags+=("--security-configuration"); 
$flags+=("--custom-ami-id"); 
$flags+=("--ebs-root-volume-size"); 
$flags+=("--repo-upgrade-on-boot"); 
$flags+=("--kerberos-attributes"); 
$flags+=("--managed-scaling-policy");

return $flags;
}

 function Get-emr-create-default-roles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--iam-endpoint");

return $flags;
}

 function Get-emr-create-hbase-backup {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--dir"); 
$flags+=("--consistent");

return $flags;
}

 function Get-emr-create-security-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--security-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-emr-delete-security-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-emr-describe-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id");

return $flags;
}

 function Get-emr-describe-security-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-emr-describe-step {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--step-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-emr-disable-hbase-backups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--full"); 
$flags+=("--incremental");

return $flags;
}

 function Get-emr-get {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--key-pair-file"); 
$flags+=("--src"); 
$flags+=("--dest");

return $flags;
}

 function Get-emr-get-block-public-access-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-emr-get-managed-scaling-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-emr-install-applications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--applications");

return $flags;
}

 function Get-emr-list-clusters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--created-after"); 
$flags+=("--created-before"); 
$flags+=("--cluster-states"); 
$flags+=("--active"); 
$flags+=("--terminated"); 
$flags+=("--failed"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-emr-list-instance-fleets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-emr-list-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--instance-group-id"); 
$flags+=("--instance-group-types"); 
$flags+=("--instance-fleet-id"); 
$flags+=("--instance-fleet-type"); 
$flags+=("--instance-states"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-emr-list-security-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-emr-list-steps {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--step-states"); 
$flags+=("--step-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-emr-modify-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--step-concurrency-level"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-emr-modify-cluster-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--visible-to-all-users"); 
$flags+=("--no-visible-to-all-users"); 
$flags+=("--termination-protected"); 
$flags+=("--no-termination-protected");

return $flags;
}

 function Get-emr-modify-instance-fleet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--instance-fleet"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-emr-modify-instance-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--instance-groups"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-emr-put {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--key-pair-file"); 
$flags+=("--src"); 
$flags+=("--dest");

return $flags;
}

 function Get-emr-put-auto-scaling-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--instance-group-id"); 
$flags+=("--auto-scaling-policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-emr-put-block-public-access-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--block-public-access-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-emr-put-managed-scaling-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--managed-scaling-policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-emr-remove-auto-scaling-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--instance-group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-emr-remove-managed-scaling-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-emr-remove-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-emr-restore-from-hbase-backup {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--dir"); 
$flags+=("--backup-version");

return $flags;
}

 function Get-emr-schedule-hbase-backup {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--type"); 
$flags+=("--dir"); 
$flags+=("--interval"); 
$flags+=("--unit"); 
$flags+=("--start-time"); 
$flags+=("--consistent");

return $flags;
}

 function Get-emr-socks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--key-pair-file");

return $flags;
}

 function Get-emr-ssh {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--key-pair-file"); 
$flags+=("--command");

return $flags;
}

 function Get-emr-terminate-clusters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-ids");

return $flags;
}

 function Get-emr-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id");

return $flags;
}

 function Get-es {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-tags"); 
$commands+=("associate-package"); 
$commands+=("cancel-elasticsearch-service-software-update"); 
$commands+=("create-elasticsearch-domain"); 
$commands+=("create-package"); 
$commands+=("delete-elasticsearch-domain"); 
$commands+=("delete-elasticsearch-service-role"); 
$commands+=("delete-package"); 
$commands+=("describe-elasticsearch-domain"); 
$commands+=("describe-elasticsearch-domain-config"); 
$commands+=("describe-elasticsearch-domains"); 
$commands+=("describe-elasticsearch-instance-type-limits"); 
$commands+=("describe-packages"); 
$commands+=("describe-reserved-elasticsearch-instance-offerings"); 
$commands+=("describe-reserved-elasticsearch-instances"); 
$commands+=("dissociate-package"); 
$commands+=("get-compatible-elasticsearch-versions"); 
$commands+=("get-upgrade-history"); 
$commands+=("get-upgrade-status"); 
$commands+=("list-domain-names"); 
$commands+=("list-domains-for-package"); 
$commands+=("list-elasticsearch-instance-types"); 
$commands+=("list-elasticsearch-versions"); 
$commands+=("list-packages-for-domain"); 
$commands+=("list-tags"); 
$commands+=("purchase-reserved-elasticsearch-instance-offering"); 
$commands+=("remove-tags"); 
$commands+=("start-elasticsearch-service-software-update"); 
$commands+=("update-elasticsearch-domain-config"); 
$commands+=("upgrade-elasticsearch-domain");

return $commands;
}

 function Get-es-add-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--tag-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-associate-package {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--package-id"); 
$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-cancel-elasticsearch-service-software-update {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-create-elasticsearch-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--elasticsearch-version"); 
$flags+=("--elasticsearch-cluster-config"); 
$flags+=("--ebs-options"); 
$flags+=("--access-policies"); 
$flags+=("--snapshot-options"); 
$flags+=("--vpc-options"); 
$flags+=("--cognito-options"); 
$flags+=("--encryption-at-rest-options"); 
$flags+=("--node-to-node-encryption-options"); 
$flags+=("--advanced-options"); 
$flags+=("--log-publishing-options"); 
$flags+=("--domain-endpoint-options"); 
$flags+=("--advanced-security-options"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-create-package {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--package-name"); 
$flags+=("--package-type"); 
$flags+=("--package-description"); 
$flags+=("--package-source"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-delete-elasticsearch-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-delete-elasticsearch-service-role {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-delete-package {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--package-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-describe-elasticsearch-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-describe-elasticsearch-domain-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-describe-elasticsearch-domains {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-describe-elasticsearch-instance-type-limits {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--instance-type"); 
$flags+=("--elasticsearch-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-describe-packages {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-describe-reserved-elasticsearch-instance-offerings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--reserved-elasticsearch-instance-offering-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-describe-reserved-elasticsearch-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--reserved-elasticsearch-instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-dissociate-package {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--package-id"); 
$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-get-compatible-elasticsearch-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-get-upgrade-history {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-get-upgrade-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-list-domain-names {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-list-domains-for-package {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--package-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-list-elasticsearch-instance-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--elasticsearch-version"); 
$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-list-elasticsearch-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-list-packages-for-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-list-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-purchase-reserved-elasticsearch-instance-offering {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--reserved-elasticsearch-instance-offering-id"); 
$flags+=("--reservation-name"); 
$flags+=("--instance-count"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-remove-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-start-elasticsearch-service-software-update {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-update-elasticsearch-domain-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--elasticsearch-cluster-config"); 
$flags+=("--ebs-options"); 
$flags+=("--snapshot-options"); 
$flags+=("--vpc-options"); 
$flags+=("--cognito-options"); 
$flags+=("--advanced-options"); 
$flags+=("--access-policies"); 
$flags+=("--log-publishing-options"); 
$flags+=("--domain-endpoint-options"); 
$flags+=("--advanced-security-options"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-es-upgrade-elasticsearch-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--target-version"); 
$flags+=("--perform-check-only"); 
$flags+=("--no-perform-check-only"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events {
    $commands = [System.Collections.ArrayList]@();

$commands+=("activate-event-source"); 
$commands+=("create-event-bus"); 
$commands+=("create-partner-event-source"); 
$commands+=("deactivate-event-source"); 
$commands+=("delete-event-bus"); 
$commands+=("delete-partner-event-source"); 
$commands+=("delete-rule"); 
$commands+=("describe-event-bus"); 
$commands+=("describe-event-source"); 
$commands+=("describe-partner-event-source"); 
$commands+=("describe-rule"); 
$commands+=("disable-rule"); 
$commands+=("enable-rule"); 
$commands+=("list-event-buses"); 
$commands+=("list-event-sources"); 
$commands+=("list-partner-event-source-accounts"); 
$commands+=("list-partner-event-sources"); 
$commands+=("list-rule-names-by-target"); 
$commands+=("list-rules"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-targets-by-rule"); 
$commands+=("put-events"); 
$commands+=("put-partner-events"); 
$commands+=("put-permission"); 
$commands+=("put-rule"); 
$commands+=("put-targets"); 
$commands+=("remove-permission"); 
$commands+=("remove-targets"); 
$commands+=("tag-resource"); 
$commands+=("test-event-pattern"); 
$commands+=("untag-resource");

return $commands;
}

 function Get-events-activate-event-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-create-event-bus {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--event-source-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-create-partner-event-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--account"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-deactivate-event-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-delete-event-bus {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-delete-partner-event-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--account"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-delete-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--event-bus-name"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-describe-event-bus {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-describe-event-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-describe-partner-event-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-describe-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--event-bus-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-disable-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--event-bus-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-enable-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--event-bus-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-list-event-buses {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name-prefix"); 
$flags+=("--next-token"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-list-event-sources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name-prefix"); 
$flags+=("--next-token"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-list-partner-event-source-accounts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--event-source-name"); 
$flags+=("--next-token"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-list-partner-event-sources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name-prefix"); 
$flags+=("--next-token"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-list-rule-names-by-target {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--target-arn"); 
$flags+=("--event-bus-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-list-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name-prefix"); 
$flags+=("--event-bus-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-list-targets-by-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule"); 
$flags+=("--event-bus-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-put-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--entries"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-put-partner-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--entries"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-put-permission {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--event-bus-name"); 
$flags+=("--action"); 
$flags+=("--principal"); 
$flags+=("--statement-id"); 
$flags+=("--condition"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-put-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--schedule-expression"); 
$flags+=("--event-pattern"); 
$flags+=("--state"); 
$flags+=("--description"); 
$flags+=("--role-arn"); 
$flags+=("--tags"); 
$flags+=("--event-bus-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-put-targets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule"); 
$flags+=("--event-bus-name"); 
$flags+=("--targets"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-remove-permission {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--statement-id"); 
$flags+=("--event-bus-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-remove-targets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule"); 
$flags+=("--event-bus-name"); 
$flags+=("--ids"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-test-event-pattern {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--event-pattern"); 
$flags+=("--event"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-events-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-firehose {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-delivery-stream"); 
$commands+=("delete-delivery-stream"); 
$commands+=("describe-delivery-stream"); 
$commands+=("list-delivery-streams"); 
$commands+=("list-tags-for-delivery-stream"); 
$commands+=("put-record"); 
$commands+=("put-record-batch"); 
$commands+=("start-delivery-stream-encryption"); 
$commands+=("stop-delivery-stream-encryption"); 
$commands+=("tag-delivery-stream"); 
$commands+=("untag-delivery-stream"); 
$commands+=("update-destination");

return $commands;
}

 function Get-firehose-create-delivery-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--delivery-stream-name"); 
$flags+=("--delivery-stream-type"); 
$flags+=("--kinesis-stream-source-configuration"); 
$flags+=("--delivery-stream-encryption-configuration-input"); 
$flags+=("--s"); 
$flags+=("--extended-s"); 
$flags+=("--redshift-destination-configuration"); 
$flags+=("--elasticsearch-destination-configuration"); 
$flags+=("--splunk-destination-configuration"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-firehose-delete-delivery-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--delivery-stream-name"); 
$flags+=("--allow-force-delete"); 
$flags+=("--no-allow-force-delete"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-firehose-describe-delivery-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--delivery-stream-name"); 
$flags+=("--limit"); 
$flags+=("--exclusive-start-destination-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-firehose-list-delivery-streams {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--limit"); 
$flags+=("--delivery-stream-type"); 
$flags+=("--exclusive-start-delivery-stream-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-firehose-list-tags-for-delivery-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--delivery-stream-name"); 
$flags+=("--exclusive-start-tag-key"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-firehose-put-record {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--delivery-stream-name"); 
$flags+=("--record"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-firehose-put-record-batch {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--delivery-stream-name"); 
$flags+=("--records"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-firehose-start-delivery-stream-encryption {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--delivery-stream-name"); 
$flags+=("--delivery-stream-encryption-configuration-input"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-firehose-stop-delivery-stream-encryption {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--delivery-stream-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-firehose-tag-delivery-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--delivery-stream-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-firehose-untag-delivery-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--delivery-stream-name"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-firehose-update-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--delivery-stream-name"); 
$flags+=("--current-delivery-stream-version-id"); 
$flags+=("--destination-id"); 
$flags+=("--s"); 
$flags+=("--extended-s"); 
$flags+=("--redshift-destination-update"); 
$flags+=("--elasticsearch-destination-update"); 
$flags+=("--splunk-destination-update"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fms {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-admin-account"); 
$commands+=("delete-notification-channel"); 
$commands+=("delete-policy"); 
$commands+=("disassociate-admin-account"); 
$commands+=("get-admin-account"); 
$commands+=("get-compliance-detail"); 
$commands+=("get-notification-channel"); 
$commands+=("get-policy"); 
$commands+=("get-protection-status"); 
$commands+=("list-compliance-status"); 
$commands+=("list-member-accounts"); 
$commands+=("list-policies"); 
$commands+=("list-tags-for-resource"); 
$commands+=("put-notification-channel"); 
$commands+=("put-policy"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource");

return $commands;
}

 function Get-fms-associate-admin-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--admin-account"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fms-delete-notification-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fms-delete-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-id"); 
$flags+=("--delete-all-policy-resources"); 
$flags+=("--no-delete-all-policy-resources"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fms-disassociate-admin-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fms-get-admin-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fms-get-compliance-detail {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-id"); 
$flags+=("--member-account"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fms-get-notification-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fms-get-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fms-get-protection-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-id"); 
$flags+=("--member-account-id"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fms-list-compliance-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fms-list-member-accounts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fms-list-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fms-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fms-put-notification-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sns-topic-arn"); 
$flags+=("--sns-role-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fms-put-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy"); 
$flags+=("--tag-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fms-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fms-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-dataset"); 
$commands+=("create-dataset-group"); 
$commands+=("create-dataset-import-job"); 
$commands+=("create-forecast"); 
$commands+=("create-forecast-export-job"); 
$commands+=("create-predictor"); 
$commands+=("delete-dataset"); 
$commands+=("delete-dataset-group"); 
$commands+=("delete-dataset-import-job"); 
$commands+=("delete-forecast"); 
$commands+=("delete-forecast-export-job"); 
$commands+=("delete-predictor"); 
$commands+=("describe-dataset"); 
$commands+=("describe-dataset-group"); 
$commands+=("describe-dataset-import-job"); 
$commands+=("describe-forecast"); 
$commands+=("describe-forecast-export-job"); 
$commands+=("describe-predictor"); 
$commands+=("get-accuracy-metrics"); 
$commands+=("list-dataset-groups"); 
$commands+=("list-dataset-import-jobs"); 
$commands+=("list-datasets"); 
$commands+=("list-forecast-export-jobs"); 
$commands+=("list-forecasts"); 
$commands+=("list-predictors"); 
$commands+=("update-dataset-group");

return $commands;
}

 function Get-forecast-create-dataset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-name"); 
$flags+=("--domain"); 
$flags+=("--dataset-type"); 
$flags+=("--data-frequency"); 
$flags+=("--schema"); 
$flags+=("--encryption-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-create-dataset-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-group-name"); 
$flags+=("--domain"); 
$flags+=("--dataset-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-create-dataset-import-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-import-job-name"); 
$flags+=("--dataset-arn"); 
$flags+=("--data-source"); 
$flags+=("--timestamp-format"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-create-forecast {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--forecast-name"); 
$flags+=("--predictor-arn"); 
$flags+=("--forecast-types"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-create-forecast-export-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--forecast-export-job-name"); 
$flags+=("--forecast-arn"); 
$flags+=("--destination"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-create-predictor {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--predictor-name"); 
$flags+=("--algorithm-arn"); 
$flags+=("--forecast-horizon"); 
$flags+=("--perform-auto-ml"); 
$flags+=("--no-perform-auto-ml"); 
$flags+=("--perform-hpo"); 
$flags+=("--no-perform-hpo"); 
$flags+=("--training-parameters"); 
$flags+=("--evaluation-parameters"); 
$flags+=("--hpo-config"); 
$flags+=("--input-data-config"); 
$flags+=("--featurization-config"); 
$flags+=("--encryption-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-delete-dataset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-delete-dataset-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-delete-dataset-import-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-import-job-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-delete-forecast {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--forecast-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-delete-forecast-export-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--forecast-export-job-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-delete-predictor {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--predictor-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-describe-dataset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-describe-dataset-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-describe-dataset-import-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-import-job-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-describe-forecast {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--forecast-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-describe-forecast-export-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--forecast-export-job-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-describe-predictor {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--predictor-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-get-accuracy-metrics {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--predictor-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-list-dataset-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-list-dataset-import-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-list-datasets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-list-forecast-export-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-list-forecasts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-list-predictors {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecast-update-dataset-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-group-arn"); 
$flags+=("--dataset-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-forecastquery {
    $commands = [System.Collections.ArrayList]@();

$commands+=("query-forecast");

return $commands;
}

 function Get-forecastquery-query-forecast {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--forecast-arn"); 
$flags+=("--start-date"); 
$flags+=("--end-date"); 
$flags+=("--filters"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector {
    $commands = [System.Collections.ArrayList]@();

$commands+=("batch-create-variable"); 
$commands+=("batch-get-variable"); 
$commands+=("create-detector-version"); 
$commands+=("create-model-version"); 
$commands+=("create-rule"); 
$commands+=("create-variable"); 
$commands+=("delete-detector"); 
$commands+=("delete-detector-version"); 
$commands+=("delete-event"); 
$commands+=("delete-rule-version"); 
$commands+=("describe-detector"); 
$commands+=("describe-model-versions"); 
$commands+=("get-detector-version"); 
$commands+=("get-detectors"); 
$commands+=("get-external-models"); 
$commands+=("get-model-version"); 
$commands+=("get-models"); 
$commands+=("get-outcomes"); 
$commands+=("get-prediction"); 
$commands+=("get-rules"); 
$commands+=("get-variables"); 
$commands+=("put-detector"); 
$commands+=("put-external-model"); 
$commands+=("put-model"); 
$commands+=("put-outcome"); 
$commands+=("update-detector-version"); 
$commands+=("update-detector-version-metadata"); 
$commands+=("update-detector-version-status"); 
$commands+=("update-model-version"); 
$commands+=("update-rule-metadata"); 
$commands+=("update-rule-version"); 
$commands+=("update-variable");

return $commands;
}

 function Get-frauddetector-batch-create-variable {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--variable-entries"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-batch-get-variable {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-create-detector-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--description"); 
$flags+=("--external-model-endpoints"); 
$flags+=("--rules"); 
$flags+=("--model-versions"); 
$flags+=("--rule-execution-mode"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-create-model-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--model-id"); 
$flags+=("--model-type"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-create-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-id"); 
$flags+=("--detector-id"); 
$flags+=("--description"); 
$flags+=("--expression"); 
$flags+=("--language"); 
$flags+=("--outcomes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-create-variable {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--data-type"); 
$flags+=("--data-source"); 
$flags+=("--default-value"); 
$flags+=("--description"); 
$flags+=("--variable-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-delete-detector {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-delete-detector-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--detector-version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-delete-event {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--event-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-delete-rule-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--rule-id"); 
$flags+=("--rule-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-describe-detector {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-describe-model-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--model-id"); 
$flags+=("--model-version-number"); 
$flags+=("--model-type"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-get-detector-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--detector-version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-get-detectors {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-get-external-models {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--model-endpoint"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-get-model-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--model-id"); 
$flags+=("--model-type"); 
$flags+=("--model-version-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-get-models {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--model-type"); 
$flags+=("--model-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-get-outcomes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-get-prediction {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--detector-version-id"); 
$flags+=("--event-id"); 
$flags+=("--event-attributes"); 
$flags+=("--external-model-endpoint-data-blobs"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-get-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-id"); 
$flags+=("--detector-id"); 
$flags+=("--rule-version"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-get-variables {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-put-detector {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-put-external-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--model-endpoint"); 
$flags+=("--model-source"); 
$flags+=("--role"); 
$flags+=("--input-configuration"); 
$flags+=("--output-configuration"); 
$flags+=("--model-endpoint-status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-put-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--model-id"); 
$flags+=("--model-type"); 
$flags+=("--description"); 
$flags+=("--training-data-source"); 
$flags+=("--model-variables"); 
$flags+=("--label-schema"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-put-outcome {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-update-detector-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--detector-version-id"); 
$flags+=("--external-model-endpoints"); 
$flags+=("--rules"); 
$flags+=("--description"); 
$flags+=("--model-versions"); 
$flags+=("--rule-execution-mode"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-update-detector-version-metadata {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--detector-version-id"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-update-detector-version-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--detector-version-id"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-update-model-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--model-id"); 
$flags+=("--model-type"); 
$flags+=("--model-version-number"); 
$flags+=("--description"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-update-rule-metadata {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-update-rule-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule"); 
$flags+=("--description"); 
$flags+=("--expression"); 
$flags+=("--language"); 
$flags+=("--outcomes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-frauddetector-update-variable {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--default-value"); 
$flags+=("--description"); 
$flags+=("--variable-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fsx {
    $commands = [System.Collections.ArrayList]@();

$commands+=("cancel-data-repository-task"); 
$commands+=("create-backup"); 
$commands+=("create-data-repository-task"); 
$commands+=("create-file-system"); 
$commands+=("create-file-system-from-backup"); 
$commands+=("delete-backup"); 
$commands+=("delete-file-system"); 
$commands+=("describe-backups"); 
$commands+=("describe-data-repository-tasks"); 
$commands+=("describe-file-systems"); 
$commands+=("list-tags-for-resource"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-file-system");

return $commands;
}

 function Get-fsx-cancel-data-repository-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fsx-create-backup {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--file-system-id"); 
$flags+=("--client-request-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fsx-create-data-repository-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--type"); 
$flags+=("--paths"); 
$flags+=("--file-system-id"); 
$flags+=("--report"); 
$flags+=("--client-request-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fsx-create-file-system {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-request-token"); 
$flags+=("--file-system-type"); 
$flags+=("--storage-capacity"); 
$flags+=("--storage-type"); 
$flags+=("--subnet-ids"); 
$flags+=("--security-group-ids"); 
$flags+=("--tags"); 
$flags+=("--kms-key-id"); 
$flags+=("--windows-configuration"); 
$flags+=("--lustre-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fsx-create-file-system-from-backup {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-id"); 
$flags+=("--client-request-token"); 
$flags+=("--subnet-ids"); 
$flags+=("--security-group-ids"); 
$flags+=("--tags"); 
$flags+=("--windows-configuration"); 
$flags+=("--storage-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fsx-delete-backup {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-id"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fsx-delete-file-system {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--file-system-id"); 
$flags+=("--client-request-token"); 
$flags+=("--windows-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fsx-describe-backups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-ids"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fsx-describe-data-repository-tasks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-ids"); 
$flags+=("--filters"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fsx-describe-file-systems {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--file-system-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fsx-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fsx-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fsx-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-fsx-update-file-system {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--file-system-id"); 
$flags+=("--client-request-token"); 
$flags+=("--windows-configuration"); 
$flags+=("--lustre-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift {
    $commands = [System.Collections.ArrayList]@();

$commands+=("accept-match"); 
$commands+=("claim-game-server"); 
$commands+=("create-alias"); 
$commands+=("create-build"); 
$commands+=("create-fleet"); 
$commands+=("create-game-server-group"); 
$commands+=("create-game-session"); 
$commands+=("create-game-session-queue"); 
$commands+=("create-matchmaking-configuration"); 
$commands+=("create-matchmaking-rule-set"); 
$commands+=("create-player-session"); 
$commands+=("create-player-sessions"); 
$commands+=("create-script"); 
$commands+=("create-vpc-peering-authorization"); 
$commands+=("create-vpc-peering-connection"); 
$commands+=("delete-alias"); 
$commands+=("delete-build"); 
$commands+=("delete-fleet"); 
$commands+=("delete-game-server-group"); 
$commands+=("delete-game-session-queue"); 
$commands+=("delete-matchmaking-configuration"); 
$commands+=("delete-matchmaking-rule-set"); 
$commands+=("delete-scaling-policy"); 
$commands+=("delete-script"); 
$commands+=("delete-vpc-peering-authorization"); 
$commands+=("delete-vpc-peering-connection"); 
$commands+=("deregister-game-server"); 
$commands+=("describe-alias"); 
$commands+=("describe-build"); 
$commands+=("describe-ec2-instance-limits"); 
$commands+=("describe-fleet-attributes"); 
$commands+=("describe-fleet-capacity"); 
$commands+=("describe-fleet-events"); 
$commands+=("describe-fleet-port-settings"); 
$commands+=("describe-fleet-utilization"); 
$commands+=("describe-game-server"); 
$commands+=("describe-game-server-group"); 
$commands+=("describe-game-session-details"); 
$commands+=("describe-game-session-placement"); 
$commands+=("describe-game-session-queues"); 
$commands+=("describe-game-sessions"); 
$commands+=("describe-instances"); 
$commands+=("describe-matchmaking"); 
$commands+=("describe-matchmaking-configurations"); 
$commands+=("describe-matchmaking-rule-sets"); 
$commands+=("describe-player-sessions"); 
$commands+=("describe-runtime-configuration"); 
$commands+=("describe-scaling-policies"); 
$commands+=("describe-script"); 
$commands+=("describe-vpc-peering-authorizations"); 
$commands+=("describe-vpc-peering-connections"); 
$commands+=("get-game-session-log"); 
$commands+=("get-game-session-log-url"); 
$commands+=("get-instance-access"); 
$commands+=("list-aliases"); 
$commands+=("list-builds"); 
$commands+=("list-fleets"); 
$commands+=("list-game-server-groups"); 
$commands+=("list-game-servers"); 
$commands+=("list-scripts"); 
$commands+=("list-tags-for-resource"); 
$commands+=("put-scaling-policy"); 
$commands+=("register-game-server"); 
$commands+=("request-upload-credentials"); 
$commands+=("resolve-alias"); 
$commands+=("resume-game-server-group"); 
$commands+=("search-game-sessions"); 
$commands+=("start-fleet-actions"); 
$commands+=("start-game-session-placement"); 
$commands+=("start-match-backfill"); 
$commands+=("start-matchmaking"); 
$commands+=("stop-fleet-actions"); 
$commands+=("stop-game-session-placement"); 
$commands+=("stop-matchmaking"); 
$commands+=("suspend-game-server-group"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-alias"); 
$commands+=("update-build"); 
$commands+=("update-fleet-attributes"); 
$commands+=("update-fleet-capacity"); 
$commands+=("update-fleet-port-settings"); 
$commands+=("update-game-server"); 
$commands+=("update-game-server-group"); 
$commands+=("update-game-session"); 
$commands+=("update-game-session-queue"); 
$commands+=("update-matchmaking-configuration"); 
$commands+=("update-runtime-configuration"); 
$commands+=("update-script"); 
$commands+=("upload-build"); 
$commands+=("validate-matchmaking-rule-set");

return $commands;
}

 function Get-gamelift-accept-match {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ticket-id"); 
$flags+=("--player-ids"); 
$flags+=("--acceptance-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-claim-game-server {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--game-server-group-name"); 
$flags+=("--game-server-id"); 
$flags+=("--game-server-data"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-create-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--routing-strategy"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-create-build {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--storage-location"); 
$flags+=("--operating-system"); 
$flags+=("--tags"); 
$flags+=("--build-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-create-fleet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--build-id"); 
$flags+=("--script-id"); 
$flags+=("--server-launch-path"); 
$flags+=("--server-launch-parameters"); 
$flags+=("--log-paths"); 
$flags+=("--ec"); 
$flags+=("--ec"); 
$flags+=("--new-game-session-protection-policy"); 
$flags+=("--runtime-configuration"); 
$flags+=("--resource-creation-limit-policy"); 
$flags+=("--metric-groups"); 
$flags+=("--peer-vpc-aws-account-id"); 
$flags+=("--peer-vpc-id"); 
$flags+=("--fleet-type"); 
$flags+=("--instance-role-arn"); 
$flags+=("--certificate-configuration"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-create-game-server-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--game-server-group-name"); 
$flags+=("--role-arn"); 
$flags+=("--min-size"); 
$flags+=("--max-size"); 
$flags+=("--launch-template"); 
$flags+=("--instance-definitions"); 
$flags+=("--auto-scaling-policy"); 
$flags+=("--balancing-strategy"); 
$flags+=("--game-server-protection-policy"); 
$flags+=("--vpc-subnets"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-create-game-session {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-id"); 
$flags+=("--alias-id"); 
$flags+=("--maximum-player-session-count"); 
$flags+=("--name"); 
$flags+=("--game-properties"); 
$flags+=("--creator-id"); 
$flags+=("--game-session-id"); 
$flags+=("--idempotency-token"); 
$flags+=("--game-session-data"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-create-game-session-queue {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--timeout-in-seconds"); 
$flags+=("--player-latency-policies"); 
$flags+=("--destinations"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-create-matchmaking-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--game-session-queue-arns"); 
$flags+=("--request-timeout-seconds"); 
$flags+=("--acceptance-timeout-seconds"); 
$flags+=("--acceptance-required"); 
$flags+=("--no-acceptance-required"); 
$flags+=("--rule-set-name"); 
$flags+=("--notification-target"); 
$flags+=("--additional-player-count"); 
$flags+=("--custom-event-data"); 
$flags+=("--game-properties"); 
$flags+=("--game-session-data"); 
$flags+=("--backfill-mode"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-create-matchmaking-rule-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--rule-set-body"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-create-player-session {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--game-session-id"); 
$flags+=("--player-id"); 
$flags+=("--player-data"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-create-player-sessions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--game-session-id"); 
$flags+=("--player-ids"); 
$flags+=("--player-data-map"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-create-script {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--storage-location"); 
$flags+=("--zip-file"); 
$flags+=("--tags"); 
$flags+=("--script-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-create-vpc-peering-authorization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--game-lift-aws-account-id"); 
$flags+=("--peer-vpc-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-create-vpc-peering-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-id"); 
$flags+=("--peer-vpc-aws-account-id"); 
$flags+=("--peer-vpc-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-delete-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--alias-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-delete-build {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--build-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-delete-fleet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-delete-game-server-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--game-server-group-name"); 
$flags+=("--delete-option"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-delete-game-session-queue {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-delete-matchmaking-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-delete-matchmaking-rule-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-delete-scaling-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--fleet-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-delete-script {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--script-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-delete-vpc-peering-authorization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--game-lift-aws-account-id"); 
$flags+=("--peer-vpc-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-delete-vpc-peering-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-id"); 
$flags+=("--vpc-peering-connection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-deregister-game-server {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--game-server-group-name"); 
$flags+=("--game-server-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-describe-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--alias-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-describe-build {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--build-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-describe-ec2-instance-limits {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ec"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-describe-fleet-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-describe-fleet-capacity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-describe-fleet-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-id"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-describe-fleet-port-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-describe-fleet-utilization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-describe-game-server {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--game-server-group-name"); 
$flags+=("--game-server-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-describe-game-server-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--game-server-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-describe-game-session-details {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-id"); 
$flags+=("--game-session-id"); 
$flags+=("--alias-id"); 
$flags+=("--status-filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-describe-game-session-placement {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--placement-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-describe-game-session-queues {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--names"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-describe-game-sessions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-id"); 
$flags+=("--game-session-id"); 
$flags+=("--alias-id"); 
$flags+=("--status-filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-describe-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-id"); 
$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-describe-matchmaking {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ticket-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-describe-matchmaking-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--names"); 
$flags+=("--rule-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-describe-matchmaking-rule-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--names"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-describe-player-sessions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--game-session-id"); 
$flags+=("--player-id"); 
$flags+=("--player-session-id"); 
$flags+=("--player-session-status-filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-describe-runtime-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-describe-scaling-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-id"); 
$flags+=("--status-filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-describe-script {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--script-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-describe-vpc-peering-authorizations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-describe-vpc-peering-connections {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-get-game-session-log {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--game-session-id"); 
$flags+=("--save-as");

return $flags;
}

 function Get-gamelift-get-game-session-log-url {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--game-session-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-get-instance-access {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-id"); 
$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-list-aliases {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--routing-strategy-type"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-list-builds {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-list-fleets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--build-id"); 
$flags+=("--script-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-list-game-server-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--limit"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-list-game-servers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--game-server-group-name"); 
$flags+=("--sort-order"); 
$flags+=("--limit"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-list-scripts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--limit"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-put-scaling-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--fleet-id"); 
$flags+=("--scaling-adjustment"); 
$flags+=("--scaling-adjustment-type"); 
$flags+=("--threshold"); 
$flags+=("--comparison-operator"); 
$flags+=("--evaluation-periods"); 
$flags+=("--metric-name"); 
$flags+=("--policy-type"); 
$flags+=("--target-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-register-game-server {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--game-server-group-name"); 
$flags+=("--game-server-id"); 
$flags+=("--instance-id"); 
$flags+=("--connection-info"); 
$flags+=("--game-server-data"); 
$flags+=("--custom-sort-key"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-request-upload-credentials {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--build-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-resolve-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--alias-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-resume-game-server-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--game-server-group-name"); 
$flags+=("--resume-actions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-search-game-sessions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-id"); 
$flags+=("--alias-id"); 
$flags+=("--filter-expression"); 
$flags+=("--sort-expression"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-start-fleet-actions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-id"); 
$flags+=("--actions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-start-game-session-placement {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--placement-id"); 
$flags+=("--game-session-queue-name"); 
$flags+=("--game-properties"); 
$flags+=("--maximum-player-session-count"); 
$flags+=("--game-session-name"); 
$flags+=("--player-latencies"); 
$flags+=("--desired-player-sessions"); 
$flags+=("--game-session-data"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-start-match-backfill {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ticket-id"); 
$flags+=("--configuration-name"); 
$flags+=("--game-session-arn"); 
$flags+=("--players"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-start-matchmaking {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ticket-id"); 
$flags+=("--configuration-name"); 
$flags+=("--players"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-stop-fleet-actions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-id"); 
$flags+=("--actions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-stop-game-session-placement {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--placement-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-stop-matchmaking {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ticket-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-suspend-game-server-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--game-server-group-name"); 
$flags+=("--suspend-actions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-update-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--alias-id"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--routing-strategy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-update-build {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--build-id"); 
$flags+=("--name"); 
$flags+=("--build-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-update-fleet-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-id"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--new-game-session-protection-policy"); 
$flags+=("--resource-creation-limit-policy"); 
$flags+=("--metric-groups"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-update-fleet-capacity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-id"); 
$flags+=("--desired-instances"); 
$flags+=("--min-size"); 
$flags+=("--max-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-update-fleet-port-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-id"); 
$flags+=("--inbound-permission-authorizations"); 
$flags+=("--inbound-permission-revocations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-update-game-server {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--game-server-group-name"); 
$flags+=("--game-server-id"); 
$flags+=("--game-server-data"); 
$flags+=("--custom-sort-key"); 
$flags+=("--utilization-status"); 
$flags+=("--health-check"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-update-game-server-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--game-server-group-name"); 
$flags+=("--role-arn"); 
$flags+=("--instance-definitions"); 
$flags+=("--game-server-protection-policy"); 
$flags+=("--balancing-strategy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-update-game-session {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--game-session-id"); 
$flags+=("--maximum-player-session-count"); 
$flags+=("--name"); 
$flags+=("--player-session-creation-policy"); 
$flags+=("--protection-policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-update-game-session-queue {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--timeout-in-seconds"); 
$flags+=("--player-latency-policies"); 
$flags+=("--destinations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-update-matchmaking-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--game-session-queue-arns"); 
$flags+=("--request-timeout-seconds"); 
$flags+=("--acceptance-timeout-seconds"); 
$flags+=("--acceptance-required"); 
$flags+=("--no-acceptance-required"); 
$flags+=("--rule-set-name"); 
$flags+=("--notification-target"); 
$flags+=("--additional-player-count"); 
$flags+=("--custom-event-data"); 
$flags+=("--game-properties"); 
$flags+=("--game-session-data"); 
$flags+=("--backfill-mode"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-update-runtime-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-id"); 
$flags+=("--runtime-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-update-script {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--script-id"); 
$flags+=("--name"); 
$flags+=("--storage-location"); 
$flags+=("--zip-file"); 
$flags+=("--script-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-gamelift-upload-build {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--build-version"); 
$flags+=("--build-root"); 
$flags+=("--operating-system");

return $flags;
}

 function Get-gamelift-validate-matchmaking-rule-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-set-body"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier {
    $commands = [System.Collections.ArrayList]@();

$commands+=("abort-multipart-upload"); 
$commands+=("abort-vault-lock"); 
$commands+=("add-tags-to-vault"); 
$commands+=("complete-multipart-upload"); 
$commands+=("complete-vault-lock"); 
$commands+=("create-vault"); 
$commands+=("delete-archive"); 
$commands+=("delete-vault"); 
$commands+=("delete-vault-access-policy"); 
$commands+=("delete-vault-notifications"); 
$commands+=("describe-job"); 
$commands+=("describe-vault"); 
$commands+=("get-data-retrieval-policy"); 
$commands+=("get-job-output"); 
$commands+=("get-vault-access-policy"); 
$commands+=("get-vault-lock"); 
$commands+=("get-vault-notifications"); 
$commands+=("initiate-job"); 
$commands+=("initiate-multipart-upload"); 
$commands+=("initiate-vault-lock"); 
$commands+=("list-jobs"); 
$commands+=("list-multipart-uploads"); 
$commands+=("list-parts"); 
$commands+=("list-provisioned-capacity"); 
$commands+=("list-tags-for-vault"); 
$commands+=("list-vaults"); 
$commands+=("purchase-provisioned-capacity"); 
$commands+=("remove-tags-from-vault"); 
$commands+=("set-data-retrieval-policy"); 
$commands+=("set-vault-access-policy"); 
$commands+=("set-vault-notifications"); 
$commands+=("upload-archive"); 
$commands+=("upload-multipart-part"); 
$commands+=("wait");

return $commands;
}

 function Get-glacier-abort-multipart-upload {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--upload-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-abort-vault-lock {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-add-tags-to-vault {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-complete-multipart-upload {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--upload-id"); 
$flags+=("--archive-size"); 
$flags+=("--checksum"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-complete-vault-lock {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--lock-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-create-vault {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-delete-archive {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--archive-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-delete-vault {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-delete-vault-access-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-delete-vault-notifications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-describe-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-describe-vault {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-get-data-retrieval-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-get-job-output {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--job-id"); 
$flags+=("--range");

return $flags;
}

 function Get-glacier-get-vault-access-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-get-vault-lock {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-get-vault-notifications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-initiate-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--job-parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-initiate-multipart-upload {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--archive-description"); 
$flags+=("--part-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-initiate-vault-lock {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-list-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--statuscode"); 
$flags+=("--completed"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-list-multipart-uploads {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-list-parts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--upload-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-list-provisioned-capacity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-list-tags-for-vault {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-list-vaults {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-purchase-provisioned-capacity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-remove-tags-from-vault {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-set-data-retrieval-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-set-vault-access-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-set-vault-notifications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--vault-notification-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-upload-archive {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vault-name"); 
$flags+=("--account-id"); 
$flags+=("--archive-description"); 
$flags+=("--checksum"); 
$flags+=("--body"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-upload-multipart-part {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--vault-name"); 
$flags+=("--upload-id"); 
$flags+=("--checksum"); 
$flags+=("--range"); 
$flags+=("--body"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glacier-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-globalaccelerator {
    $commands = [System.Collections.ArrayList]@();

$commands+=("advertise-byoip-cidr"); 
$commands+=("create-accelerator"); 
$commands+=("create-endpoint-group"); 
$commands+=("create-listener"); 
$commands+=("delete-accelerator"); 
$commands+=("delete-endpoint-group"); 
$commands+=("delete-listener"); 
$commands+=("deprovision-byoip-cidr"); 
$commands+=("describe-accelerator"); 
$commands+=("describe-accelerator-attributes"); 
$commands+=("describe-endpoint-group"); 
$commands+=("describe-listener"); 
$commands+=("list-accelerators"); 
$commands+=("list-byoip-cidrs"); 
$commands+=("list-endpoint-groups"); 
$commands+=("list-listeners"); 
$commands+=("list-tags-for-resource"); 
$commands+=("provision-byoip-cidr"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-accelerator"); 
$commands+=("update-accelerator-attributes"); 
$commands+=("update-endpoint-group"); 
$commands+=("update-listener"); 
$commands+=("withdraw-byoip-cidr");

return $commands;
}

 function Get-globalaccelerator-advertise-byoip-cidr {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cidr"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-globalaccelerator-create-accelerator {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--ip-address-type"); 
$flags+=("--ip-addresses"); 
$flags+=("--enabled"); 
$flags+=("--no-enabled"); 
$flags+=("--idempotency-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-globalaccelerator-create-endpoint-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--listener-arn"); 
$flags+=("--endpoint-group-region"); 
$flags+=("--endpoint-configurations"); 
$flags+=("--traffic-dial-percentage"); 
$flags+=("--health-check-port"); 
$flags+=("--health-check-protocol"); 
$flags+=("--health-check-path"); 
$flags+=("--health-check-interval-seconds"); 
$flags+=("--threshold-count"); 
$flags+=("--idempotency-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-globalaccelerator-create-listener {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accelerator-arn"); 
$flags+=("--port-ranges"); 
$flags+=("--protocol"); 
$flags+=("--client-affinity"); 
$flags+=("--idempotency-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-globalaccelerator-delete-accelerator {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accelerator-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-globalaccelerator-delete-endpoint-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-globalaccelerator-delete-listener {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--listener-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-globalaccelerator-deprovision-byoip-cidr {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cidr"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-globalaccelerator-describe-accelerator {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accelerator-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-globalaccelerator-describe-accelerator-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accelerator-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-globalaccelerator-describe-endpoint-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-globalaccelerator-describe-listener {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--listener-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-globalaccelerator-list-accelerators {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-globalaccelerator-list-byoip-cidrs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-globalaccelerator-list-endpoint-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--listener-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-globalaccelerator-list-listeners {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accelerator-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-globalaccelerator-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-globalaccelerator-provision-byoip-cidr {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cidr"); 
$flags+=("--cidr-authorization-context"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-globalaccelerator-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-globalaccelerator-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-globalaccelerator-update-accelerator {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accelerator-arn"); 
$flags+=("--name"); 
$flags+=("--ip-address-type"); 
$flags+=("--enabled"); 
$flags+=("--no-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-globalaccelerator-update-accelerator-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accelerator-arn"); 
$flags+=("--flow-logs-enabled"); 
$flags+=("--no-flow-logs-enabled"); 
$flags+=("--flow-logs-s"); 
$flags+=("--flow-logs-s"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-globalaccelerator-update-endpoint-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-group-arn"); 
$flags+=("--endpoint-configurations"); 
$flags+=("--traffic-dial-percentage"); 
$flags+=("--health-check-port"); 
$flags+=("--health-check-protocol"); 
$flags+=("--health-check-path"); 
$flags+=("--health-check-interval-seconds"); 
$flags+=("--threshold-count"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-globalaccelerator-update-listener {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--listener-arn"); 
$flags+=("--port-ranges"); 
$flags+=("--protocol"); 
$flags+=("--client-affinity"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-globalaccelerator-withdraw-byoip-cidr {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cidr"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue {
    $commands = [System.Collections.ArrayList]@();

$commands+=("batch-create-partition"); 
$commands+=("batch-delete-connection"); 
$commands+=("batch-delete-partition"); 
$commands+=("batch-delete-table"); 
$commands+=("batch-delete-table-version"); 
$commands+=("batch-get-crawlers"); 
$commands+=("batch-get-dev-endpoints"); 
$commands+=("batch-get-jobs"); 
$commands+=("batch-get-partition"); 
$commands+=("batch-get-triggers"); 
$commands+=("batch-get-workflows"); 
$commands+=("batch-stop-job-run"); 
$commands+=("cancel-ml-task-run"); 
$commands+=("create-classifier"); 
$commands+=("create-connection"); 
$commands+=("create-crawler"); 
$commands+=("create-database"); 
$commands+=("create-dev-endpoint"); 
$commands+=("create-job"); 
$commands+=("create-ml-transform"); 
$commands+=("create-partition"); 
$commands+=("create-script"); 
$commands+=("create-security-configuration"); 
$commands+=("create-table"); 
$commands+=("create-trigger"); 
$commands+=("create-user-defined-"); 
$commands+=("create-workflow"); 
$commands+=("delete-classifier"); 
$commands+=("delete-connection"); 
$commands+=("delete-crawler"); 
$commands+=("delete-database"); 
$commands+=("delete-dev-endpoint"); 
$commands+=("delete-job"); 
$commands+=("delete-ml-transform"); 
$commands+=("delete-partition"); 
$commands+=("delete-resource-policy"); 
$commands+=("delete-security-configuration"); 
$commands+=("delete-table"); 
$commands+=("delete-table-version"); 
$commands+=("delete-trigger"); 
$commands+=("delete-user-defined-"); 
$commands+=("delete-workflow"); 
$commands+=("get-catalog-import-status"); 
$commands+=("get-classifier"); 
$commands+=("get-classifiers"); 
$commands+=("get-connection"); 
$commands+=("get-connections"); 
$commands+=("get-crawler"); 
$commands+=("get-crawler-metrics"); 
$commands+=("get-crawlers"); 
$commands+=("get-data-catalog-encryption-settings"); 
$commands+=("get-database"); 
$commands+=("get-databases"); 
$commands+=("get-dataflow-graph"); 
$commands+=("get-dev-endpoint"); 
$commands+=("get-dev-endpoints"); 
$commands+=("get-job"); 
$commands+=("get-job-bookmark"); 
$commands+=("get-job-run"); 
$commands+=("get-job-runs"); 
$commands+=("get-jobs"); 
$commands+=("get-mapping"); 
$commands+=("get-ml-task-run"); 
$commands+=("get-ml-task-runs"); 
$commands+=("get-ml-transform"); 
$commands+=("get-ml-transforms"); 
$commands+=("get-partition"); 
$commands+=("get-partitions"); 
$commands+=("get-plan"); 
$commands+=("get-resource-policy"); 
$commands+=("get-security-configuration"); 
$commands+=("get-security-configurations"); 
$commands+=("get-table"); 
$commands+=("get-table-version"); 
$commands+=("get-table-versions"); 
$commands+=("get-tables"); 
$commands+=("get-tags"); 
$commands+=("get-trigger"); 
$commands+=("get-triggers"); 
$commands+=("get-user-defined-"); 
$commands+=("get-user-defined-functions"); 
$commands+=("get-workflow"); 
$commands+=("get-workflow-run"); 
$commands+=("get-workflow-run-properties"); 
$commands+=("get-workflow-runs"); 
$commands+=("import-catalog-to-glue"); 
$commands+=("list-crawlers"); 
$commands+=("list-dev-endpoints"); 
$commands+=("list-jobs"); 
$commands+=("list-ml-transforms"); 
$commands+=("list-triggers"); 
$commands+=("list-workflows"); 
$commands+=("put-data-catalog-encryption-settings"); 
$commands+=("put-resource-policy"); 
$commands+=("put-workflow-run-properties"); 
$commands+=("reset-job-bookmark"); 
$commands+=("search-tables"); 
$commands+=("start-crawler"); 
$commands+=("start-crawler-schedule"); 
$commands+=("start-export-labels-task-run"); 
$commands+=("start-import-labels-task-run"); 
$commands+=("start-job-run"); 
$commands+=("start-ml-evaluation-task-run"); 
$commands+=("start-ml-labeling-set-generation-task-run"); 
$commands+=("start-trigger"); 
$commands+=("start-workflow-run"); 
$commands+=("stop-crawler"); 
$commands+=("stop-crawler-schedule"); 
$commands+=("stop-trigger"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-classifier"); 
$commands+=("update-connection"); 
$commands+=("update-crawler"); 
$commands+=("update-crawler-schedule"); 
$commands+=("update-database"); 
$commands+=("update-dev-endpoint"); 
$commands+=("update-job"); 
$commands+=("update-ml-transform"); 
$commands+=("update-partition"); 
$commands+=("update-table"); 
$commands+=("update-trigger"); 
$commands+=("update-user-defined-"); 
$commands+=("update-workflow");

return $commands;
}

 function Get-glue-batch-create-partition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--database-name"); 
$flags+=("--table-name"); 
$flags+=("--partition-input-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-batch-delete-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--connection-name-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-batch-delete-partition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--database-name"); 
$flags+=("--table-name"); 
$flags+=("--partitions-to-delete"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-batch-delete-table {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--database-name"); 
$flags+=("--tables-to-delete"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-batch-delete-table-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--database-name"); 
$flags+=("--table-name"); 
$flags+=("--version-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-batch-get-crawlers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--crawler-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-batch-get-dev-endpoints {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dev-endpoint-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-batch-get-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-batch-get-partition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--database-name"); 
$flags+=("--table-name"); 
$flags+=("--partitions-to-get"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-batch-get-triggers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--trigger-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-batch-get-workflows {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--names"); 
$flags+=("--include-graph"); 
$flags+=("--no-include-graph"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-batch-stop-job-run {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-name"); 
$flags+=("--job-run-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-cancel-ml-task-run {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transform-id"); 
$flags+=("--task-run-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-create-classifier {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--grok-classifier"); 
$flags+=("--xml-classifier"); 
$flags+=("--json-classifier"); 
$flags+=("--csv-classifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-create-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--connection-input"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-create-crawler {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--role"); 
$flags+=("--database-name"); 
$flags+=("--description"); 
$flags+=("--targets"); 
$flags+=("--schedule"); 
$flags+=("--classifiers"); 
$flags+=("--table-prefix"); 
$flags+=("--schema-change-policy"); 
$flags+=("--configuration"); 
$flags+=("--crawler-security-configuration"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-create-database {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--database-input"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-create-dev-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-name"); 
$flags+=("--role-arn"); 
$flags+=("--security-group-ids"); 
$flags+=("--subnet-id"); 
$flags+=("--public-key"); 
$flags+=("--public-keys"); 
$flags+=("--number-of-nodes"); 
$flags+=("--worker-type"); 
$flags+=("--glue-version"); 
$flags+=("--number-of-workers"); 
$flags+=("--extra-python-libs-s"); 
$flags+=("--extra-jars-s"); 
$flags+=("--security-configuration"); 
$flags+=("--tags"); 
$flags+=("--arguments"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-create-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--log-uri"); 
$flags+=("--role"); 
$flags+=("--execution-property"); 
$flags+=("--command"); 
$flags+=("--default-arguments"); 
$flags+=("--non-overridable-arguments"); 
$flags+=("--connections"); 
$flags+=("--max-retries"); 
$flags+=("--allocated-capacity"); 
$flags+=("--timeout"); 
$flags+=("--max-capacity"); 
$flags+=("--security-configuration"); 
$flags+=("--tags"); 
$flags+=("--notification-property"); 
$flags+=("--glue-version"); 
$flags+=("--number-of-workers"); 
$flags+=("--worker-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-create-ml-transform {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--input-record-tables"); 
$flags+=("--parameters"); 
$flags+=("--role"); 
$flags+=("--glue-version"); 
$flags+=("--max-capacity"); 
$flags+=("--worker-type"); 
$flags+=("--number-of-workers"); 
$flags+=("--timeout"); 
$flags+=("--max-retries"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-create-partition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--database-name"); 
$flags+=("--table-name"); 
$flags+=("--partition-input"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-create-script {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dag-nodes"); 
$flags+=("--dag-edges"); 
$flags+=("--language"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-create-security-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--encryption-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-create-table {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--database-name"); 
$flags+=("--table-input"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-create-trigger {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--workflow-name"); 
$flags+=("--type"); 
$flags+=("--schedule"); 
$flags+=("--predicate"); 
$flags+=("--actions"); 
$flags+=("--description"); 
$flags+=("--start-on-creation"); 
$flags+=("--no-start-on-creation"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-create-user-defined- {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--database-name"); 
$flags+=("---input"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-create-workflow {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--default-run-properties"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-delete-classifier {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-delete-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--connection-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-delete-crawler {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-delete-database {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-delete-dev-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-delete-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-delete-ml-transform {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transform-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-delete-partition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--database-name"); 
$flags+=("--table-name"); 
$flags+=("--partition-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-delete-resource-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-hash-condition"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-delete-security-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-delete-table {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--database-name"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-delete-table-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--database-name"); 
$flags+=("--table-name"); 
$flags+=("--version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-delete-trigger {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-delete-user-defined- {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--database-name"); 
$flags+=("---name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-delete-workflow {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-catalog-import-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-classifier {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-classifiers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--name"); 
$flags+=("--hide-password"); 
$flags+=("--no-hide-password"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-connections {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--filter"); 
$flags+=("--hide-password"); 
$flags+=("--no-hide-password"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-crawler {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-crawler-metrics {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--crawler-name-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-crawlers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-data-catalog-encryption-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-database {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-databases {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-dataflow-graph {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--python-script"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-dev-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-dev-endpoints {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-job-bookmark {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-name"); 
$flags+=("--run-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-job-run {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-name"); 
$flags+=("--run-id"); 
$flags+=("--predecessors-included"); 
$flags+=("--no-predecessors-included"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-job-runs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-mapping {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source"); 
$flags+=("--sinks"); 
$flags+=("--location"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-ml-task-run {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transform-id"); 
$flags+=("--task-run-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-ml-task-runs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transform-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--filter"); 
$flags+=("--sort"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-ml-transform {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transform-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-ml-transforms {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--filter"); 
$flags+=("--sort"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-partition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--database-name"); 
$flags+=("--table-name"); 
$flags+=("--partition-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-partitions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--database-name"); 
$flags+=("--table-name"); 
$flags+=("--expression"); 
$flags+=("--segment"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-plan {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--mapping"); 
$flags+=("--source"); 
$flags+=("--sinks"); 
$flags+=("--location"); 
$flags+=("--language"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-resource-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-security-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-security-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-table {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--database-name"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-table-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--database-name"); 
$flags+=("--table-name"); 
$flags+=("--version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-table-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--database-name"); 
$flags+=("--table-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-tables {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--database-name"); 
$flags+=("--expression"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-trigger {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-triggers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dependent-job-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-user-defined- {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--database-name"); 
$flags+=("---name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-user-defined-functions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--database-name"); 
$flags+=("--pattern"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-workflow {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--include-graph"); 
$flags+=("--no-include-graph"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-workflow-run {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--run-id"); 
$flags+=("--include-graph"); 
$flags+=("--no-include-graph"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-workflow-run-properties {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--run-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-get-workflow-runs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--include-graph"); 
$flags+=("--no-include-graph"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-import-catalog-to-glue {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-list-crawlers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-list-dev-endpoints {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-list-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-list-ml-transforms {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--filter"); 
$flags+=("--sort"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-list-triggers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--dependent-job-name"); 
$flags+=("--max-results"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-list-workflows {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-put-data-catalog-encryption-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--data-catalog-encryption-settings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-put-resource-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-in-json"); 
$flags+=("--policy-hash-condition"); 
$flags+=("--policy-exists-condition"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-put-workflow-run-properties {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--run-id"); 
$flags+=("--run-properties"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-reset-job-bookmark {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-name"); 
$flags+=("--run-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-search-tables {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--next-token"); 
$flags+=("--filters"); 
$flags+=("--search-text"); 
$flags+=("--sort-criteria"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-start-crawler {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-start-crawler-schedule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--crawler-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-start-export-labels-task-run {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transform-id"); 
$flags+=("--output-s"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-start-import-labels-task-run {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transform-id"); 
$flags+=("--input-s"); 
$flags+=("--replace-all-labels"); 
$flags+=("--no-replace-all-labels"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-start-job-run {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-name"); 
$flags+=("--job-run-id"); 
$flags+=("--arguments"); 
$flags+=("--allocated-capacity"); 
$flags+=("--timeout"); 
$flags+=("--max-capacity"); 
$flags+=("--security-configuration"); 
$flags+=("--notification-property"); 
$flags+=("--worker-type"); 
$flags+=("--number-of-workers"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-start-ml-evaluation-task-run {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transform-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-start-ml-labeling-set-generation-task-run {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transform-id"); 
$flags+=("--output-s"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-start-trigger {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-start-workflow-run {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-stop-crawler {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-stop-crawler-schedule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--crawler-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-stop-trigger {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags-to-add"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags-to-remove"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-update-classifier {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--grok-classifier"); 
$flags+=("--xml-classifier"); 
$flags+=("--json-classifier"); 
$flags+=("--csv-classifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-update-connection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--name"); 
$flags+=("--connection-input"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-update-crawler {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--role"); 
$flags+=("--database-name"); 
$flags+=("--description"); 
$flags+=("--targets"); 
$flags+=("--schedule"); 
$flags+=("--classifiers"); 
$flags+=("--table-prefix"); 
$flags+=("--schema-change-policy"); 
$flags+=("--configuration"); 
$flags+=("--crawler-security-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-update-crawler-schedule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--crawler-name"); 
$flags+=("--schedule"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-update-database {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--name"); 
$flags+=("--database-input"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-update-dev-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-name"); 
$flags+=("--public-key"); 
$flags+=("--add-public-keys"); 
$flags+=("--delete-public-keys"); 
$flags+=("--custom-libraries"); 
$flags+=("--update-etl-libraries"); 
$flags+=("--no-update-etl-libraries"); 
$flags+=("--delete-arguments"); 
$flags+=("--add-arguments"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-update-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-name"); 
$flags+=("--job-update"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-update-ml-transform {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transform-id"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--parameters"); 
$flags+=("--role"); 
$flags+=("--glue-version"); 
$flags+=("--max-capacity"); 
$flags+=("--worker-type"); 
$flags+=("--number-of-workers"); 
$flags+=("--timeout"); 
$flags+=("--max-retries"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-update-partition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--database-name"); 
$flags+=("--table-name"); 
$flags+=("--partition-value-list"); 
$flags+=("--partition-input"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-update-table {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--database-name"); 
$flags+=("--table-input"); 
$flags+=("--skip-archive"); 
$flags+=("--no-skip-archive"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-update-trigger {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--trigger-update"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-update-user-defined- {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--database-name"); 
$flags+=("---name"); 
$flags+=("---input"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-glue-update-workflow {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--default-run-properties"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-role-to-group"); 
$commands+=("associate-service-role-to-account"); 
$commands+=("create-connector-definition"); 
$commands+=("create-connector-definition-version"); 
$commands+=("create-core-definition"); 
$commands+=("create-core-definition-version"); 
$commands+=("create-deployment"); 
$commands+=("create-device-definition"); 
$commands+=("create-device-definition-version"); 
$commands+=("create--definition"); 
$commands+=("create--definition-version"); 
$commands+=("create-group"); 
$commands+=("create-group-certificate-authority"); 
$commands+=("create-group-version"); 
$commands+=("create-logger-definition"); 
$commands+=("create-logger-definition-version"); 
$commands+=("create-resource-definition"); 
$commands+=("create-resource-definition-version"); 
$commands+=("create-software-update-job"); 
$commands+=("create-subscription-definition"); 
$commands+=("create-subscription-definition-version"); 
$commands+=("delete-connector-definition"); 
$commands+=("delete-core-definition"); 
$commands+=("delete-device-definition"); 
$commands+=("delete--definition"); 
$commands+=("delete-group"); 
$commands+=("delete-logger-definition"); 
$commands+=("delete-resource-definition"); 
$commands+=("delete-subscription-definition"); 
$commands+=("disassociate-role-from-group"); 
$commands+=("disassociate-service-role-from-account"); 
$commands+=("get-associated-role"); 
$commands+=("get-bulk-deployment-status"); 
$commands+=("get-connectivity-info"); 
$commands+=("get-connector-definition"); 
$commands+=("get-connector-definition-version"); 
$commands+=("get-core-definition"); 
$commands+=("get-core-definition-version"); 
$commands+=("get-deployment-status"); 
$commands+=("get-device-definition"); 
$commands+=("get-device-definition-version"); 
$commands+=("get--definition"); 
$commands+=("get--definition-version"); 
$commands+=("get-group"); 
$commands+=("get-group-certificate-authority"); 
$commands+=("get-group-certificate-configuration"); 
$commands+=("get-group-version"); 
$commands+=("get-logger-definition"); 
$commands+=("get-logger-definition-version"); 
$commands+=("get-resource-definition"); 
$commands+=("get-resource-definition-version"); 
$commands+=("get-service-role-for-account"); 
$commands+=("get-subscription-definition"); 
$commands+=("get-subscription-definition-version"); 
$commands+=("list-bulk-deployment-detailed-reports"); 
$commands+=("list-bulk-deployments"); 
$commands+=("list-connector-definition-versions"); 
$commands+=("list-connector-definitions"); 
$commands+=("list-core-definition-versions"); 
$commands+=("list-core-definitions"); 
$commands+=("list-deployments"); 
$commands+=("list-device-definition-versions"); 
$commands+=("list-device-definitions"); 
$commands+=("list--definition-versions"); 
$commands+=("list--definitions"); 
$commands+=("list-group-certificate-authorities"); 
$commands+=("list-group-versions"); 
$commands+=("list-groups"); 
$commands+=("list-logger-definition-versions"); 
$commands+=("list-logger-definitions"); 
$commands+=("list-resource-definition-versions"); 
$commands+=("list-resource-definitions"); 
$commands+=("list-subscription-definition-versions"); 
$commands+=("list-subscription-definitions"); 
$commands+=("list-tags-for-resource"); 
$commands+=("reset-deployments"); 
$commands+=("start-bulk-deployment"); 
$commands+=("stop-bulk-deployment"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-connectivity-info"); 
$commands+=("update-connector-definition"); 
$commands+=("update-core-definition"); 
$commands+=("update-device-definition"); 
$commands+=("update--definition"); 
$commands+=("update-group"); 
$commands+=("update-group-certificate-configuration"); 
$commands+=("update-logger-definition"); 
$commands+=("update-resource-definition"); 
$commands+=("update-subscription-definition");

return $commands;
}

 function Get-greengrass-associate-role-to-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-id"); 
$flags+=("--role-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-associate-service-role-to-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-create-connector-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--amzn-client-token"); 
$flags+=("--initial-version"); 
$flags+=("--name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-create-connector-definition-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--amzn-client-token"); 
$flags+=("--connector-definition-id"); 
$flags+=("--connectors"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-create-core-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--amzn-client-token"); 
$flags+=("--initial-version"); 
$flags+=("--name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-create-core-definition-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--amzn-client-token"); 
$flags+=("--core-definition-id"); 
$flags+=("--cores"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-create-deployment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--amzn-client-token"); 
$flags+=("--deployment-id"); 
$flags+=("--deployment-type"); 
$flags+=("--group-id"); 
$flags+=("--group-version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-create-device-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--amzn-client-token"); 
$flags+=("--initial-version"); 
$flags+=("--name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-create-device-definition-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--amzn-client-token"); 
$flags+=("--device-definition-id"); 
$flags+=("--devices"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-create--definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--amzn-client-token"); 
$flags+=("--initial-version"); 
$flags+=("--name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-create--definition-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--amzn-client-token"); 
$flags+=("--default-config"); 
$flags+=("---definition-id"); 
$flags+=("--functions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-create-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--amzn-client-token"); 
$flags+=("--initial-version"); 
$flags+=("--name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-create-group-certificate-authority {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--amzn-client-token"); 
$flags+=("--group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-create-group-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--amzn-client-token"); 
$flags+=("--connector-definition-version-arn"); 
$flags+=("--core-definition-version-arn"); 
$flags+=("--device-definition-version-arn"); 
$flags+=("---definition-version-arn"); 
$flags+=("--group-id"); 
$flags+=("--logger-definition-version-arn"); 
$flags+=("--resource-definition-version-arn"); 
$flags+=("--subscription-definition-version-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-create-logger-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--amzn-client-token"); 
$flags+=("--initial-version"); 
$flags+=("--name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-create-logger-definition-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--amzn-client-token"); 
$flags+=("--logger-definition-id"); 
$flags+=("--loggers"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-create-resource-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--amzn-client-token"); 
$flags+=("--initial-version"); 
$flags+=("--name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-create-resource-definition-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--amzn-client-token"); 
$flags+=("--resource-definition-id"); 
$flags+=("--resources"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-create-software-update-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--amzn-client-token"); 
$flags+=("--s"); 
$flags+=("--software-to-update"); 
$flags+=("--update-agent-log-level"); 
$flags+=("--update-targets"); 
$flags+=("--update-targets-architecture"); 
$flags+=("--update-targets-operating-system"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-create-subscription-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--amzn-client-token"); 
$flags+=("--initial-version"); 
$flags+=("--name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-create-subscription-definition-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--amzn-client-token"); 
$flags+=("--subscription-definition-id"); 
$flags+=("--subscriptions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-delete-connector-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connector-definition-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-delete-core-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--core-definition-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-delete-device-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-definition-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-delete--definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---definition-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-delete-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-delete-logger-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--logger-definition-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-delete-resource-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-definition-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-delete-subscription-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-definition-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-disassociate-role-from-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-disassociate-service-role-from-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-get-associated-role {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-get-bulk-deployment-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bulk-deployment-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-get-connectivity-info {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-get-connector-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connector-definition-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-get-connector-definition-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connector-definition-id"); 
$flags+=("--connector-definition-version-id"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-get-core-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--core-definition-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-get-core-definition-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--core-definition-id"); 
$flags+=("--core-definition-version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-get-deployment-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--deployment-id"); 
$flags+=("--group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-get-device-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-definition-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-get-device-definition-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-definition-id"); 
$flags+=("--device-definition-version-id"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-get--definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---definition-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-get--definition-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---definition-id"); 
$flags+=("---definition-version-id"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-get-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-get-group-certificate-authority {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-authority-id"); 
$flags+=("--group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-get-group-certificate-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-get-group-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-id"); 
$flags+=("--group-version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-get-logger-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--logger-definition-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-get-logger-definition-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--logger-definition-id"); 
$flags+=("--logger-definition-version-id"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-get-resource-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-definition-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-get-resource-definition-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-definition-id"); 
$flags+=("--resource-definition-version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-get-service-role-for-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-get-subscription-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-definition-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-get-subscription-definition-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--subscription-definition-id"); 
$flags+=("--subscription-definition-version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-list-bulk-deployment-detailed-reports {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bulk-deployment-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-list-bulk-deployments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-list-connector-definition-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connector-definition-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-list-connector-definitions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-list-core-definition-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--core-definition-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-list-core-definitions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-list-deployments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-list-device-definition-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-definition-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-list-device-definitions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-list--definition-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---definition-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-list--definitions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-list-group-certificate-authorities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-list-group-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-list-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-list-logger-definition-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--logger-definition-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-list-logger-definitions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-list-resource-definition-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-definition-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-list-resource-definitions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-list-subscription-definition-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-definition-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-list-subscription-definitions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-reset-deployments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--amzn-client-token"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-start-bulk-deployment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--amzn-client-token"); 
$flags+=("--execution-role-arn"); 
$flags+=("--input-file-uri"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-stop-bulk-deployment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bulk-deployment-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-update-connectivity-info {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connectivity-info"); 
$flags+=("--thing-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-update-connector-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connector-definition-id"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-update-core-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--core-definition-id"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-update-device-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-definition-id"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-update--definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---definition-id"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-update-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-id"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-update-group-certificate-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-expiry-in-milliseconds"); 
$flags+=("--group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-update-logger-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--logger-definition-id"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-update-resource-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--resource-definition-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-greengrass-update-subscription-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--subscription-definition-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation {
    $commands = [System.Collections.ArrayList]@();

$commands+=("cancel-contact"); 
$commands+=("create-config"); 
$commands+=("create-dataflow-endpoint-group"); 
$commands+=("create-mission-profile"); 
$commands+=("delete-config"); 
$commands+=("delete-dataflow-endpoint-group"); 
$commands+=("delete-mission-profile"); 
$commands+=("describe-contact"); 
$commands+=("get-config"); 
$commands+=("get-dataflow-endpoint-group"); 
$commands+=("get-minute-usage"); 
$commands+=("get-mission-profile"); 
$commands+=("get-satellite"); 
$commands+=("list-configs"); 
$commands+=("list-contacts"); 
$commands+=("list-dataflow-endpoint-groups"); 
$commands+=("list-ground-stations"); 
$commands+=("list-mission-profiles"); 
$commands+=("list-satellites"); 
$commands+=("list-tags-for-resource"); 
$commands+=("reserve-contact"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-config"); 
$commands+=("update-mission-profile");

return $commands;
}

 function Get-groundstation-cancel-contact {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--contact-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation-create-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--config-data"); 
$flags+=("--name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation-create-dataflow-endpoint-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-details"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation-create-mission-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--contact-post-pass-duration-seconds"); 
$flags+=("--contact-pre-pass-duration-seconds"); 
$flags+=("--dataflow-edges"); 
$flags+=("--minimum-viable-contact-duration-seconds"); 
$flags+=("--name"); 
$flags+=("--tags"); 
$flags+=("--tracking-config-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation-delete-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--config-id"); 
$flags+=("--config-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation-delete-dataflow-endpoint-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataflow-endpoint-group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation-delete-mission-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--mission-profile-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation-describe-contact {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--contact-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation-get-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--config-id"); 
$flags+=("--config-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation-get-dataflow-endpoint-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataflow-endpoint-group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation-get-minute-usage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--month"); 
$flags+=("--year"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation-get-mission-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--mission-profile-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation-get-satellite {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--satellite-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation-list-configs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation-list-contacts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--end-time"); 
$flags+=("--ground-station"); 
$flags+=("--mission-profile-arn"); 
$flags+=("--satellite-arn"); 
$flags+=("--start-time"); 
$flags+=("--status-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation-list-dataflow-endpoint-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation-list-ground-stations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--satellite-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation-list-mission-profiles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation-list-satellites {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation-reserve-contact {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--end-time"); 
$flags+=("--ground-station"); 
$flags+=("--mission-profile-arn"); 
$flags+=("--satellite-arn"); 
$flags+=("--start-time"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation-update-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--config-data"); 
$flags+=("--config-id"); 
$flags+=("--config-type"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-groundstation-update-mission-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--contact-post-pass-duration-seconds"); 
$flags+=("--contact-pre-pass-duration-seconds"); 
$flags+=("--dataflow-edges"); 
$flags+=("--minimum-viable-contact-duration-seconds"); 
$flags+=("--mission-profile-id"); 
$flags+=("--name"); 
$flags+=("--tracking-config-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty {
    $commands = [System.Collections.ArrayList]@();

$commands+=("accept-invitation"); 
$commands+=("archive-findings"); 
$commands+=("create-detector"); 
$commands+=("create-filter"); 
$commands+=("create-ip-set"); 
$commands+=("create-members"); 
$commands+=("create-publishing-destination"); 
$commands+=("create-sample-findings"); 
$commands+=("create-threat-intel-set"); 
$commands+=("decline-invitations"); 
$commands+=("delete-detector"); 
$commands+=("delete-filter"); 
$commands+=("delete-invitations"); 
$commands+=("delete-ip-set"); 
$commands+=("delete-members"); 
$commands+=("delete-publishing-destination"); 
$commands+=("delete-threat-intel-set"); 
$commands+=("describe-organization-configuration"); 
$commands+=("describe-publishing-destination"); 
$commands+=("disable-organization-admin-account"); 
$commands+=("disassociate-from-master-account"); 
$commands+=("disassociate-members"); 
$commands+=("enable-organization-admin-account"); 
$commands+=("get-detector"); 
$commands+=("get-filter"); 
$commands+=("get-findings"); 
$commands+=("get-findings-statistics"); 
$commands+=("get-invitations-count"); 
$commands+=("get-ip-set"); 
$commands+=("get-master-account"); 
$commands+=("get-members"); 
$commands+=("get-threat-intel-set"); 
$commands+=("invite-members"); 
$commands+=("list-detectors"); 
$commands+=("list-filters"); 
$commands+=("list-findings"); 
$commands+=("list-invitations"); 
$commands+=("list-ip-sets"); 
$commands+=("list-members"); 
$commands+=("list-organization-admin-accounts"); 
$commands+=("list-publishing-destinations"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-threat-intel-sets"); 
$commands+=("start-monitoring-members"); 
$commands+=("stop-monitoring-members"); 
$commands+=("tag-resource"); 
$commands+=("unarchive-findings"); 
$commands+=("untag-resource"); 
$commands+=("update-detector"); 
$commands+=("update-filter"); 
$commands+=("update-findings-feedback"); 
$commands+=("update-ip-set"); 
$commands+=("update-organization-configuration"); 
$commands+=("update-publishing-destination"); 
$commands+=("update-threat-intel-set");

return $commands;
}

 function Get-guardduty-accept-invitation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--master-id"); 
$flags+=("--invitation-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-archive-findings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--finding-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-create-detector {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--enable"); 
$flags+=("--no-enable"); 
$flags+=("--client-token"); 
$flags+=("--finding-publishing-frequency"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-create-filter {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--action"); 
$flags+=("--rank"); 
$flags+=("--finding-criteria"); 
$flags+=("--client-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-create-ip-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--name"); 
$flags+=("--format"); 
$flags+=("--location"); 
$flags+=("--activate"); 
$flags+=("--no-activate"); 
$flags+=("--client-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-create-members {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--account-details"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-create-publishing-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--destination-type"); 
$flags+=("--destination-properties"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-create-sample-findings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--finding-types"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-create-threat-intel-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--name"); 
$flags+=("--format"); 
$flags+=("--location"); 
$flags+=("--activate"); 
$flags+=("--no-activate"); 
$flags+=("--client-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-decline-invitations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-delete-detector {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-delete-filter {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--filter-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-delete-invitations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-delete-ip-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--ip-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-delete-members {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--account-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-delete-publishing-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--destination-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-delete-threat-intel-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--threat-intel-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-describe-organization-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-describe-publishing-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--destination-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-disable-organization-admin-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--admin-account-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-disassociate-from-master-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-disassociate-members {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--account-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-enable-organization-admin-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--admin-account-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-get-detector {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-get-filter {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--filter-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-get-findings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--finding-ids"); 
$flags+=("--sort-criteria"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-get-findings-statistics {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--finding-statistic-types"); 
$flags+=("--finding-criteria"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-get-invitations-count {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-get-ip-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--ip-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-get-master-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-get-members {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--account-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-get-threat-intel-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--threat-intel-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-invite-members {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--account-ids"); 
$flags+=("--disable-email-notification"); 
$flags+=("--no-disable-email-notification"); 
$flags+=("--message"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-list-detectors {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-list-filters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-list-findings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--finding-criteria"); 
$flags+=("--sort-criteria"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-list-invitations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-list-ip-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-list-members {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--only-associated"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-list-organization-admin-accounts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-list-publishing-destinations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-list-threat-intel-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-start-monitoring-members {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--account-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-stop-monitoring-members {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--account-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-unarchive-findings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--finding-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-update-detector {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--enable"); 
$flags+=("--no-enable"); 
$flags+=("--finding-publishing-frequency"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-update-filter {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--filter-name"); 
$flags+=("--description"); 
$flags+=("--action"); 
$flags+=("--rank"); 
$flags+=("--finding-criteria"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-update-findings-feedback {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--finding-ids"); 
$flags+=("--feedback"); 
$flags+=("--comments"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-update-ip-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--ip-set-id"); 
$flags+=("--name"); 
$flags+=("--location"); 
$flags+=("--activate"); 
$flags+=("--no-activate"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-update-organization-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--auto-enable"); 
$flags+=("--no-auto-enable"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-update-publishing-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--destination-id"); 
$flags+=("--destination-properties"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-guardduty-update-threat-intel-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-id"); 
$flags+=("--threat-intel-set-id"); 
$flags+=("--name"); 
$flags+=("--location"); 
$flags+=("--activate"); 
$flags+=("--no-activate"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-health {
    $commands = [System.Collections.ArrayList]@();

$commands+=("describe-affected-accounts-for-organization"); 
$commands+=("describe-affected-entities"); 
$commands+=("describe-affected-entities-for-organization"); 
$commands+=("describe-entity-aggregates"); 
$commands+=("describe-event-aggregates"); 
$commands+=("describe-event-details"); 
$commands+=("describe-event-details-for-organization"); 
$commands+=("describe-event-types"); 
$commands+=("describe-events"); 
$commands+=("describe-events-for-organization"); 
$commands+=("describe-health-service-status-for-organization"); 
$commands+=("disable-health-service-access-for-organization"); 
$commands+=("enable-health-service-access-for-organization");

return $commands;
}

 function Get-health-describe-affected-accounts-for-organization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--event-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-health-describe-affected-entities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--locale"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-health-describe-affected-entities-for-organization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-entity-filters"); 
$flags+=("--locale"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-health-describe-entity-aggregates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--event-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-health-describe-event-aggregates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--aggregate-field"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-health-describe-event-details {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--event-arns"); 
$flags+=("--locale"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-health-describe-event-details-for-organization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-event-detail-filters"); 
$flags+=("--locale"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-health-describe-event-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--locale"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-health-describe-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--locale"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-health-describe-events-for-organization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--locale"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-health-describe-health-service-status-for-organization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-health-disable-health-service-access-for-organization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-health-enable-health-service-access-for-organization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-history {
    $commands = [System.Collections.ArrayList]@();

$commands+=("list"); 
$commands+=("show");

return $commands;
}

 function Get-history-list {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-history-show {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--include"); 
$flags+=("--exclude"); 
$flags+=("--format");

return $flags;
}

 function Get-iam {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-client-id-to-open-id-connect-provider"); 
$commands+=("add-role-to-instance-profile"); 
$commands+=("add-user-to-group"); 
$commands+=("attach-group-policy"); 
$commands+=("attach-role-policy"); 
$commands+=("attach-user-policy"); 
$commands+=("change-password"); 
$commands+=("create-access-key"); 
$commands+=("create-account-alias"); 
$commands+=("create-group"); 
$commands+=("create-instance-profile"); 
$commands+=("create-login-profile"); 
$commands+=("create-open-id-connect-provider"); 
$commands+=("create-policy"); 
$commands+=("create-policy-version"); 
$commands+=("create-role"); 
$commands+=("create-saml-provider"); 
$commands+=("create-service-linked-role"); 
$commands+=("create-service-specific-credential"); 
$commands+=("create-user"); 
$commands+=("create-virtual-mfa-device"); 
$commands+=("deactivate-mfa-device"); 
$commands+=("delete-access-key"); 
$commands+=("delete-account-alias"); 
$commands+=("delete-account-password-policy"); 
$commands+=("delete-group"); 
$commands+=("delete-group-policy"); 
$commands+=("delete-instance-profile"); 
$commands+=("delete-login-profile"); 
$commands+=("delete-open-id-connect-provider"); 
$commands+=("delete-policy"); 
$commands+=("delete-policy-version"); 
$commands+=("delete-role"); 
$commands+=("delete-role-permissions-boundary"); 
$commands+=("delete-role-policy"); 
$commands+=("delete-saml-provider"); 
$commands+=("delete-server-certificate"); 
$commands+=("delete-service-linked-role"); 
$commands+=("delete-service-specific-credential"); 
$commands+=("delete-signing-certificate"); 
$commands+=("delete-ssh-public-key"); 
$commands+=("delete-user"); 
$commands+=("delete-user-permissions-boundary"); 
$commands+=("delete-user-policy"); 
$commands+=("delete-virtual-mfa-device"); 
$commands+=("detach-group-policy"); 
$commands+=("detach-role-policy"); 
$commands+=("detach-user-policy"); 
$commands+=("enable-mfa-device"); 
$commands+=("generate-credential-report"); 
$commands+=("generate-organizations-access-report"); 
$commands+=("generate-service-last-accessed-details"); 
$commands+=("get-access-key-last-used"); 
$commands+=("get-account-authorization-details"); 
$commands+=("get-account-password-policy"); 
$commands+=("get-account-summary"); 
$commands+=("get-context-keys-for-custom-policy"); 
$commands+=("get-context-keys-for-principal-policy"); 
$commands+=("get-credential-report"); 
$commands+=("get-group"); 
$commands+=("get-group-policy"); 
$commands+=("get-instance-profile"); 
$commands+=("get-login-profile"); 
$commands+=("get-open-id-connect-provider"); 
$commands+=("get-organizations-access-report"); 
$commands+=("get-policy"); 
$commands+=("get-policy-version"); 
$commands+=("get-role"); 
$commands+=("get-role-policy"); 
$commands+=("get-saml-provider"); 
$commands+=("get-server-certificate"); 
$commands+=("get-service-last-accessed-details"); 
$commands+=("get-service-last-accessed-details-with-entities"); 
$commands+=("get-service-linked-role-deletion-status"); 
$commands+=("get-ssh-public-key"); 
$commands+=("get-user"); 
$commands+=("get-user-policy"); 
$commands+=("list-access-keys"); 
$commands+=("list-account-aliases"); 
$commands+=("list-attached-group-policies"); 
$commands+=("list-attached-role-policies"); 
$commands+=("list-attached-user-policies"); 
$commands+=("list-entities-for-policy"); 
$commands+=("list-group-policies"); 
$commands+=("list-groups"); 
$commands+=("list-groups-for-user"); 
$commands+=("list-instance-profiles"); 
$commands+=("list-instance-profiles-for-role"); 
$commands+=("list-mfa-devices"); 
$commands+=("list-open-id-connect-providers"); 
$commands+=("list-policies"); 
$commands+=("list-policies-granting-service-access"); 
$commands+=("list-policy-versions"); 
$commands+=("list-role-policies"); 
$commands+=("list-role-tags"); 
$commands+=("list-roles"); 
$commands+=("list-saml-providers"); 
$commands+=("list-server-certificates"); 
$commands+=("list-service-specific-credentials"); 
$commands+=("list-signing-certificates"); 
$commands+=("list-ssh-public-keys"); 
$commands+=("list-user-policies"); 
$commands+=("list-user-tags"); 
$commands+=("list-users"); 
$commands+=("list-virtual-mfa-devices"); 
$commands+=("put-group-policy"); 
$commands+=("put-role-permissions-boundary"); 
$commands+=("put-role-policy"); 
$commands+=("put-user-permissions-boundary"); 
$commands+=("put-user-policy"); 
$commands+=("remove-client-id-from-open-id-connect-provider"); 
$commands+=("remove-role-from-instance-profile"); 
$commands+=("remove-user-from-group"); 
$commands+=("reset-service-specific-credential"); 
$commands+=("resync-mfa-device"); 
$commands+=("set-default-policy-version"); 
$commands+=("set-security-token-service-preferences"); 
$commands+=("simulate-custom-policy"); 
$commands+=("simulate-principal-policy"); 
$commands+=("tag-role"); 
$commands+=("tag-user"); 
$commands+=("untag-role"); 
$commands+=("untag-user"); 
$commands+=("update-access-key"); 
$commands+=("update-account-password-policy"); 
$commands+=("update-assume-role-policy"); 
$commands+=("update-group"); 
$commands+=("update-login-profile"); 
$commands+=("update-open-id-connect-provider-thumbprint"); 
$commands+=("update-role"); 
$commands+=("update-role-description"); 
$commands+=("update-saml-provider"); 
$commands+=("update-server-certificate"); 
$commands+=("update-service-specific-credential"); 
$commands+=("update-signing-certificate"); 
$commands+=("update-ssh-public-key"); 
$commands+=("update-user"); 
$commands+=("upload-server-certificate"); 
$commands+=("upload-signing-certificate"); 
$commands+=("upload-ssh-public-key"); 
$commands+=("wait");

return $commands;
}

 function Get-iam-add-client-id-to-open-id-connect-provider {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--open-id-connect-provider-arn"); 
$flags+=("--client-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-add-role-to-instance-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-profile-name"); 
$flags+=("--role-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-add-user-to-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--user-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-attach-group-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--policy-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-attach-role-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-name"); 
$flags+=("--policy-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-attach-user-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--policy-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-change-password {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--old-password"); 
$flags+=("--new-password"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-create-access-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-create-account-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-alias"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-create-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--path"); 
$flags+=("--group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-create-instance-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-profile-name"); 
$flags+=("--path"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-create-login-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--password"); 
$flags+=("--password-reset-required"); 
$flags+=("--no-password-reset-required"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-create-open-id-connect-provider {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--url"); 
$flags+=("--client-id-list"); 
$flags+=("--thumbprint-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-create-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-name"); 
$flags+=("--path"); 
$flags+=("--policy-document"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-create-policy-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-arn"); 
$flags+=("--policy-document"); 
$flags+=("--set-as-default"); 
$flags+=("--no-set-as-default"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-create-role {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--path"); 
$flags+=("--role-name"); 
$flags+=("--assume-role-policy-document"); 
$flags+=("--description"); 
$flags+=("--max-session-duration"); 
$flags+=("--permissions-boundary"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-create-saml-provider {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--saml-metadata-document"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-create-service-linked-role {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-service-name"); 
$flags+=("--description"); 
$flags+=("--custom-suffix"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-create-service-specific-credential {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--service-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-create-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--path"); 
$flags+=("--user-name"); 
$flags+=("--permissions-boundary"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-create-virtual-mfa-device {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--path"); 
$flags+=("--virtual-mfa-device-name"); 
$flags+=("--outfile"); 
$flags+=("--bootstrap-method");

return $flags;
}

 function Get-iam-deactivate-mfa-device {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--serial-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-delete-access-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--access-key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-delete-account-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-alias"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-delete-account-password-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-delete-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-delete-group-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--policy-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-delete-instance-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-profile-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-delete-login-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-delete-open-id-connect-provider {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--open-id-connect-provider-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-delete-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-delete-policy-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-arn"); 
$flags+=("--version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-delete-role {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-delete-role-permissions-boundary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-delete-role-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-name"); 
$flags+=("--policy-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-delete-saml-provider {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--saml-provider-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-delete-server-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--server-certificate-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-delete-service-linked-role {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-delete-service-specific-credential {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--service-specific-credential-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-delete-signing-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--certificate-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-delete-ssh-public-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--ssh-public-key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-delete-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-delete-user-permissions-boundary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-delete-user-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--policy-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-delete-virtual-mfa-device {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--serial-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-detach-group-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--policy-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-detach-role-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-name"); 
$flags+=("--policy-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-detach-user-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--policy-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-enable-mfa-device {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--serial-number"); 
$flags+=("--authentication-code"); 
$flags+=("--authentication-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-generate-credential-report {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-generate-organizations-access-report {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--entity-path"); 
$flags+=("--organizations-policy-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-generate-service-last-accessed-details {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-access-key-last-used {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--access-key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-account-authorization-details {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-account-password-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-account-summary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-context-keys-for-custom-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-input-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-context-keys-for-principal-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-source-arn"); 
$flags+=("--policy-input-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-credential-report {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-group-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--policy-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-instance-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-profile-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-login-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-open-id-connect-provider {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--open-id-connect-provider-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-organizations-access-report {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--max-items"); 
$flags+=("--marker"); 
$flags+=("--sort-key"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-policy-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-arn"); 
$flags+=("--version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-role {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-role-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-name"); 
$flags+=("--policy-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-saml-provider {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--saml-provider-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-server-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--server-certificate-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-service-last-accessed-details {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--max-items"); 
$flags+=("--marker"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-service-last-accessed-details-with-entities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--service-namespace"); 
$flags+=("--max-items"); 
$flags+=("--marker"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-service-linked-role-deletion-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--deletion-task-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-ssh-public-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--ssh-public-key-id"); 
$flags+=("--encoding"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-get-user-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--policy-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-access-keys {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-account-aliases {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-attached-group-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--path-prefix"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-attached-role-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-name"); 
$flags+=("--path-prefix"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-attached-user-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--path-prefix"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-entities-for-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-arn"); 
$flags+=("--entity-filter"); 
$flags+=("--path-prefix"); 
$flags+=("--policy-usage-filter"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-group-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--path-prefix"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-groups-for-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-instance-profiles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--path-prefix"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-instance-profiles-for-role {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-name"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-mfa-devices {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-open-id-connect-providers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--scope"); 
$flags+=("--only-attached"); 
$flags+=("--no-only-attached"); 
$flags+=("--path-prefix"); 
$flags+=("--policy-usage-filter"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-policies-granting-service-access {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--marker"); 
$flags+=("--arn"); 
$flags+=("--service-namespaces"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-policy-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-arn"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-role-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-name"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-role-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-name"); 
$flags+=("--marker"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-roles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--path-prefix"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-saml-providers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-server-certificates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--path-prefix"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-service-specific-credentials {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--service-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-signing-certificates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-ssh-public-keys {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-user-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-user-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--marker"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-users {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--path-prefix"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-list-virtual-mfa-devices {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assignment-status"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-put-group-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--policy-name"); 
$flags+=("--policy-document"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-put-role-permissions-boundary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-name"); 
$flags+=("--permissions-boundary"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-put-role-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-name"); 
$flags+=("--policy-name"); 
$flags+=("--policy-document"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-put-user-permissions-boundary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--permissions-boundary"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-put-user-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--policy-name"); 
$flags+=("--policy-document"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-remove-client-id-from-open-id-connect-provider {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--open-id-connect-provider-arn"); 
$flags+=("--client-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-remove-role-from-instance-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-profile-name"); 
$flags+=("--role-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-remove-user-from-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--user-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-reset-service-specific-credential {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--service-specific-credential-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-resync-mfa-device {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--serial-number"); 
$flags+=("--authentication-code"); 
$flags+=("--authentication-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-set-default-policy-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-arn"); 
$flags+=("--version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-set-security-token-service-preferences {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-endpoint-token-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-simulate-custom-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-input-list"); 
$flags+=("--permissions-boundary-policy-input-list"); 
$flags+=("--action-names"); 
$flags+=("--resource-arns"); 
$flags+=("--resource-policy"); 
$flags+=("--resource-owner"); 
$flags+=("--caller-arn"); 
$flags+=("--context-entries"); 
$flags+=("--resource-handling-option"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-simulate-principal-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-source-arn"); 
$flags+=("--policy-input-list"); 
$flags+=("--permissions-boundary-policy-input-list"); 
$flags+=("--action-names"); 
$flags+=("--resource-arns"); 
$flags+=("--resource-policy"); 
$flags+=("--resource-owner"); 
$flags+=("--caller-arn"); 
$flags+=("--context-entries"); 
$flags+=("--resource-handling-option"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-tag-role {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-tag-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-untag-role {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-name"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-untag-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-update-access-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--access-key-id"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-update-account-password-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--minimum-password-length"); 
$flags+=("--require-symbols"); 
$flags+=("--no-require-symbols"); 
$flags+=("--require-numbers"); 
$flags+=("--no-require-numbers"); 
$flags+=("--require-uppercase-characters"); 
$flags+=("--no-require-uppercase-characters"); 
$flags+=("--require-lowercase-characters"); 
$flags+=("--no-require-lowercase-characters"); 
$flags+=("--allow-users-to-change-password"); 
$flags+=("--no-allow-users-to-change-password"); 
$flags+=("--max-password-age"); 
$flags+=("--password-reuse-prevention"); 
$flags+=("--hard-expiry"); 
$flags+=("--no-hard-expiry"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-update-assume-role-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-name"); 
$flags+=("--policy-document"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-update-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--new-path"); 
$flags+=("--new-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-update-login-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--password"); 
$flags+=("--password-reset-required"); 
$flags+=("--no-password-reset-required"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-update-open-id-connect-provider-thumbprint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--open-id-connect-provider-arn"); 
$flags+=("--thumbprint-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-update-role {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-name"); 
$flags+=("--description"); 
$flags+=("--max-session-duration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-update-role-description {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-name"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-update-saml-provider {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--saml-metadata-document"); 
$flags+=("--saml-provider-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-update-server-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--server-certificate-name"); 
$flags+=("--new-path"); 
$flags+=("--new-server-certificate-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-update-service-specific-credential {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--service-specific-credential-id"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-update-signing-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--certificate-id"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-update-ssh-public-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--ssh-public-key-id"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-update-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--new-path"); 
$flags+=("--new-user-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-upload-server-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--path"); 
$flags+=("--server-certificate-name"); 
$flags+=("--certificate-body"); 
$flags+=("--private-key"); 
$flags+=("--certificate-chain"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-upload-signing-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--certificate-body"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-upload-ssh-public-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--ssh-public-key-body"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iam-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-imagebuilder {
    $commands = [System.Collections.ArrayList]@();

$commands+=("cancel-image-creation"); 
$commands+=("create-component"); 
$commands+=("create-distribution-configuration"); 
$commands+=("create-image"); 
$commands+=("create-image-pipeline"); 
$commands+=("create-image-recipe"); 
$commands+=("create-infrastructure-configuration"); 
$commands+=("delete-component"); 
$commands+=("delete-distribution-configuration"); 
$commands+=("delete-image"); 
$commands+=("delete-image-pipeline"); 
$commands+=("delete-image-recipe"); 
$commands+=("delete-infrastructure-configuration"); 
$commands+=("get-component"); 
$commands+=("get-component-policy"); 
$commands+=("get-distribution-configuration"); 
$commands+=("get-image"); 
$commands+=("get-image-pipeline"); 
$commands+=("get-image-policy"); 
$commands+=("get-image-recipe"); 
$commands+=("get-image-recipe-policy"); 
$commands+=("get-infrastructure-configuration"); 
$commands+=("import-component"); 
$commands+=("list-component-build-versions"); 
$commands+=("list-components"); 
$commands+=("list-distribution-configurations"); 
$commands+=("list-image-build-versions"); 
$commands+=("list-image-pipeline-images"); 
$commands+=("list-image-pipelines"); 
$commands+=("list-image-recipes"); 
$commands+=("list-images"); 
$commands+=("list-infrastructure-configurations"); 
$commands+=("list-tags-for-resource"); 
$commands+=("put-component-policy"); 
$commands+=("put-image-policy"); 
$commands+=("put-image-recipe-policy"); 
$commands+=("start-image-pipeline-execution"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-distribution-configuration"); 
$commands+=("update-image-pipeline"); 
$commands+=("update-infrastructure-configuration");

return $commands;
}

 function Get-imagebuilder-cancel-image-creation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image-build-version-arn"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-create-component {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--semantic-version"); 
$flags+=("--description"); 
$flags+=("--change-description"); 
$flags+=("--platform"); 
$flags+=("--data"); 
$flags+=("--uri"); 
$flags+=("--kms-key-id"); 
$flags+=("--tags"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-create-distribution-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--distributions"); 
$flags+=("--tags"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-create-image {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image-recipe-arn"); 
$flags+=("--distribution-configuration-arn"); 
$flags+=("--infrastructure-configuration-arn"); 
$flags+=("--image-tests-configuration"); 
$flags+=("--enhanced-image-metadata-enabled"); 
$flags+=("--no-enhanced-image-metadata-enabled"); 
$flags+=("--tags"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-create-image-pipeline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--image-recipe-arn"); 
$flags+=("--infrastructure-configuration-arn"); 
$flags+=("--distribution-configuration-arn"); 
$flags+=("--image-tests-configuration"); 
$flags+=("--enhanced-image-metadata-enabled"); 
$flags+=("--no-enhanced-image-metadata-enabled"); 
$flags+=("--schedule"); 
$flags+=("--status"); 
$flags+=("--tags"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-create-image-recipe {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--semantic-version"); 
$flags+=("--components"); 
$flags+=("--parent-image"); 
$flags+=("--block-device-mappings"); 
$flags+=("--tags"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-create-infrastructure-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--instance-types"); 
$flags+=("--instance-profile-name"); 
$flags+=("--security-group-ids"); 
$flags+=("--subnet-id"); 
$flags+=("--logging"); 
$flags+=("--key-pair"); 
$flags+=("--terminate-instance-on-failure"); 
$flags+=("--no-terminate-instance-on-failure"); 
$flags+=("--sns-topic-arn"); 
$flags+=("--tags"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-delete-component {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--component-build-version-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-delete-distribution-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--distribution-configuration-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-delete-image {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image-build-version-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-delete-image-pipeline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image-pipeline-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-delete-image-recipe {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image-recipe-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-delete-infrastructure-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--infrastructure-configuration-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-get-component {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--component-build-version-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-get-component-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--component-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-get-distribution-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--distribution-configuration-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-get-image {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image-build-version-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-get-image-pipeline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image-pipeline-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-get-image-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-get-image-recipe {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image-recipe-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-get-image-recipe-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image-recipe-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-get-infrastructure-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--infrastructure-configuration-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-import-component {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--semantic-version"); 
$flags+=("--description"); 
$flags+=("--change-description"); 
$flags+=("--type"); 
$flags+=("--format"); 
$flags+=("--platform"); 
$flags+=("--data"); 
$flags+=("--uri"); 
$flags+=("--kms-key-id"); 
$flags+=("--tags"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-list-component-build-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--component-version-arn"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-list-components {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--owner"); 
$flags+=("--filters"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-list-distribution-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-list-image-build-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image-version-arn"); 
$flags+=("--filters"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-list-image-pipeline-images {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image-pipeline-arn"); 
$flags+=("--filters"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-list-image-pipelines {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-list-image-recipes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--owner"); 
$flags+=("--filters"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-list-images {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--owner"); 
$flags+=("--filters"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-list-infrastructure-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-put-component-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--component-arn"); 
$flags+=("--policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-put-image-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image-arn"); 
$flags+=("--policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-put-image-recipe-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image-recipe-arn"); 
$flags+=("--policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-start-image-pipeline-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image-pipeline-arn"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-update-distribution-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--distribution-configuration-arn"); 
$flags+=("--description"); 
$flags+=("--distributions"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-update-image-pipeline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image-pipeline-arn"); 
$flags+=("--description"); 
$flags+=("--image-recipe-arn"); 
$flags+=("--infrastructure-configuration-arn"); 
$flags+=("--distribution-configuration-arn"); 
$flags+=("--image-tests-configuration"); 
$flags+=("--enhanced-image-metadata-enabled"); 
$flags+=("--no-enhanced-image-metadata-enabled"); 
$flags+=("--schedule"); 
$flags+=("--status"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-imagebuilder-update-infrastructure-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--infrastructure-configuration-arn"); 
$flags+=("--description"); 
$flags+=("--instance-types"); 
$flags+=("--instance-profile-name"); 
$flags+=("--security-group-ids"); 
$flags+=("--subnet-id"); 
$flags+=("--logging"); 
$flags+=("--key-pair"); 
$flags+=("--terminate-instance-on-failure"); 
$flags+=("--no-terminate-instance-on-failure"); 
$flags+=("--sns-topic-arn"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-importexport {
    $commands = [System.Collections.ArrayList]@();

$commands+=("cancel-job"); 
$commands+=("create-job"); 
$commands+=("get-shipping-label"); 
$commands+=("get-status"); 
$commands+=("list-jobs"); 
$commands+=("update-job");

return $commands;
}

 function Get-importexport-cancel-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--api-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-importexport-create-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-type"); 
$flags+=("--manifest"); 
$flags+=("--manifest-addendum"); 
$flags+=("--validate-only"); 
$flags+=("--no-validate-only"); 
$flags+=("--api-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-importexport-get-shipping-label {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-ids"); 
$flags+=("--name"); 
$flags+=("--company"); 
$flags+=("--phone-number"); 
$flags+=("--country"); 
$flags+=("--state-or-province"); 
$flags+=("--city"); 
$flags+=("--postal-code"); 
$flags+=("--street"); 
$flags+=("--street"); 
$flags+=("--street"); 
$flags+=("--api-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-importexport-get-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--api-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-importexport-list-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--api-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-importexport-update-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--manifest"); 
$flags+=("--job-type"); 
$flags+=("--validate-only"); 
$flags+=("--no-validate-only"); 
$flags+=("--api-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-attributes-to-findings"); 
$commands+=("create-assessment-target"); 
$commands+=("create-assessment-template"); 
$commands+=("create-exclusions-preview"); 
$commands+=("create-resource-group"); 
$commands+=("delete-assessment-run"); 
$commands+=("delete-assessment-target"); 
$commands+=("delete-assessment-template"); 
$commands+=("describe-assessment-runs"); 
$commands+=("describe-assessment-targets"); 
$commands+=("describe-assessment-templates"); 
$commands+=("describe-cross-account-access-role"); 
$commands+=("describe-exclusions"); 
$commands+=("describe-findings"); 
$commands+=("describe-resource-groups"); 
$commands+=("describe-rules-packages"); 
$commands+=("get-assessment-report"); 
$commands+=("get-exclusions-preview"); 
$commands+=("get-telemetry-metadata"); 
$commands+=("list-assessment-run-agents"); 
$commands+=("list-assessment-runs"); 
$commands+=("list-assessment-targets"); 
$commands+=("list-assessment-templates"); 
$commands+=("list-event-subscriptions"); 
$commands+=("list-exclusions"); 
$commands+=("list-findings"); 
$commands+=("list-rules-packages"); 
$commands+=("list-tags-for-resource"); 
$commands+=("preview-agents"); 
$commands+=("register-cross-account-access-role"); 
$commands+=("remove-attributes-from-findings"); 
$commands+=("set-tags-for-resource"); 
$commands+=("start-assessment-run"); 
$commands+=("stop-assessment-run"); 
$commands+=("subscribe-to-event"); 
$commands+=("unsubscribe-from-event"); 
$commands+=("update-assessment-target");

return $commands;
}

 function Get-inspector-add-attributes-to-findings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--finding-arns"); 
$flags+=("--attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-create-assessment-target {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assessment-target-name"); 
$flags+=("--resource-group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-create-assessment-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assessment-target-arn"); 
$flags+=("--assessment-template-name"); 
$flags+=("--duration-in-seconds"); 
$flags+=("--rules-package-arns"); 
$flags+=("--user-attributes-for-findings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-create-exclusions-preview {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assessment-template-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-create-resource-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-group-tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-delete-assessment-run {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assessment-run-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-delete-assessment-target {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assessment-target-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-delete-assessment-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assessment-template-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-describe-assessment-runs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assessment-run-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-describe-assessment-targets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assessment-target-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-describe-assessment-templates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assessment-template-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-describe-cross-account-access-role {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-describe-exclusions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--exclusion-arns"); 
$flags+=("--locale"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-describe-findings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--finding-arns"); 
$flags+=("--locale"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-describe-resource-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-group-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-describe-rules-packages {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rules-package-arns"); 
$flags+=("--locale"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-get-assessment-report {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assessment-run-arn"); 
$flags+=("--report-file-format"); 
$flags+=("--report-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-get-exclusions-preview {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assessment-template-arn"); 
$flags+=("--preview-token"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--locale"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-get-telemetry-metadata {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assessment-run-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-list-assessment-run-agents {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assessment-run-arn"); 
$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-list-assessment-runs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assessment-template-arns"); 
$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-list-assessment-targets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-list-assessment-templates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assessment-target-arns"); 
$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-list-event-subscriptions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-list-exclusions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assessment-run-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-list-findings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assessment-run-arns"); 
$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-list-rules-packages {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-preview-agents {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--preview-agents-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-register-cross-account-access-role {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-remove-attributes-from-findings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--finding-arns"); 
$flags+=("--attribute-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-set-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-start-assessment-run {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assessment-template-arn"); 
$flags+=("--assessment-run-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-stop-assessment-run {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assessment-run-arn"); 
$flags+=("--stop-action"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-subscribe-to-event {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--event"); 
$flags+=("--topic-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-unsubscribe-from-event {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--event"); 
$flags+=("--topic-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-inspector-update-assessment-target {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assessment-target-arn"); 
$flags+=("--assessment-target-name"); 
$flags+=("--resource-group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot {
    $commands = [System.Collections.ArrayList]@();

$commands+=("accept-certificate-transfer"); 
$commands+=("add-thing-to-billing-group"); 
$commands+=("add-thing-to-thing-group"); 
$commands+=("associate-targets-with-job"); 
$commands+=("attach-policy"); 
$commands+=("attach-security-profile"); 
$commands+=("attach-thing-principal"); 
$commands+=("cancel-audit-mitigation-actions-task"); 
$commands+=("cancel-audit-task"); 
$commands+=("cancel-certificate-transfer"); 
$commands+=("cancel-job"); 
$commands+=("cancel-job-execution"); 
$commands+=("clear-default-authorizer"); 
$commands+=("confirm-topic-rule-destination"); 
$commands+=("create-authorizer"); 
$commands+=("create-billing-group"); 
$commands+=("create-certificate-from-csr"); 
$commands+=("create-dimension"); 
$commands+=("create-domain-configuration"); 
$commands+=("create-dynamic-thing-group"); 
$commands+=("create-job"); 
$commands+=("create-keys-and-certificate"); 
$commands+=("create-mitigation-action"); 
$commands+=("create-ota-update"); 
$commands+=("create-policy"); 
$commands+=("create-policy-version"); 
$commands+=("create-provisioning-claim"); 
$commands+=("create-provisioning-template"); 
$commands+=("create-provisioning-template-version"); 
$commands+=("create-role-alias"); 
$commands+=("create-scheduled-audit"); 
$commands+=("create-security-profile"); 
$commands+=("create-stream"); 
$commands+=("create-thing"); 
$commands+=("create-thing-group"); 
$commands+=("create-thing-type"); 
$commands+=("create-topic-rule"); 
$commands+=("create-topic-rule-destination"); 
$commands+=("delete-account-audit-configuration"); 
$commands+=("delete-authorizer"); 
$commands+=("delete-billing-group"); 
$commands+=("delete-ca-certificate"); 
$commands+=("delete-certificate"); 
$commands+=("delete-dimension"); 
$commands+=("delete-domain-configuration"); 
$commands+=("delete-dynamic-thing-group"); 
$commands+=("delete-job"); 
$commands+=("delete-job-execution"); 
$commands+=("delete-mitigation-action"); 
$commands+=("delete-ota-update"); 
$commands+=("delete-policy"); 
$commands+=("delete-policy-version"); 
$commands+=("delete-provisioning-template"); 
$commands+=("delete-provisioning-template-version"); 
$commands+=("delete-registration-code"); 
$commands+=("delete-role-alias"); 
$commands+=("delete-scheduled-audit"); 
$commands+=("delete-security-profile"); 
$commands+=("delete-stream"); 
$commands+=("delete-thing"); 
$commands+=("delete-thing-group"); 
$commands+=("delete-thing-type"); 
$commands+=("delete-topic-rule"); 
$commands+=("delete-topic-rule-destination"); 
$commands+=("delete-v2-logging-level"); 
$commands+=("deprecate-thing-type"); 
$commands+=("describe-account-audit-configuration"); 
$commands+=("describe-audit-finding"); 
$commands+=("describe-audit-mitigation-actions-task"); 
$commands+=("describe-audit-task"); 
$commands+=("describe-authorizer"); 
$commands+=("describe-billing-group"); 
$commands+=("describe-ca-certificate"); 
$commands+=("describe-certificate"); 
$commands+=("describe-default-authorizer"); 
$commands+=("describe-dimension"); 
$commands+=("describe-domain-configuration"); 
$commands+=("describe-endpoint"); 
$commands+=("describe-event-configurations"); 
$commands+=("describe-index"); 
$commands+=("describe-job"); 
$commands+=("describe-job-execution"); 
$commands+=("describe-mitigation-action"); 
$commands+=("describe-provisioning-template"); 
$commands+=("describe-provisioning-template-version"); 
$commands+=("describe-role-alias"); 
$commands+=("describe-scheduled-audit"); 
$commands+=("describe-security-profile"); 
$commands+=("describe-stream"); 
$commands+=("describe-thing"); 
$commands+=("describe-thing-group"); 
$commands+=("describe-thing-registration-task"); 
$commands+=("describe-thing-type"); 
$commands+=("detach-policy"); 
$commands+=("detach-security-profile"); 
$commands+=("detach-thing-principal"); 
$commands+=("disable-topic-rule"); 
$commands+=("enable-topic-rule"); 
$commands+=("get-cardinality"); 
$commands+=("get-effective-policies"); 
$commands+=("get-indexing-configuration"); 
$commands+=("get-job-document"); 
$commands+=("get-logging-options"); 
$commands+=("get-ota-update"); 
$commands+=("get-percentiles"); 
$commands+=("get-policy"); 
$commands+=("get-policy-version"); 
$commands+=("get-registration-code"); 
$commands+=("get-statistics"); 
$commands+=("get-topic-rule"); 
$commands+=("get-topic-rule-destination"); 
$commands+=("get-v2-logging-options"); 
$commands+=("list-active-violations"); 
$commands+=("list-attached-policies"); 
$commands+=("list-audit-findings"); 
$commands+=("list-audit-mitigation-actions-executions"); 
$commands+=("list-audit-mitigation-actions-tasks"); 
$commands+=("list-audit-tasks"); 
$commands+=("list-authorizers"); 
$commands+=("list-billing-groups"); 
$commands+=("list-ca-certificates"); 
$commands+=("list-certificates"); 
$commands+=("list-certificates-by-ca"); 
$commands+=("list-dimensions"); 
$commands+=("list-domain-configurations"); 
$commands+=("list-indices"); 
$commands+=("list-job-executions-for-job"); 
$commands+=("list-job-executions-for-thing"); 
$commands+=("list-jobs"); 
$commands+=("list-mitigation-actions"); 
$commands+=("list-ota-updates"); 
$commands+=("list-outgoing-certificates"); 
$commands+=("list-policies"); 
$commands+=("list-policy-versions"); 
$commands+=("list-principal-things"); 
$commands+=("list-provisioning-template-versions"); 
$commands+=("list-provisioning-templates"); 
$commands+=("list-role-aliases"); 
$commands+=("list-scheduled-audits"); 
$commands+=("list-security-profiles"); 
$commands+=("list-security-profiles-for-target"); 
$commands+=("list-streams"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-targets-for-policy"); 
$commands+=("list-targets-for-security-profile"); 
$commands+=("list-thing-groups"); 
$commands+=("list-thing-groups-for-thing"); 
$commands+=("list-thing-principals"); 
$commands+=("list-thing-registration-task-reports"); 
$commands+=("list-thing-registration-tasks"); 
$commands+=("list-thing-types"); 
$commands+=("list-things"); 
$commands+=("list-things-in-billing-group"); 
$commands+=("list-things-in-thing-group"); 
$commands+=("list-topic-rule-destinations"); 
$commands+=("list-topic-rules"); 
$commands+=("list-v2-logging-levels"); 
$commands+=("list-violation-events"); 
$commands+=("register-ca-certificate"); 
$commands+=("register-certificate"); 
$commands+=("register-certificate-without-ca"); 
$commands+=("register-thing"); 
$commands+=("reject-certificate-transfer"); 
$commands+=("remove-thing-from-billing-group"); 
$commands+=("remove-thing-from-thing-group"); 
$commands+=("replace-topic-rule"); 
$commands+=("search-index"); 
$commands+=("set-default-authorizer"); 
$commands+=("set-default-policy-version"); 
$commands+=("set-logging-options"); 
$commands+=("set-v2-logging-level"); 
$commands+=("set-v2-logging-options"); 
$commands+=("start-audit-mitigation-actions-task"); 
$commands+=("start-on-demand-audit-task"); 
$commands+=("start-thing-registration-task"); 
$commands+=("stop-thing-registration-task"); 
$commands+=("tag-resource"); 
$commands+=("test-authorization"); 
$commands+=("test-invoke-authorizer"); 
$commands+=("transfer-certificate"); 
$commands+=("untag-resource"); 
$commands+=("update-account-audit-configuration"); 
$commands+=("update-authorizer"); 
$commands+=("update-billing-group"); 
$commands+=("update-ca-certificate"); 
$commands+=("update-certificate"); 
$commands+=("update-dimension"); 
$commands+=("update-domain-configuration"); 
$commands+=("update-dynamic-thing-group"); 
$commands+=("update-event-configurations"); 
$commands+=("update-indexing-configuration"); 
$commands+=("update-job"); 
$commands+=("update-mitigation-action"); 
$commands+=("update-provisioning-template"); 
$commands+=("update-role-alias"); 
$commands+=("update-scheduled-audit"); 
$commands+=("update-security-profile"); 
$commands+=("update-stream"); 
$commands+=("update-thing"); 
$commands+=("update-thing-group"); 
$commands+=("update-thing-groups-for-thing"); 
$commands+=("update-topic-rule-destination"); 
$commands+=("validate-security-profile-behaviors");

return $commands;
}

 function Get-iot-accept-certificate-transfer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-id"); 
$flags+=("--set-as-active"); 
$flags+=("--no-set-as-active"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-add-thing-to-billing-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--billing-group-name"); 
$flags+=("--billing-group-arn"); 
$flags+=("--thing-name"); 
$flags+=("--thing-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-add-thing-to-thing-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-group-name"); 
$flags+=("--thing-group-arn"); 
$flags+=("--thing-name"); 
$flags+=("--thing-arn"); 
$flags+=("--override-dynamic-groups"); 
$flags+=("--no-override-dynamic-groups"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-associate-targets-with-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--targets"); 
$flags+=("--job-id"); 
$flags+=("--comment"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-attach-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-name"); 
$flags+=("--target"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-attach-security-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--security-profile-name"); 
$flags+=("--security-profile-target-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-attach-thing-principal {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-name"); 
$flags+=("--principal"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-cancel-audit-mitigation-actions-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-cancel-audit-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-cancel-certificate-transfer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-cancel-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--reason-code"); 
$flags+=("--comment"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-cancel-job-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--thing-name"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--expected-version"); 
$flags+=("--status-details"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-clear-default-authorizer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-confirm-topic-rule-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--confirmation-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-create-authorizer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authorizer-name"); 
$flags+=("--authorizer--arn"); 
$flags+=("--token-key-name"); 
$flags+=("--token-signing-public-keys"); 
$flags+=("--status"); 
$flags+=("--tags"); 
$flags+=("--signing-disabled"); 
$flags+=("--no-signing-disabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-create-billing-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--billing-group-name"); 
$flags+=("--billing-group-properties"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-create-certificate-from-csr {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-signing-request"); 
$flags+=("--set-as-active"); 
$flags+=("--no-set-as-active"); 
$flags+=("--certificate-pem-outfile"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-create-dimension {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--type"); 
$flags+=("--string-values"); 
$flags+=("--tags"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-create-domain-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-configuration-name"); 
$flags+=("--domain-name"); 
$flags+=("--server-certificate-arns"); 
$flags+=("--validation-certificate-arn"); 
$flags+=("--authorizer-config"); 
$flags+=("--service-type"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-create-dynamic-thing-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-group-name"); 
$flags+=("--thing-group-properties"); 
$flags+=("--index-name"); 
$flags+=("--query-string"); 
$flags+=("--query-version"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-create-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--targets"); 
$flags+=("--document-source"); 
$flags+=("--document"); 
$flags+=("--description"); 
$flags+=("--presigned-url-config"); 
$flags+=("--target-selection"); 
$flags+=("--job-executions-rollout-config"); 
$flags+=("--abort-config"); 
$flags+=("--timeout-config"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-create-keys-and-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--set-as-active"); 
$flags+=("--no-set-as-active"); 
$flags+=("--certificate-pem-outfile"); 
$flags+=("--public-key-outfile"); 
$flags+=("--private-key-outfile"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-create-mitigation-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--action-name"); 
$flags+=("--role-arn"); 
$flags+=("--action-params"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-create-ota-update {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ota-update-id"); 
$flags+=("--description"); 
$flags+=("--targets"); 
$flags+=("--protocols"); 
$flags+=("--target-selection"); 
$flags+=("--aws-job-executions-rollout-config"); 
$flags+=("--aws-job-presigned-url-config"); 
$flags+=("--files"); 
$flags+=("--role-arn"); 
$flags+=("--additional-parameters"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-create-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-name"); 
$flags+=("--policy-document"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-create-policy-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-name"); 
$flags+=("--policy-document"); 
$flags+=("--set-as-default"); 
$flags+=("--no-set-as-default"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-create-provisioning-claim {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-create-provisioning-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--description"); 
$flags+=("--template-body"); 
$flags+=("--enabled"); 
$flags+=("--no-enabled"); 
$flags+=("--provisioning-role-arn"); 
$flags+=("--pre-provisioning-hook"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-create-provisioning-template-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--template-body"); 
$flags+=("--set-as-default"); 
$flags+=("--no-set-as-default"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-create-role-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-alias"); 
$flags+=("--role-arn"); 
$flags+=("--credential-duration-seconds"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-create-scheduled-audit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--frequency"); 
$flags+=("--day-of-month"); 
$flags+=("--day-of-week"); 
$flags+=("--target-check-names"); 
$flags+=("--scheduled-audit-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-create-security-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--security-profile-name"); 
$flags+=("--security-profile-description"); 
$flags+=("--behaviors"); 
$flags+=("--alert-targets"); 
$flags+=("--additional-metrics-to-retain"); 
$flags+=("--additional-metrics-to-retain-v"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-create-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-id"); 
$flags+=("--description"); 
$flags+=("--files"); 
$flags+=("--role-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-create-thing {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-name"); 
$flags+=("--thing-type-name"); 
$flags+=("--attribute-payload"); 
$flags+=("--billing-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-create-thing-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-group-name"); 
$flags+=("--parent-group-name"); 
$flags+=("--thing-group-properties"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-create-thing-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-type-name"); 
$flags+=("--thing-type-properties"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-create-topic-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-name"); 
$flags+=("--topic-rule-payload"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-create-topic-rule-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--destination-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-account-audit-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--delete-scheduled-audits"); 
$flags+=("--no-delete-scheduled-audits"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-authorizer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authorizer-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-billing-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--billing-group-name"); 
$flags+=("--expected-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-ca-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-id"); 
$flags+=("--force-delete"); 
$flags+=("--no-force-delete"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-dimension {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-domain-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-configuration-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-dynamic-thing-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-group-name"); 
$flags+=("--expected-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-job-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--thing-name"); 
$flags+=("--execution-number"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-mitigation-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--action-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-ota-update {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ota-update-id"); 
$flags+=("--delete-stream"); 
$flags+=("--no-delete-stream"); 
$flags+=("--force-delete-aws-job"); 
$flags+=("--no-force-delete-aws-job"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-policy-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-name"); 
$flags+=("--policy-version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-provisioning-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-provisioning-template-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-registration-code {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-role-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-alias"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-scheduled-audit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--scheduled-audit-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-security-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--security-profile-name"); 
$flags+=("--expected-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-thing {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-name"); 
$flags+=("--expected-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-thing-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-group-name"); 
$flags+=("--expected-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-thing-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-type-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-topic-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-topic-rule-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-delete-v2-logging-level {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--target-type"); 
$flags+=("--target-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-deprecate-thing-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-type-name"); 
$flags+=("--undo-deprecate"); 
$flags+=("--no-undo-deprecate"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-account-audit-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-audit-finding {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--finding-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-audit-mitigation-actions-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-audit-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-authorizer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authorizer-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-billing-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--billing-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-ca-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-default-authorizer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-dimension {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-domain-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-configuration-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-event-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-index {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--index-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-job-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--thing-name"); 
$flags+=("--execution-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-mitigation-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--action-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-provisioning-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-provisioning-template-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-role-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-alias"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-scheduled-audit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--scheduled-audit-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-security-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--security-profile-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-thing {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-thing-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-thing-registration-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-describe-thing-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-type-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-detach-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-name"); 
$flags+=("--target"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-detach-security-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--security-profile-name"); 
$flags+=("--security-profile-target-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-detach-thing-principal {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-name"); 
$flags+=("--principal"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-disable-topic-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-enable-topic-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-get-cardinality {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--index-name"); 
$flags+=("--query-string"); 
$flags+=("--aggregation-field"); 
$flags+=("--query-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-get-effective-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--principal"); 
$flags+=("--cognito-identity-pool-id"); 
$flags+=("--thing-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-get-indexing-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-get-job-document {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-get-logging-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-get-ota-update {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ota-update-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-get-percentiles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--index-name"); 
$flags+=("--query-string"); 
$flags+=("--aggregation-field"); 
$flags+=("--query-version"); 
$flags+=("--percents"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-get-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-get-policy-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-name"); 
$flags+=("--policy-version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-get-registration-code {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-get-statistics {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--index-name"); 
$flags+=("--query-string"); 
$flags+=("--aggregation-field"); 
$flags+=("--query-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-get-topic-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-get-topic-rule-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-get-v2-logging-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-active-violations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-name"); 
$flags+=("--security-profile-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-attached-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--target"); 
$flags+=("--recursive"); 
$flags+=("--no-recursive"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-audit-findings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-id"); 
$flags+=("--check-name"); 
$flags+=("--resource-identifier"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-audit-mitigation-actions-executions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-id"); 
$flags+=("--action-status"); 
$flags+=("--finding-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-audit-mitigation-actions-tasks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--audit-task-id"); 
$flags+=("--finding-id"); 
$flags+=("--task-status"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-audit-tasks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--task-type"); 
$flags+=("--task-status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-authorizers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--page-size"); 
$flags+=("--ascending-order"); 
$flags+=("--no-ascending-order"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-billing-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name-prefix-filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-ca-certificates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--page-size"); 
$flags+=("--ascending-order"); 
$flags+=("--no-ascending-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-certificates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--page-size"); 
$flags+=("--ascending-order"); 
$flags+=("--no-ascending-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-certificates-by-ca {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ca-certificate-id"); 
$flags+=("--page-size"); 
$flags+=("--ascending-order"); 
$flags+=("--no-ascending-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-dimensions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-domain-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--marker"); 
$flags+=("--page-size"); 
$flags+=("--service-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-indices {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-job-executions-for-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-job-executions-for-thing {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-name"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--status"); 
$flags+=("--target-selection"); 
$flags+=("--thing-group-name"); 
$flags+=("--thing-group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-mitigation-actions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--action-type"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-ota-updates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ota-update-status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-outgoing-certificates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--page-size"); 
$flags+=("--ascending-order"); 
$flags+=("--no-ascending-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--page-size"); 
$flags+=("--ascending-order"); 
$flags+=("--no-ascending-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-policy-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-principal-things {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--principal"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-provisioning-template-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-provisioning-templates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-role-aliases {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--page-size"); 
$flags+=("--ascending-order"); 
$flags+=("--no-ascending-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-scheduled-audits {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-security-profiles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dimension-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-security-profiles-for-target {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--recursive"); 
$flags+=("--no-recursive"); 
$flags+=("--security-profile-target-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-streams {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ascending-order"); 
$flags+=("--no-ascending-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-targets-for-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-name"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-targets-for-security-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--security-profile-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-thing-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--parent-group"); 
$flags+=("--name-prefix-filter"); 
$flags+=("--recursive"); 
$flags+=("--no-recursive"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-thing-groups-for-thing {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-thing-principals {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-thing-registration-task-reports {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-id"); 
$flags+=("--report-type"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-thing-registration-tasks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-thing-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-type-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-things {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--attribute-name"); 
$flags+=("--attribute-value"); 
$flags+=("--thing-type-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-things-in-billing-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--billing-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-things-in-thing-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-group-name"); 
$flags+=("--recursive"); 
$flags+=("--no-recursive"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-topic-rule-destinations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-topic-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--topic"); 
$flags+=("--rule-disabled"); 
$flags+=("--no-rule-disabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-v2-logging-levels {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--target-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-list-violation-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--thing-name"); 
$flags+=("--security-profile-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-register-ca-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ca-certificate"); 
$flags+=("--verification-certificate"); 
$flags+=("--set-as-active"); 
$flags+=("--no-set-as-active"); 
$flags+=("--allow-auto-registration"); 
$flags+=("--no-allow-auto-registration"); 
$flags+=("--registration-config"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-register-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-pem"); 
$flags+=("--ca-certificate-pem"); 
$flags+=("--set-as-active"); 
$flags+=("--no-set-as-active"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-register-certificate-without-ca {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-pem"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-register-thing {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-body"); 
$flags+=("--parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-reject-certificate-transfer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-id"); 
$flags+=("--reject-reason"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-remove-thing-from-billing-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--billing-group-name"); 
$flags+=("--billing-group-arn"); 
$flags+=("--thing-name"); 
$flags+=("--thing-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-remove-thing-from-thing-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-group-name"); 
$flags+=("--thing-group-arn"); 
$flags+=("--thing-name"); 
$flags+=("--thing-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-replace-topic-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-name"); 
$flags+=("--topic-rule-payload"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-search-index {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--index-name"); 
$flags+=("--query-string"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--query-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-set-default-authorizer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authorizer-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-set-default-policy-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-name"); 
$flags+=("--policy-version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-set-logging-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--logging-options-payload"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-set-v2-logging-level {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-target"); 
$flags+=("--log-level"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-set-v2-logging-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-arn"); 
$flags+=("--default-log-level"); 
$flags+=("--disable-all-logs"); 
$flags+=("--no-disable-all-logs"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-start-audit-mitigation-actions-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-id"); 
$flags+=("--target"); 
$flags+=("--audit-check-to-actions-mapping"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-start-on-demand-audit-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--target-check-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-start-thing-registration-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-body"); 
$flags+=("--input-file-bucket"); 
$flags+=("--input-file-key"); 
$flags+=("--role-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-stop-thing-registration-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-test-authorization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--principal"); 
$flags+=("--cognito-identity-pool-id"); 
$flags+=("--auth-infos"); 
$flags+=("--client-id"); 
$flags+=("--policy-names-to-add"); 
$flags+=("--policy-names-to-skip"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-test-invoke-authorizer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authorizer-name"); 
$flags+=("--token"); 
$flags+=("--token-signature"); 
$flags+=("--http-context"); 
$flags+=("--mqtt-context"); 
$flags+=("--tls-context"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-transfer-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-id"); 
$flags+=("--target-aws-account"); 
$flags+=("--transfer-message"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-update-account-audit-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-arn"); 
$flags+=("--audit-notification-target-configurations"); 
$flags+=("--audit-check-configurations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-update-authorizer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authorizer-name"); 
$flags+=("--authorizer--arn"); 
$flags+=("--token-key-name"); 
$flags+=("--token-signing-public-keys"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-update-billing-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--billing-group-name"); 
$flags+=("--billing-group-properties"); 
$flags+=("--expected-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-update-ca-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-id"); 
$flags+=("--new-status"); 
$flags+=("--new-auto-registration-status"); 
$flags+=("--registration-config"); 
$flags+=("--remove-auto-registration"); 
$flags+=("--no-remove-auto-registration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-update-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-id"); 
$flags+=("--new-status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-update-dimension {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--string-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-update-domain-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-configuration-name"); 
$flags+=("--authorizer-config"); 
$flags+=("--domain-configuration-status"); 
$flags+=("--remove-authorizer-config"); 
$flags+=("--no-remove-authorizer-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-update-dynamic-thing-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-group-name"); 
$flags+=("--thing-group-properties"); 
$flags+=("--expected-version"); 
$flags+=("--index-name"); 
$flags+=("--query-string"); 
$flags+=("--query-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-update-event-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--event-configurations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-update-indexing-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-indexing-configuration"); 
$flags+=("--thing-group-indexing-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-update-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--description"); 
$flags+=("--presigned-url-config"); 
$flags+=("--job-executions-rollout-config"); 
$flags+=("--abort-config"); 
$flags+=("--timeout-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-update-mitigation-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--action-name"); 
$flags+=("--role-arn"); 
$flags+=("--action-params"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-update-provisioning-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--description"); 
$flags+=("--enabled"); 
$flags+=("--no-enabled"); 
$flags+=("--default-version-id"); 
$flags+=("--provisioning-role-arn"); 
$flags+=("--pre-provisioning-hook"); 
$flags+=("--remove-pre-provisioning-hook"); 
$flags+=("--no-remove-pre-provisioning-hook"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-update-role-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-alias"); 
$flags+=("--role-arn"); 
$flags+=("--credential-duration-seconds"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-update-scheduled-audit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--frequency"); 
$flags+=("--day-of-month"); 
$flags+=("--day-of-week"); 
$flags+=("--target-check-names"); 
$flags+=("--scheduled-audit-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-update-security-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--security-profile-name"); 
$flags+=("--security-profile-description"); 
$flags+=("--behaviors"); 
$flags+=("--alert-targets"); 
$flags+=("--additional-metrics-to-retain"); 
$flags+=("--additional-metrics-to-retain-v"); 
$flags+=("--delete-behaviors"); 
$flags+=("--no-delete-behaviors"); 
$flags+=("--delete-alert-targets"); 
$flags+=("--no-delete-alert-targets"); 
$flags+=("--delete-additional-metrics-to-retain"); 
$flags+=("--no-delete-additional-metrics-to-retain"); 
$flags+=("--expected-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-update-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-id"); 
$flags+=("--description"); 
$flags+=("--files"); 
$flags+=("--role-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-update-thing {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-name"); 
$flags+=("--thing-type-name"); 
$flags+=("--attribute-payload"); 
$flags+=("--expected-version"); 
$flags+=("--remove-thing-type"); 
$flags+=("--no-remove-thing-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-update-thing-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-group-name"); 
$flags+=("--thing-group-properties"); 
$flags+=("--expected-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-update-thing-groups-for-thing {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-name"); 
$flags+=("--thing-groups-to-add"); 
$flags+=("--thing-groups-to-remove"); 
$flags+=("--override-dynamic-groups"); 
$flags+=("--no-override-dynamic-groups"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-update-topic-rule-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-validate-security-profile-behaviors {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--behaviors"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-data {
    $commands = [System.Collections.ArrayList]@();

$commands+=("delete-thing-shadow"); 
$commands+=("get-thing-shadow"); 
$commands+=("publish"); 
$commands+=("update-thing-shadow");

return $commands;
}

 function Get-iot-data-delete-thing-shadow {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-name");

return $flags;
}

 function Get-iot-data-get-thing-shadow {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-name");

return $flags;
}

 function Get-iot-data-publish {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--topic"); 
$flags+=("--qos"); 
$flags+=("--payload"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-data-update-thing-shadow {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-name"); 
$flags+=("--payload");

return $flags;
}

 function Get-iot-jobs-data {
    $commands = [System.Collections.ArrayList]@();

$commands+=("describe-job-execution"); 
$commands+=("get-pending-job-executions"); 
$commands+=("start-next-pending-job-execution"); 
$commands+=("update-job-execution");

return $commands;
}

 function Get-iot-jobs-data-describe-job-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--thing-name"); 
$flags+=("--include-job-document"); 
$flags+=("--no-include-job-document"); 
$flags+=("--execution-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-jobs-data-get-pending-job-executions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-jobs-data-start-next-pending-job-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-name"); 
$flags+=("--status-details"); 
$flags+=("--step-timeout-in-minutes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot-jobs-data-update-job-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--thing-name"); 
$flags+=("--status"); 
$flags+=("--status-details"); 
$flags+=("--step-timeout-in-minutes"); 
$flags+=("--expected-version"); 
$flags+=("--include-job-execution-state"); 
$flags+=("--no-include-job-execution-state"); 
$flags+=("--include-job-document"); 
$flags+=("--no-include-job-document"); 
$flags+=("--execution-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-devices {
    $commands = [System.Collections.ArrayList]@();

$commands+=("claim-devices-by-claim-code"); 
$commands+=("describe-device"); 
$commands+=("finalize-device-claim"); 
$commands+=("get-device-methods"); 
$commands+=("initiate-device-claim"); 
$commands+=("invoke-device-method"); 
$commands+=("list-device-events"); 
$commands+=("list-devices"); 
$commands+=("list-tags-for-resource"); 
$commands+=("tag-resource"); 
$commands+=("unclaim-device"); 
$commands+=("untag-resource"); 
$commands+=("update-device-state");

return $commands;
}

 function Get-iot1click-devices-claim-devices-by-claim-code {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--claim-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-devices-describe-device {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-devices-finalize-device-claim {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-devices-get-device-methods {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-devices-initiate-device-claim {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-devices-invoke-device-method {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-id"); 
$flags+=("--device-method"); 
$flags+=("--device-method-parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-devices-list-device-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-id"); 
$flags+=("--from-time-stamp"); 
$flags+=("--to-time-stamp"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-devices-list-devices {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-devices-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-devices-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-devices-unclaim-device {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-devices-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-devices-update-device-state {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-id"); 
$flags+=("--enabled"); 
$flags+=("--no-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-projects {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-device-with-placement"); 
$commands+=("create-placement"); 
$commands+=("create-project"); 
$commands+=("delete-placement"); 
$commands+=("delete-project"); 
$commands+=("describe-placement"); 
$commands+=("describe-project"); 
$commands+=("disassociate-device-from-placement"); 
$commands+=("get-devices-in-placement"); 
$commands+=("list-placements"); 
$commands+=("list-projects"); 
$commands+=("list-tags-for-resource"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-placement"); 
$commands+=("update-project");

return $commands;
}

 function Get-iot1click-projects-associate-device-with-placement {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-name"); 
$flags+=("--placement-name"); 
$flags+=("--device-id"); 
$flags+=("--device-template-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-projects-create-placement {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--placement-name"); 
$flags+=("--project-name"); 
$flags+=("--attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-projects-create-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-name"); 
$flags+=("--description"); 
$flags+=("--placement-template"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-projects-delete-placement {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--placement-name"); 
$flags+=("--project-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-projects-delete-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-projects-describe-placement {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--placement-name"); 
$flags+=("--project-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-projects-describe-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-projects-disassociate-device-from-placement {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-name"); 
$flags+=("--placement-name"); 
$flags+=("--device-template-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-projects-get-devices-in-placement {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-name"); 
$flags+=("--placement-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-projects-list-placements {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-projects-list-projects {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-projects-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-projects-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-projects-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-projects-update-placement {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--placement-name"); 
$flags+=("--project-name"); 
$flags+=("--attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iot1click-projects-update-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-name"); 
$flags+=("--description"); 
$flags+=("--placement-template"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics {
    $commands = [System.Collections.ArrayList]@();

$commands+=("batch-put-message"); 
$commands+=("cancel-pipeline-reprocessing"); 
$commands+=("create-channel"); 
$commands+=("create-dataset"); 
$commands+=("create-dataset-content"); 
$commands+=("create-datastore"); 
$commands+=("create-pipeline"); 
$commands+=("delete-channel"); 
$commands+=("delete-dataset"); 
$commands+=("delete-dataset-content"); 
$commands+=("delete-datastore"); 
$commands+=("delete-pipeline"); 
$commands+=("describe-channel"); 
$commands+=("describe-dataset"); 
$commands+=("describe-datastore"); 
$commands+=("describe-logging-options"); 
$commands+=("describe-pipeline"); 
$commands+=("get-dataset-content"); 
$commands+=("list-channels"); 
$commands+=("list-dataset-contents"); 
$commands+=("list-datasets"); 
$commands+=("list-datastores"); 
$commands+=("list-pipelines"); 
$commands+=("list-tags-for-resource"); 
$commands+=("put-logging-options"); 
$commands+=("run-pipeline-activity"); 
$commands+=("sample-channel-data"); 
$commands+=("start-pipeline-reprocessing"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-channel"); 
$commands+=("update-dataset"); 
$commands+=("update-datastore"); 
$commands+=("update-pipeline");

return $commands;
}

 function Get-iotanalytics-batch-put-message {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-name"); 
$flags+=("--messages"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-cancel-pipeline-reprocessing {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-name"); 
$flags+=("--reprocessing-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-create-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-name"); 
$flags+=("--channel-storage"); 
$flags+=("--retention-period"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-create-dataset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-name"); 
$flags+=("--actions"); 
$flags+=("--triggers"); 
$flags+=("--content-delivery-rules"); 
$flags+=("--retention-period"); 
$flags+=("--versioning-configuration"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-create-dataset-content {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-create-datastore {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--datastore-name"); 
$flags+=("--datastore-storage"); 
$flags+=("--retention-period"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-create-pipeline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-name"); 
$flags+=("--pipeline-activities"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-delete-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-delete-dataset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-delete-dataset-content {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-name"); 
$flags+=("--version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-delete-datastore {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--datastore-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-delete-pipeline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-describe-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-name"); 
$flags+=("--include-statistics"); 
$flags+=("--no-include-statistics"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-describe-dataset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-describe-datastore {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--datastore-name"); 
$flags+=("--include-statistics"); 
$flags+=("--no-include-statistics"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-describe-logging-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-describe-pipeline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-get-dataset-content {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-name"); 
$flags+=("--version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-list-channels {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-list-dataset-contents {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-name"); 
$flags+=("--scheduled-on-or-after"); 
$flags+=("--scheduled-before"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-list-datasets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-list-datastores {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-list-pipelines {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-put-logging-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--logging-options"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-run-pipeline-activity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-activity"); 
$flags+=("--payloads"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-sample-channel-data {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-name"); 
$flags+=("--max-messages"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-start-pipeline-reprocessing {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-name"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-update-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-name"); 
$flags+=("--channel-storage"); 
$flags+=("--retention-period"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-update-dataset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-name"); 
$flags+=("--actions"); 
$flags+=("--triggers"); 
$flags+=("--content-delivery-rules"); 
$flags+=("--retention-period"); 
$flags+=("--versioning-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-update-datastore {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--datastore-name"); 
$flags+=("--retention-period"); 
$flags+=("--datastore-storage"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotanalytics-update-pipeline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pipeline-name"); 
$flags+=("--pipeline-activities"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotevents {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-detector-model"); 
$commands+=("create-input"); 
$commands+=("delete-detector-model"); 
$commands+=("delete-input"); 
$commands+=("describe-detector-model"); 
$commands+=("describe-input"); 
$commands+=("describe-logging-options"); 
$commands+=("list-detector-model-versions"); 
$commands+=("list-detector-models"); 
$commands+=("list-inputs"); 
$commands+=("list-tags-for-resource"); 
$commands+=("put-logging-options"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-detector-model"); 
$commands+=("update-input");

return $commands;
}

 function Get-iotevents-create-detector-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-model-name"); 
$flags+=("--detector-model-definition"); 
$flags+=("--detector-model-description"); 
$flags+=("--key"); 
$flags+=("--role-arn"); 
$flags+=("--tags"); 
$flags+=("--evaluation-method"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotevents-create-input {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--input-name"); 
$flags+=("--input-description"); 
$flags+=("--input-definition"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotevents-delete-detector-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-model-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotevents-delete-input {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--input-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotevents-describe-detector-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-model-name"); 
$flags+=("--detector-model-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotevents-describe-input {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--input-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotevents-describe-logging-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotevents-list-detector-model-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-model-name"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotevents-list-detector-models {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotevents-list-inputs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotevents-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotevents-put-logging-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--logging-options"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotevents-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotevents-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotevents-update-detector-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-model-name"); 
$flags+=("--detector-model-definition"); 
$flags+=("--detector-model-description"); 
$flags+=("--role-arn"); 
$flags+=("--evaluation-method"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotevents-update-input {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--input-name"); 
$flags+=("--input-description"); 
$flags+=("--input-definition"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotevents-data {
    $commands = [System.Collections.ArrayList]@();

$commands+=("batch-put-message"); 
$commands+=("batch-update-detector"); 
$commands+=("describe-detector"); 
$commands+=("list-detectors");

return $commands;
}

 function Get-iotevents-data-batch-put-message {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--messages"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotevents-data-batch-update-detector {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detectors"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotevents-data-describe-detector {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-model-name"); 
$flags+=("--key-value"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotevents-data-list-detectors {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--detector-model-name"); 
$flags+=("--state-name"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsecuretunneling {
    $commands = [System.Collections.ArrayList]@();

$commands+=("close-tunnel"); 
$commands+=("describe-tunnel"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-tunnels"); 
$commands+=("open-tunnel"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource");

return $commands;
}

 function Get-iotsecuretunneling-close-tunnel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--tunnel-id"); 
$flags+=("--delete"); 
$flags+=("--no-delete"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsecuretunneling-describe-tunnel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--tunnel-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsecuretunneling-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsecuretunneling-list-tunnels {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-name"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsecuretunneling-open-tunnel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--tags"); 
$flags+=("--destination-config"); 
$flags+=("--timeout-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsecuretunneling-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsecuretunneling-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-assets"); 
$commands+=("batch-associate-project-assets"); 
$commands+=("batch-disassociate-project-assets"); 
$commands+=("batch-put-asset-property-value"); 
$commands+=("create-access-policy"); 
$commands+=("create-asset"); 
$commands+=("create-asset-model"); 
$commands+=("create-dashboard"); 
$commands+=("create-gateway"); 
$commands+=("create-portal"); 
$commands+=("create-project"); 
$commands+=("delete-access-policy"); 
$commands+=("delete-asset"); 
$commands+=("delete-asset-model"); 
$commands+=("delete-dashboard"); 
$commands+=("delete-gateway"); 
$commands+=("delete-portal"); 
$commands+=("delete-project"); 
$commands+=("describe-access-policy"); 
$commands+=("describe-asset"); 
$commands+=("describe-asset-model"); 
$commands+=("describe-asset-property"); 
$commands+=("describe-dashboard"); 
$commands+=("describe-gateway"); 
$commands+=("describe-gateway-capability-configuration"); 
$commands+=("describe-logging-options"); 
$commands+=("describe-portal"); 
$commands+=("describe-project"); 
$commands+=("disassociate-assets"); 
$commands+=("get-asset-property-aggregates"); 
$commands+=("get-asset-property-value"); 
$commands+=("get-asset-property-value-history"); 
$commands+=("list-access-policies"); 
$commands+=("list-asset-models"); 
$commands+=("list-assets"); 
$commands+=("list-associated-assets"); 
$commands+=("list-dashboards"); 
$commands+=("list-gateways"); 
$commands+=("list-portals"); 
$commands+=("list-project-assets"); 
$commands+=("list-projects"); 
$commands+=("list-tags-for-resource"); 
$commands+=("put-logging-options"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-access-policy"); 
$commands+=("update-asset"); 
$commands+=("update-asset-model"); 
$commands+=("update-asset-property"); 
$commands+=("update-dashboard"); 
$commands+=("update-gateway"); 
$commands+=("update-gateway-capability-configuration"); 
$commands+=("update-portal"); 
$commands+=("update-project"); 
$commands+=("wait");

return $commands;
}

 function Get-iotsitewise-associate-assets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--asset-id"); 
$flags+=("--hierarchy-id"); 
$flags+=("--child-asset-id"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-batch-associate-project-assets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-id"); 
$flags+=("--asset-ids"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-batch-disassociate-project-assets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-id"); 
$flags+=("--asset-ids"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-batch-put-asset-property-value {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--entries"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-create-access-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--access-policy-identity"); 
$flags+=("--access-policy-resource"); 
$flags+=("--access-policy-permission"); 
$flags+=("--client-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-create-asset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--asset-name"); 
$flags+=("--asset-model-id"); 
$flags+=("--client-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-create-asset-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--asset-model-name"); 
$flags+=("--asset-model-description"); 
$flags+=("--asset-model-properties"); 
$flags+=("--asset-model-hierarchies"); 
$flags+=("--client-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-create-dashboard {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-id"); 
$flags+=("--dashboard-name"); 
$flags+=("--dashboard-description"); 
$flags+=("--dashboard-definition"); 
$flags+=("--client-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-create-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-name"); 
$flags+=("--gateway-platform"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-create-portal {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--portal-name"); 
$flags+=("--portal-description"); 
$flags+=("--portal-contact-email"); 
$flags+=("--client-token"); 
$flags+=("--portal-logo-image-file"); 
$flags+=("--role-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-create-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--portal-id"); 
$flags+=("--project-name"); 
$flags+=("--project-description"); 
$flags+=("--client-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-delete-access-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--access-policy-id"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-delete-asset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--asset-id"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-delete-asset-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--asset-model-id"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-delete-dashboard {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dashboard-id"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-delete-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-delete-portal {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--portal-id"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-delete-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-id"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-describe-access-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--access-policy-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-describe-asset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--asset-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-describe-asset-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--asset-model-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-describe-asset-property {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--asset-id"); 
$flags+=("--property-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-describe-dashboard {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dashboard-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-describe-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-describe-gateway-capability-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-id"); 
$flags+=("--capability-namespace"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-describe-logging-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-describe-portal {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--portal-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-describe-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-disassociate-assets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--asset-id"); 
$flags+=("--hierarchy-id"); 
$flags+=("--child-asset-id"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-get-asset-property-aggregates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--asset-id"); 
$flags+=("--property-id"); 
$flags+=("--property-alias"); 
$flags+=("--aggregate-types"); 
$flags+=("--resolution"); 
$flags+=("--qualities"); 
$flags+=("--start-date"); 
$flags+=("--end-date"); 
$flags+=("--time-ordering"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-get-asset-property-value {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--asset-id"); 
$flags+=("--property-id"); 
$flags+=("--property-alias"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-get-asset-property-value-history {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--asset-id"); 
$flags+=("--property-id"); 
$flags+=("--property-alias"); 
$flags+=("--start-date"); 
$flags+=("--end-date"); 
$flags+=("--qualities"); 
$flags+=("--time-ordering"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-list-access-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-type"); 
$flags+=("--identity-id"); 
$flags+=("--resource-type"); 
$flags+=("--resource-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-list-asset-models {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-list-assets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--asset-model-id"); 
$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-list-associated-assets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--asset-id"); 
$flags+=("--hierarchy-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-list-dashboards {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-list-gateways {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-list-portals {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-list-project-assets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-list-projects {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--portal-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-put-logging-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--logging-options"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-update-access-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--access-policy-id"); 
$flags+=("--access-policy-identity"); 
$flags+=("--access-policy-resource"); 
$flags+=("--access-policy-permission"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-update-asset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--asset-id"); 
$flags+=("--asset-name"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-update-asset-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--asset-model-id"); 
$flags+=("--asset-model-name"); 
$flags+=("--asset-model-description"); 
$flags+=("--asset-model-properties"); 
$flags+=("--asset-model-hierarchies"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-update-asset-property {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--asset-id"); 
$flags+=("--property-id"); 
$flags+=("--property-alias"); 
$flags+=("--property-notification-state"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-update-dashboard {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dashboard-id"); 
$flags+=("--dashboard-name"); 
$flags+=("--dashboard-description"); 
$flags+=("--dashboard-definition"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-update-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-id"); 
$flags+=("--gateway-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-update-gateway-capability-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-id"); 
$flags+=("--capability-namespace"); 
$flags+=("--capability-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-update-portal {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--portal-id"); 
$flags+=("--portal-name"); 
$flags+=("--portal-description"); 
$flags+=("--portal-contact-email"); 
$flags+=("--portal-logo-image-file"); 
$flags+=("--role-arn"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-update-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-id"); 
$flags+=("--project-name"); 
$flags+=("--project-description"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotsitewise-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-iotthingsgraph {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-entity-to-thing"); 
$commands+=("create-flow-template"); 
$commands+=("create-system-instance"); 
$commands+=("create-system-template"); 
$commands+=("delete-flow-template"); 
$commands+=("delete-namespace"); 
$commands+=("delete-system-instance"); 
$commands+=("delete-system-template"); 
$commands+=("deploy-system-instance"); 
$commands+=("deprecate-flow-template"); 
$commands+=("deprecate-system-template"); 
$commands+=("describe-namespace"); 
$commands+=("dissociate-entity-from-thing"); 
$commands+=("get-entities"); 
$commands+=("get-flow-template"); 
$commands+=("get-flow-template-revisions"); 
$commands+=("get-namespace-deletion-status"); 
$commands+=("get-system-instance"); 
$commands+=("get-system-template"); 
$commands+=("get-system-template-revisions"); 
$commands+=("get-upload-status"); 
$commands+=("list-flow-execution-messages"); 
$commands+=("list-tags-for-resource"); 
$commands+=("search-entities"); 
$commands+=("search-flow-executions"); 
$commands+=("search-flow-templates"); 
$commands+=("search-system-instances"); 
$commands+=("search-system-templates"); 
$commands+=("search-things"); 
$commands+=("tag-resource"); 
$commands+=("undeploy-system-instance"); 
$commands+=("untag-resource"); 
$commands+=("update-flow-template"); 
$commands+=("update-system-template"); 
$commands+=("upload-entity-definitions");

return $commands;
}

 function Get-iotthingsgraph-associate-entity-to-thing {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-name"); 
$flags+=("--entity-id"); 
$flags+=("--namespace-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-create-flow-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--definition"); 
$flags+=("--compatible-namespace-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-create-system-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--tags"); 
$flags+=("--definition"); 
$flags+=("--target"); 
$flags+=("--greengrass-group-name"); 
$flags+=("--s"); 
$flags+=("--metrics-configuration"); 
$flags+=("--flow-actions-role-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-create-system-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--definition"); 
$flags+=("--compatible-namespace-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-delete-flow-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-delete-namespace {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-delete-system-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-delete-system-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-deploy-system-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-deprecate-flow-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-deprecate-system-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-describe-namespace {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--namespace-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-dissociate-entity-from-thing {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--thing-name"); 
$flags+=("--entity-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-get-entities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ids"); 
$flags+=("--namespace-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-get-flow-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--revision-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-get-flow-template-revisions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-get-namespace-deletion-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-get-system-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-get-system-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--revision-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-get-system-template-revisions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-get-upload-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--upload-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-list-flow-execution-messages {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--flow-execution-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-search-entities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--entity-types"); 
$flags+=("--filters"); 
$flags+=("--namespace-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-search-flow-executions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--system-instance-id"); 
$flags+=("--flow-execution-id"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-search-flow-templates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-search-system-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-search-system-templates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-search-things {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--entity-id"); 
$flags+=("--namespace-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-undeploy-system-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-update-flow-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--definition"); 
$flags+=("--compatible-namespace-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-update-system-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--definition"); 
$flags+=("--compatible-namespace-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-iotthingsgraph-upload-entity-definitions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--document"); 
$flags+=("--sync-with-public-namespace"); 
$flags+=("--no-sync-with-public-namespace"); 
$flags+=("--deprecate-existing-entities"); 
$flags+=("--no-deprecate-existing-entities"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kafka {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-cluster"); 
$commands+=("create-configuration"); 
$commands+=("delete-cluster"); 
$commands+=("describe-cluster"); 
$commands+=("describe-cluster-operation"); 
$commands+=("describe-configuration"); 
$commands+=("describe-configuration-revision"); 
$commands+=("get-bootstrap-brokers"); 
$commands+=("list-cluster-operations"); 
$commands+=("list-clusters"); 
$commands+=("list-configuration-revisions"); 
$commands+=("list-configurations"); 
$commands+=("list-kafka-versions"); 
$commands+=("list-nodes"); 
$commands+=("list-tags-for-resource"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-broker-count"); 
$commands+=("update-broker-storage"); 
$commands+=("update-cluster-configuration"); 
$commands+=("update-monitoring");

return $commands;
}

 function Get-kafka-create-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--broker-node-group-info"); 
$flags+=("--client-authentication"); 
$flags+=("--cluster-name"); 
$flags+=("--configuration-info"); 
$flags+=("--encryption-info"); 
$flags+=("--enhanced-monitoring"); 
$flags+=("--open-monitoring"); 
$flags+=("--kafka-version"); 
$flags+=("--logging-info"); 
$flags+=("--number-of-broker-nodes"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kafka-create-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--kafka-versions"); 
$flags+=("--name"); 
$flags+=("--server-properties"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kafka-delete-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-arn"); 
$flags+=("--current-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kafka-describe-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kafka-describe-cluster-operation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-operation-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kafka-describe-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kafka-describe-configuration-revision {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--revision"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kafka-get-bootstrap-brokers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kafka-list-cluster-operations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kafka-list-clusters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-name-filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kafka-list-configuration-revisions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kafka-list-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kafka-list-kafka-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kafka-list-nodes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kafka-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kafka-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kafka-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kafka-update-broker-count {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-arn"); 
$flags+=("--current-version"); 
$flags+=("--target-number-of-broker-nodes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kafka-update-broker-storage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-arn"); 
$flags+=("--current-version"); 
$flags+=("--target-broker-ebs-volume-info"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kafka-update-cluster-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-arn"); 
$flags+=("--configuration-info"); 
$flags+=("--current-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kafka-update-monitoring {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-arn"); 
$flags+=("--current-version"); 
$flags+=("--enhanced-monitoring"); 
$flags+=("--open-monitoring"); 
$flags+=("--logging-info"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kendra {
    $commands = [System.Collections.ArrayList]@();

$commands+=("batch-delete-document"); 
$commands+=("batch-put-document"); 
$commands+=("create-data-source"); 
$commands+=("create-faq"); 
$commands+=("create-index"); 
$commands+=("delete-faq"); 
$commands+=("delete-index"); 
$commands+=("describe-data-source"); 
$commands+=("describe-faq"); 
$commands+=("describe-index"); 
$commands+=("list-data-source-sync-jobs"); 
$commands+=("list-data-sources"); 
$commands+=("list-faqs"); 
$commands+=("list-indices"); 
$commands+=("query"); 
$commands+=("start-data-source-sync-job"); 
$commands+=("stop-data-source-sync-job"); 
$commands+=("submit-feedback"); 
$commands+=("update-data-source"); 
$commands+=("update-index");

return $commands;
}

 function Get-kendra-batch-delete-document {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--index-id"); 
$flags+=("--document-id-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kendra-batch-put-document {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--index-id"); 
$flags+=("--role-arn"); 
$flags+=("--documents"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kendra-create-data-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--index-id"); 
$flags+=("--type"); 
$flags+=("--configuration"); 
$flags+=("--description"); 
$flags+=("--schedule"); 
$flags+=("--role-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kendra-create-faq {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--index-id"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--s"); 
$flags+=("--role-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kendra-create-index {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--role-arn"); 
$flags+=("--server-side-encryption-configuration"); 
$flags+=("--description"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kendra-delete-faq {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--index-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kendra-delete-index {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kendra-describe-data-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--index-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kendra-describe-faq {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--index-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kendra-describe-index {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kendra-list-data-source-sync-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--index-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--start-time-filter"); 
$flags+=("--status-filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kendra-list-data-sources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--index-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kendra-list-faqs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--index-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kendra-list-indices {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kendra-query {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--index-id"); 
$flags+=("--query-text"); 
$flags+=("--attribute-filter"); 
$flags+=("--facets"); 
$flags+=("--requested-document-attributes"); 
$flags+=("--query-result-type-filter"); 
$flags+=("--page-number"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kendra-start-data-source-sync-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--index-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kendra-stop-data-source-sync-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--index-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kendra-submit-feedback {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--index-id"); 
$flags+=("--query-id"); 
$flags+=("--click-feedback-items"); 
$flags+=("--relevance-feedback-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kendra-update-data-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--name"); 
$flags+=("--index-id"); 
$flags+=("--configuration"); 
$flags+=("--description"); 
$flags+=("--schedule"); 
$flags+=("--role-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kendra-update-index {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--name"); 
$flags+=("--role-arn"); 
$flags+=("--description"); 
$flags+=("--document-metadata-configuration-updates"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-tags-to-stream"); 
$commands+=("create-stream"); 
$commands+=("decrease-stream-retention-period"); 
$commands+=("delete-stream"); 
$commands+=("deregister-stream-consumer"); 
$commands+=("describe-limits"); 
$commands+=("describe-stream"); 
$commands+=("describe-stream-consumer"); 
$commands+=("describe-stream-summary"); 
$commands+=("disable-enhanced-monitoring"); 
$commands+=("enable-enhanced-monitoring"); 
$commands+=("get-records"); 
$commands+=("get-shard-iterator"); 
$commands+=("increase-stream-retention-period"); 
$commands+=("list-shards"); 
$commands+=("list-stream-consumers"); 
$commands+=("list-streams"); 
$commands+=("list-tags-for-stream"); 
$commands+=("merge-shards"); 
$commands+=("put-record"); 
$commands+=("put-records"); 
$commands+=("register-stream-consumer"); 
$commands+=("remove-tags-from-stream"); 
$commands+=("split-shard"); 
$commands+=("start-stream-encryption"); 
$commands+=("stop-stream-encryption"); 
$commands+=("update-shard-count"); 
$commands+=("wait");

return $commands;
}

 function Get-kinesis-add-tags-to-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-create-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--shard-count"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-decrease-stream-retention-period {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--retention-period-hours"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-delete-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--enforce-consumer-deletion"); 
$flags+=("--no-enforce-consumer-deletion"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-deregister-stream-consumer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-arn"); 
$flags+=("--consumer-name"); 
$flags+=("--consumer-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-describe-limits {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-describe-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-describe-stream-consumer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-arn"); 
$flags+=("--consumer-name"); 
$flags+=("--consumer-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-describe-stream-summary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-disable-enhanced-monitoring {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--shard-level-metrics"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-enable-enhanced-monitoring {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--shard-level-metrics"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-get-records {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--shard-iterator"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-get-shard-iterator {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--shard-id"); 
$flags+=("--shard-iterator-type"); 
$flags+=("--starting-sequence-number"); 
$flags+=("--timestamp"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-increase-stream-retention-period {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--retention-period-hours"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-list-shards {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--exclusive-start-shard-id"); 
$flags+=("--stream-creation-timestamp"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-list-stream-consumers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-arn"); 
$flags+=("--stream-creation-timestamp"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-list-streams {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-list-tags-for-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--exclusive-start-tag-key"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-merge-shards {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--shard-to-merge"); 
$flags+=("--adjacent-shard-to-merge"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-put-record {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--data"); 
$flags+=("--partition-key"); 
$flags+=("--explicit-hash-key"); 
$flags+=("--sequence-number-for-ordering"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-put-records {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--records"); 
$flags+=("--stream-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-register-stream-consumer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-arn"); 
$flags+=("--consumer-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-remove-tags-from-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-split-shard {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--shard-to-split"); 
$flags+=("--new-starting-hash-key"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-start-stream-encryption {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--encryption-type"); 
$flags+=("--key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-stop-stream-encryption {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--encryption-type"); 
$flags+=("--key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-update-shard-count {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--target-shard-count"); 
$flags+=("--scaling-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-kinesis-video-archived-media {
    $commands = [System.Collections.ArrayList]@();

$commands+=("get-clip"); 
$commands+=("get-dash-streaming-session-url"); 
$commands+=("get-hls-streaming-session-url"); 
$commands+=("get-media-for-fragment-list"); 
$commands+=("list-fragments");

return $commands;
}

 function Get-kinesis-video-archived-media-get-clip {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--stream-arn"); 
$flags+=("--clip-fragment-selector");

return $flags;
}

 function Get-kinesis-video-archived-media-get-dash-streaming-session-url {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--stream-arn"); 
$flags+=("--playback-mode"); 
$flags+=("--display-fragment-timestamp"); 
$flags+=("--display-fragment-number"); 
$flags+=("--dash-fragment-selector"); 
$flags+=("--expires"); 
$flags+=("--max-manifest-fragment-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-video-archived-media-get-hls-streaming-session-url {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--stream-arn"); 
$flags+=("--playback-mode"); 
$flags+=("--hls-fragment-selector"); 
$flags+=("--container-format"); 
$flags+=("--discontinuity-mode"); 
$flags+=("--display-fragment-timestamp"); 
$flags+=("--expires"); 
$flags+=("--max-media-playlist-fragment-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-video-archived-media-get-media-for-fragment-list {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--fragments");

return $flags;
}

 function Get-kinesis-video-archived-media-list-fragments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--fragment-selector"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-video-media {
    $commands = [System.Collections.ArrayList]@();

$commands+=("get-media");

return $commands;
}

 function Get-kinesis-video-media-get-media {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--stream-arn"); 
$flags+=("--start-selector");

return $flags;
}

 function Get-kinesis-video-signaling {
    $commands = [System.Collections.ArrayList]@();

$commands+=("get-ice-server-config"); 
$commands+=("send-alexa-offer-to-master");

return $commands;
}

 function Get-kinesis-video-signaling-get-ice-server-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-arn"); 
$flags+=("--client-id"); 
$flags+=("--service"); 
$flags+=("--username"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesis-video-signaling-send-alexa-offer-to-master {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-arn"); 
$flags+=("--sender-client-id"); 
$flags+=("--message-payload"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalytics {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-application-cloud-watch-logging-option"); 
$commands+=("add-application-input"); 
$commands+=("add-application-input-processing-configuration"); 
$commands+=("add-application-output"); 
$commands+=("add-application-reference-data-source"); 
$commands+=("create-application"); 
$commands+=("delete-application"); 
$commands+=("delete-application-cloud-watch-logging-option"); 
$commands+=("delete-application-input-processing-configuration"); 
$commands+=("delete-application-output"); 
$commands+=("delete-application-reference-data-source"); 
$commands+=("describe-application"); 
$commands+=("discover-input-schema"); 
$commands+=("list-applications"); 
$commands+=("list-tags-for-resource"); 
$commands+=("start-application"); 
$commands+=("stop-application"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-application");

return $commands;
}

 function Get-kinesisanalytics-add-application-cloud-watch-logging-option {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--current-application-version-id"); 
$flags+=("--cloud-watch-logging-option"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalytics-add-application-input {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--current-application-version-id"); 
$flags+=("--input"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalytics-add-application-input-processing-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--current-application-version-id"); 
$flags+=("--input-id"); 
$flags+=("--input-processing-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalytics-add-application-output {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--current-application-version-id"); 
$flags+=("--application-output"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalytics-add-application-reference-data-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--current-application-version-id"); 
$flags+=("--reference-data-source"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalytics-create-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--application-description"); 
$flags+=("--inputs"); 
$flags+=("--outputs"); 
$flags+=("--cloud-watch-logging-options"); 
$flags+=("--application-code"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalytics-delete-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--create-timestamp"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalytics-delete-application-cloud-watch-logging-option {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--current-application-version-id"); 
$flags+=("--cloud-watch-logging-option-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalytics-delete-application-input-processing-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--current-application-version-id"); 
$flags+=("--input-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalytics-delete-application-output {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--current-application-version-id"); 
$flags+=("--output-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalytics-delete-application-reference-data-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--current-application-version-id"); 
$flags+=("--reference-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalytics-describe-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalytics-discover-input-schema {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--role-arn"); 
$flags+=("--input-starting-position-configuration"); 
$flags+=("--s"); 
$flags+=("--input-processing-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalytics-list-applications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--limit"); 
$flags+=("--exclusive-start-application-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalytics-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalytics-start-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--input-configurations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalytics-stop-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalytics-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalytics-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalytics-update-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--current-application-version-id"); 
$flags+=("--application-update"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2 {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-application-cloud-watch-logging-option"); 
$commands+=("add-application-input"); 
$commands+=("add-application-input-processing-configuration"); 
$commands+=("add-application-output"); 
$commands+=("add-application-reference-data-source"); 
$commands+=("add-application-vpc-configuration"); 
$commands+=("create-application"); 
$commands+=("create-application-snapshot"); 
$commands+=("delete-application"); 
$commands+=("delete-application-cloud-watch-logging-option"); 
$commands+=("delete-application-input-processing-configuration"); 
$commands+=("delete-application-output"); 
$commands+=("delete-application-reference-data-source"); 
$commands+=("delete-application-snapshot"); 
$commands+=("delete-application-vpc-configuration"); 
$commands+=("describe-application"); 
$commands+=("describe-application-snapshot"); 
$commands+=("discover-input-schema"); 
$commands+=("list-application-snapshots"); 
$commands+=("list-applications"); 
$commands+=("list-tags-for-resource"); 
$commands+=("start-application"); 
$commands+=("stop-application"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-application");

return $commands;
}

 function Get-kinesisanalyticsv2-add-application-cloud-watch-logging-option {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--current-application-version-id"); 
$flags+=("--cloud-watch-logging-option"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-add-application-input {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--current-application-version-id"); 
$flags+=("--input"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-add-application-input-processing-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--current-application-version-id"); 
$flags+=("--input-id"); 
$flags+=("--input-processing-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-add-application-output {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--current-application-version-id"); 
$flags+=("--application-output"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-add-application-reference-data-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--current-application-version-id"); 
$flags+=("--reference-data-source"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-add-application-vpc-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--current-application-version-id"); 
$flags+=("--vpc-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-create-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--application-description"); 
$flags+=("--runtime-environment"); 
$flags+=("--service-execution-role"); 
$flags+=("--application-configuration"); 
$flags+=("--cloud-watch-logging-options"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-create-application-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--snapshot-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-delete-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--create-timestamp"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-delete-application-cloud-watch-logging-option {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--current-application-version-id"); 
$flags+=("--cloud-watch-logging-option-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-delete-application-input-processing-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--current-application-version-id"); 
$flags+=("--input-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-delete-application-output {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--current-application-version-id"); 
$flags+=("--output-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-delete-application-reference-data-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--current-application-version-id"); 
$flags+=("--reference-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-delete-application-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--snapshot-name"); 
$flags+=("--snapshot-creation-timestamp"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-delete-application-vpc-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--current-application-version-id"); 
$flags+=("--vpc-configuration-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-describe-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--include-additional-details"); 
$flags+=("--no-include-additional-details"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-describe-application-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--snapshot-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-discover-input-schema {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--service-execution-role"); 
$flags+=("--input-starting-position-configuration"); 
$flags+=("--s"); 
$flags+=("--input-processing-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-list-application-snapshots {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-list-applications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-start-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--run-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-stop-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisanalyticsv2-update-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-name"); 
$flags+=("--current-application-version-id"); 
$flags+=("--application-configuration-update"); 
$flags+=("--service-execution-role-update"); 
$flags+=("--run-configuration-update"); 
$flags+=("--cloud-watch-logging-option-updates"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisvideo {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-signaling-channel"); 
$commands+=("create-stream"); 
$commands+=("delete-signaling-channel"); 
$commands+=("delete-stream"); 
$commands+=("describe-signaling-channel"); 
$commands+=("describe-stream"); 
$commands+=("get-data-endpoint"); 
$commands+=("get-signaling-channel-endpoint"); 
$commands+=("list-signaling-channels"); 
$commands+=("list-streams"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-tags-for-stream"); 
$commands+=("tag-resource"); 
$commands+=("tag-stream"); 
$commands+=("untag-resource"); 
$commands+=("untag-stream"); 
$commands+=("update-data-retention"); 
$commands+=("update-signaling-channel"); 
$commands+=("update-stream");

return $commands;
}

 function Get-kinesisvideo-create-signaling-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-name"); 
$flags+=("--channel-type"); 
$flags+=("--single-master-configuration"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisvideo-create-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--device-name"); 
$flags+=("--stream-name"); 
$flags+=("--media-type"); 
$flags+=("--kms-key-id"); 
$flags+=("--data-retention-in-hours"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisvideo-delete-signaling-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-arn"); 
$flags+=("--current-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisvideo-delete-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-arn"); 
$flags+=("--current-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisvideo-describe-signaling-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-name"); 
$flags+=("--channel-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisvideo-describe-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--stream-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisvideo-get-data-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--stream-arn"); 
$flags+=("--api-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisvideo-get-signaling-channel-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-arn"); 
$flags+=("--single-master-channel-endpoint-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisvideo-list-signaling-channels {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-name-condition"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisvideo-list-streams {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name-condition"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisvideo-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisvideo-list-tags-for-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--stream-arn"); 
$flags+=("--stream-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisvideo-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisvideo-tag-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-arn"); 
$flags+=("--stream-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisvideo-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-key-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisvideo-untag-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-arn"); 
$flags+=("--stream-name"); 
$flags+=("--tag-key-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisvideo-update-data-retention {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--stream-arn"); 
$flags+=("--current-version"); 
$flags+=("--operation"); 
$flags+=("--data-retention-change-in-hours"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisvideo-update-signaling-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-arn"); 
$flags+=("--current-version"); 
$flags+=("--single-master-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kinesisvideo-update-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stream-name"); 
$flags+=("--stream-arn"); 
$flags+=("--current-version"); 
$flags+=("--device-name"); 
$flags+=("--media-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms {
    $commands = [System.Collections.ArrayList]@();

$commands+=("cancel-key-deletion"); 
$commands+=("connect-custom-key-store"); 
$commands+=("create-alias"); 
$commands+=("create-custom-key-store"); 
$commands+=("create-grant"); 
$commands+=("create-key"); 
$commands+=("decrypt"); 
$commands+=("delete-alias"); 
$commands+=("delete-custom-key-store"); 
$commands+=("delete-imported-key-material"); 
$commands+=("describe-custom-key-stores"); 
$commands+=("describe-key"); 
$commands+=("disable-key"); 
$commands+=("disable-key-rotation"); 
$commands+=("disconnect-custom-key-store"); 
$commands+=("enable-key"); 
$commands+=("enable-key-rotation"); 
$commands+=("encrypt"); 
$commands+=("generate-data-key"); 
$commands+=("generate-data-key-pair"); 
$commands+=("generate-data-key-pair-without-plaintext"); 
$commands+=("generate-data-key-without-plaintext"); 
$commands+=("generate-random"); 
$commands+=("get-key-policy"); 
$commands+=("get-key-rotation-status"); 
$commands+=("get-parameters-for-import"); 
$commands+=("get-public-key"); 
$commands+=("import-key-material"); 
$commands+=("list-aliases"); 
$commands+=("list-grants"); 
$commands+=("list-key-policies"); 
$commands+=("list-keys"); 
$commands+=("list-resource-tags"); 
$commands+=("list-retirable-grants"); 
$commands+=("put-key-policy"); 
$commands+=("re-encrypt"); 
$commands+=("retire-grant"); 
$commands+=("revoke-grant"); 
$commands+=("schedule-key-deletion"); 
$commands+=("sign"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-alias"); 
$commands+=("update-custom-key-store"); 
$commands+=("update-key-description"); 
$commands+=("verify");

return $commands;
}

 function Get-kms-cancel-key-deletion {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-connect-custom-key-store {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--custom-key-store-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-create-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--alias-name"); 
$flags+=("--target-key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-create-custom-key-store {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--custom-key-store-name"); 
$flags+=("--cloud-hsm-cluster-id"); 
$flags+=("--trust-anchor-certificate"); 
$flags+=("--key-store-password"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-create-grant {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--grantee-principal"); 
$flags+=("--retiring-principal"); 
$flags+=("--operations"); 
$flags+=("--constraints"); 
$flags+=("--grant-tokens"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-create-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy"); 
$flags+=("--description"); 
$flags+=("--key-usage"); 
$flags+=("--customer-master-key-spec"); 
$flags+=("--origin"); 
$flags+=("--custom-key-store-id"); 
$flags+=("--bypass-policy-lockout-safety-check"); 
$flags+=("--no-bypass-policy-lockout-safety-check"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-decrypt {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ciphertext-blob"); 
$flags+=("--encryption-context"); 
$flags+=("--grant-tokens"); 
$flags+=("--key-id"); 
$flags+=("--encryption-algorithm"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-delete-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--alias-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-delete-custom-key-store {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--custom-key-store-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-delete-imported-key-material {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-describe-custom-key-stores {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--custom-key-store-id"); 
$flags+=("--custom-key-store-name"); 
$flags+=("--limit"); 
$flags+=("--marker"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-describe-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--grant-tokens"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-disable-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-disable-key-rotation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-disconnect-custom-key-store {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--custom-key-store-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-enable-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-enable-key-rotation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-encrypt {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--plaintext"); 
$flags+=("--encryption-context"); 
$flags+=("--grant-tokens"); 
$flags+=("--encryption-algorithm"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-generate-data-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--encryption-context"); 
$flags+=("--number-of-bytes"); 
$flags+=("--key-spec"); 
$flags+=("--grant-tokens"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-generate-data-key-pair {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--encryption-context"); 
$flags+=("--key-id"); 
$flags+=("--key-pair-spec"); 
$flags+=("--grant-tokens"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-generate-data-key-pair-without-plaintext {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--encryption-context"); 
$flags+=("--key-id"); 
$flags+=("--key-pair-spec"); 
$flags+=("--grant-tokens"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-generate-data-key-without-plaintext {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--encryption-context"); 
$flags+=("--key-spec"); 
$flags+=("--number-of-bytes"); 
$flags+=("--grant-tokens"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-generate-random {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--number-of-bytes"); 
$flags+=("--custom-key-store-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-get-key-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--policy-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-get-key-rotation-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-get-parameters-for-import {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--wrapping-algorithm"); 
$flags+=("--wrapping-key-spec"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-get-public-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--grant-tokens"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-import-key-material {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--import-token"); 
$flags+=("--encrypted-key-material"); 
$flags+=("--valid-to"); 
$flags+=("--expiration-model"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-list-aliases {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-list-grants {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-list-key-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-list-keys {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-list-resource-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--limit"); 
$flags+=("--marker"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-list-retirable-grants {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--limit"); 
$flags+=("--marker"); 
$flags+=("--retiring-principal"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-put-key-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--policy-name"); 
$flags+=("--policy"); 
$flags+=("--bypass-policy-lockout-safety-check"); 
$flags+=("--no-bypass-policy-lockout-safety-check"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-re-encrypt {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ciphertext-blob"); 
$flags+=("--source-encryption-context"); 
$flags+=("--source-key-id"); 
$flags+=("--destination-key-id"); 
$flags+=("--destination-encryption-context"); 
$flags+=("--source-encryption-algorithm"); 
$flags+=("--destination-encryption-algorithm"); 
$flags+=("--grant-tokens"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-retire-grant {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--grant-token"); 
$flags+=("--key-id"); 
$flags+=("--grant-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-revoke-grant {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--grant-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-schedule-key-deletion {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--pending-window-in-days"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-sign {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--message"); 
$flags+=("--message-type"); 
$flags+=("--grant-tokens"); 
$flags+=("--signing-algorithm"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-update-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--alias-name"); 
$flags+=("--target-key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-update-custom-key-store {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--custom-key-store-id"); 
$flags+=("--new-custom-key-store-name"); 
$flags+=("--key-store-password"); 
$flags+=("--cloud-hsm-cluster-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-update-key-description {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-kms-verify {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--message"); 
$flags+=("--message-type"); 
$flags+=("--signature"); 
$flags+=("--signing-algorithm"); 
$flags+=("--grant-tokens"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lakeformation {
    $commands = [System.Collections.ArrayList]@();

$commands+=("batch-grant-permissions"); 
$commands+=("batch-revoke-permissions"); 
$commands+=("deregister-resource"); 
$commands+=("describe-resource"); 
$commands+=("get-data-lake-settings"); 
$commands+=("get-effective-permissions-for-path"); 
$commands+=("grant-permissions"); 
$commands+=("list-permissions"); 
$commands+=("list-resources"); 
$commands+=("put-data-lake-settings"); 
$commands+=("register-resource"); 
$commands+=("revoke-permissions"); 
$commands+=("update-resource");

return $commands;
}

 function Get-lakeformation-batch-grant-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--entries"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lakeformation-batch-revoke-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--entries"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lakeformation-deregister-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lakeformation-describe-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lakeformation-get-data-lake-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lakeformation-get-effective-permissions-for-path {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--resource-arn"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lakeformation-grant-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--principal"); 
$flags+=("--resource"); 
$flags+=("--permissions"); 
$flags+=("--permissions-with-grant-option"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lakeformation-list-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--principal"); 
$flags+=("--resource-type"); 
$flags+=("--resource"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lakeformation-list-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter-condition-list"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lakeformation-put-data-lake-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--data-lake-settings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lakeformation-register-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--use-service-linked-role"); 
$flags+=("--no-use-service-linked-role"); 
$flags+=("--role-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lakeformation-revoke-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog-id"); 
$flags+=("--principal"); 
$flags+=("--resource"); 
$flags+=("--permissions"); 
$flags+=("--permissions-with-grant-option"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lakeformation-update-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-arn"); 
$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-layer-version-permission"); 
$commands+=("add-permission"); 
$commands+=("create-alias"); 
$commands+=("create-event-source-mapping"); 
$commands+=("create-"); 
$commands+=("delete-alias"); 
$commands+=("delete-event-source-mapping"); 
$commands+=("delete-"); 
$commands+=("delete--concurrency"); 
$commands+=("delete--event-invoke-config"); 
$commands+=("delete-layer-version"); 
$commands+=("delete-provisioned-concurrency-config"); 
$commands+=("get-account-settings"); 
$commands+=("get-alias"); 
$commands+=("get-event-source-mapping"); 
$commands+=("get-"); 
$commands+=("get--concurrency"); 
$commands+=("get--configuration"); 
$commands+=("get--event-invoke-config"); 
$commands+=("get-layer-version"); 
$commands+=("get-layer-version-by-arn"); 
$commands+=("get-layer-version-policy"); 
$commands+=("get-policy"); 
$commands+=("get-provisioned-concurrency-config"); 
$commands+=("invoke"); 
$commands+=("list-aliases"); 
$commands+=("list-event-source-mappings"); 
$commands+=("list--event-invoke-configs"); 
$commands+=("list-functions"); 
$commands+=("list-layer-versions"); 
$commands+=("list-layers"); 
$commands+=("list-provisioned-concurrency-configs"); 
$commands+=("list-tags"); 
$commands+=("list-versions-by-"); 
$commands+=("publish-layer-version"); 
$commands+=("publish-version"); 
$commands+=("put--concurrency"); 
$commands+=("put--event-invoke-config"); 
$commands+=("put-provisioned-concurrency-config"); 
$commands+=("remove-layer-version-permission"); 
$commands+=("remove-permission"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-alias"); 
$commands+=("update-event-source-mapping"); 
$commands+=("update--code"); 
$commands+=("update--configuration"); 
$commands+=("update--event-invoke-config"); 
$commands+=("wait");

return $commands;
}

 function Get-lambda-add-layer-version-permission {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--layer-name"); 
$flags+=("--version-number"); 
$flags+=("--statement-id"); 
$flags+=("--action"); 
$flags+=("--principal"); 
$flags+=("--organization-id"); 
$flags+=("--revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-add-permission {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--statement-id"); 
$flags+=("--action"); 
$flags+=("--principal"); 
$flags+=("--source-arn"); 
$flags+=("--source-account"); 
$flags+=("--event-source-token"); 
$flags+=("--qualifier"); 
$flags+=("--revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-create-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--name"); 
$flags+=("---version"); 
$flags+=("--description"); 
$flags+=("--routing-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-create-event-source-mapping {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--event-source-arn"); 
$flags+=("---name"); 
$flags+=("--enabled"); 
$flags+=("--no-enabled"); 
$flags+=("--batch-size"); 
$flags+=("--maximum-batching-window-in-seconds"); 
$flags+=("--parallelization-factor"); 
$flags+=("--starting-position"); 
$flags+=("--starting-position-timestamp"); 
$flags+=("--destination-config"); 
$flags+=("--maximum-record-age-in-seconds"); 
$flags+=("--bisect-batch-on--error"); 
$flags+=("--no-bisect-batch-on--error"); 
$flags+=("--maximum-retry-attempts"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-create- {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--runtime"); 
$flags+=("--role"); 
$flags+=("--handler"); 
$flags+=("--code"); 
$flags+=("--description"); 
$flags+=("--timeout"); 
$flags+=("--memory-size"); 
$flags+=("--publish"); 
$flags+=("--no-publish"); 
$flags+=("--vpc-config"); 
$flags+=("--dead-letter-config"); 
$flags+=("--environment"); 
$flags+=("--kms-key-arn"); 
$flags+=("--tracing-config"); 
$flags+=("--tags"); 
$flags+=("--layers"); 
$flags+=("--zip-file"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-delete-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-delete-event-source-mapping {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--uuid"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-delete- {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--qualifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-delete--concurrency {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-delete--event-invoke-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--qualifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-delete-layer-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--layer-name"); 
$flags+=("--version-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-delete-provisioned-concurrency-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--qualifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-get-account-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-get-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-get-event-source-mapping {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--uuid"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-get- {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--qualifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-get--concurrency {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-get--configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--qualifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-get--event-invoke-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--qualifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-get-layer-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--layer-name"); 
$flags+=("--version-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-get-layer-version-by-arn {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-get-layer-version-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--layer-name"); 
$flags+=("--version-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-get-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--qualifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-get-provisioned-concurrency-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--qualifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-invoke {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--invocation-type"); 
$flags+=("--log-type"); 
$flags+=("--client-context"); 
$flags+=("--payload"); 
$flags+=("--qualifier");

return $flags;
}

 function Get-lambda-list-aliases {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("---version"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-list-event-source-mappings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--event-source-arn"); 
$flags+=("---name"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-list--event-invoke-configs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-list-functions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--master-region"); 
$flags+=("---version"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-list-layer-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--compatible-runtime"); 
$flags+=("--layer-name"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-list-layers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--compatible-runtime"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-list-provisioned-concurrency-configs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-list-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-list-versions-by- {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-publish-layer-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--layer-name"); 
$flags+=("--description"); 
$flags+=("--content"); 
$flags+=("--compatible-runtimes"); 
$flags+=("--license-info"); 
$flags+=("--zip-file"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-publish-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--code-sha"); 
$flags+=("--description"); 
$flags+=("--revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-put--concurrency {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--reserved-concurrent-executions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-put--event-invoke-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--qualifier"); 
$flags+=("--maximum-retry-attempts"); 
$flags+=("--maximum-event-age-in-seconds"); 
$flags+=("--destination-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-put-provisioned-concurrency-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--qualifier"); 
$flags+=("--provisioned-concurrent-executions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-remove-layer-version-permission {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--layer-name"); 
$flags+=("--version-number"); 
$flags+=("--statement-id"); 
$flags+=("--revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-remove-permission {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--statement-id"); 
$flags+=("--qualifier"); 
$flags+=("--revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-update-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--name"); 
$flags+=("---version"); 
$flags+=("--description"); 
$flags+=("--routing-config"); 
$flags+=("--revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-update-event-source-mapping {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--uuid"); 
$flags+=("---name"); 
$flags+=("--enabled"); 
$flags+=("--no-enabled"); 
$flags+=("--batch-size"); 
$flags+=("--maximum-batching-window-in-seconds"); 
$flags+=("--destination-config"); 
$flags+=("--maximum-record-age-in-seconds"); 
$flags+=("--bisect-batch-on--error"); 
$flags+=("--no-bisect-batch-on--error"); 
$flags+=("--maximum-retry-attempts"); 
$flags+=("--parallelization-factor"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-update--code {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--zip-file"); 
$flags+=("--s"); 
$flags+=("--s"); 
$flags+=("--s"); 
$flags+=("--publish"); 
$flags+=("--no-publish"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-update--configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--role"); 
$flags+=("--handler"); 
$flags+=("--description"); 
$flags+=("--timeout"); 
$flags+=("--memory-size"); 
$flags+=("--vpc-config"); 
$flags+=("--environment"); 
$flags+=("--runtime"); 
$flags+=("--dead-letter-config"); 
$flags+=("--kms-key-arn"); 
$flags+=("--tracing-config"); 
$flags+=("--revision-id"); 
$flags+=("--layers"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-update--event-invoke-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("---name"); 
$flags+=("--qualifier"); 
$flags+=("--maximum-retry-attempts"); 
$flags+=("--maximum-event-age-in-seconds"); 
$flags+=("--destination-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lambda-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-lex-models {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-bot-version"); 
$commands+=("create-intent-version"); 
$commands+=("create-slot-type-version"); 
$commands+=("delete-bot"); 
$commands+=("delete-bot-alias"); 
$commands+=("delete-bot-channel-association"); 
$commands+=("delete-bot-version"); 
$commands+=("delete-intent"); 
$commands+=("delete-intent-version"); 
$commands+=("delete-slot-type"); 
$commands+=("delete-slot-type-version"); 
$commands+=("delete-utterances"); 
$commands+=("get-bot"); 
$commands+=("get-bot-alias"); 
$commands+=("get-bot-aliases"); 
$commands+=("get-bot-channel-association"); 
$commands+=("get-bot-channel-associations"); 
$commands+=("get-bot-versions"); 
$commands+=("get-bots"); 
$commands+=("get-builtin-intent"); 
$commands+=("get-builtin-intents"); 
$commands+=("get-builtin-slot-types"); 
$commands+=("get-export"); 
$commands+=("get-import"); 
$commands+=("get-intent"); 
$commands+=("get-intent-versions"); 
$commands+=("get-intents"); 
$commands+=("get-slot-type"); 
$commands+=("get-slot-type-versions"); 
$commands+=("get-slot-types"); 
$commands+=("get-utterances-view"); 
$commands+=("list-tags-for-resource"); 
$commands+=("put-bot"); 
$commands+=("put-bot-alias"); 
$commands+=("put-intent"); 
$commands+=("put-slot-type"); 
$commands+=("start-import"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource");

return $commands;
}

 function Get-lex-models-create-bot-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--checksum"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-create-intent-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--checksum"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-create-slot-type-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--checksum"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-delete-bot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-delete-bot-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--bot-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-delete-bot-channel-association {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--bot-name"); 
$flags+=("--bot-alias"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-delete-bot-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--bot-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-delete-intent {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-delete-intent-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--intent-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-delete-slot-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-delete-slot-type-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--slot-type-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-delete-utterances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bot-name"); 
$flags+=("--user-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-get-bot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--version-or-alias"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-get-bot-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--bot-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-get-bot-aliases {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bot-name"); 
$flags+=("--name-contains"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-get-bot-channel-association {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--bot-name"); 
$flags+=("--bot-alias"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-get-bot-channel-associations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bot-name"); 
$flags+=("--bot-alias"); 
$flags+=("--name-contains"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-get-bot-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-get-bots {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name-contains"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-get-builtin-intent {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--signature"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-get-builtin-intents {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--locale"); 
$flags+=("--signature-contains"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-get-builtin-slot-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--locale"); 
$flags+=("--signature-contains"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-get-export {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--resource-type"); 
$flags+=("--export-type"); 
$flags+=("--resource-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-get-import {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--import-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-get-intent {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--intent-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-get-intent-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-get-intents {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name-contains"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-get-slot-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--slot-type-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-get-slot-type-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-get-slot-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name-contains"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-get-utterances-view {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bot-name"); 
$flags+=("--bot-versions"); 
$flags+=("--status-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-put-bot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--intents"); 
$flags+=("--clarification-prompt"); 
$flags+=("--abort-statement"); 
$flags+=("--idle-session-ttl-in-seconds"); 
$flags+=("--voice-id"); 
$flags+=("--checksum"); 
$flags+=("--process-behavior"); 
$flags+=("--locale"); 
$flags+=("--child-directed"); 
$flags+=("--no-child-directed"); 
$flags+=("--detect-sentiment"); 
$flags+=("--no-detect-sentiment"); 
$flags+=("--create-version"); 
$flags+=("--no-create-version"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-put-bot-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--bot-version"); 
$flags+=("--bot-name"); 
$flags+=("--checksum"); 
$flags+=("--conversation-logs"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-put-intent {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--slots"); 
$flags+=("--sample-utterances"); 
$flags+=("--confirmation-prompt"); 
$flags+=("--rejection-statement"); 
$flags+=("--follow-up-prompt"); 
$flags+=("--conclusion-statement"); 
$flags+=("--dialog-code-hook"); 
$flags+=("--fulfillment-activity"); 
$flags+=("--parent-intent-signature"); 
$flags+=("--checksum"); 
$flags+=("--create-version"); 
$flags+=("--no-create-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-put-slot-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--enumeration-values"); 
$flags+=("--checksum"); 
$flags+=("--value-selection-strategy"); 
$flags+=("--create-version"); 
$flags+=("--no-create-version"); 
$flags+=("--parent-slot-type-signature"); 
$flags+=("--slot-type-configurations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-start-import {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--payload"); 
$flags+=("--resource-type"); 
$flags+=("--merge-strategy"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-models-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-runtime {
    $commands = [System.Collections.ArrayList]@();

$commands+=("delete-session"); 
$commands+=("get-session"); 
$commands+=("post-content"); 
$commands+=("post-text"); 
$commands+=("put-session");

return $commands;
}

 function Get-lex-runtime-delete-session {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bot-name"); 
$flags+=("--bot-alias"); 
$flags+=("--user-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-runtime-get-session {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bot-name"); 
$flags+=("--bot-alias"); 
$flags+=("--user-id"); 
$flags+=("--checkpoint-label-filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-runtime-post-content {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bot-name"); 
$flags+=("--bot-alias"); 
$flags+=("--user-id"); 
$flags+=("--session-attributes"); 
$flags+=("--request-attributes"); 
$flags+=("--content-type"); 
$flags+=("--accept"); 
$flags+=("--input-stream");

return $flags;
}

 function Get-lex-runtime-post-text {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bot-name"); 
$flags+=("--bot-alias"); 
$flags+=("--user-id"); 
$flags+=("--session-attributes"); 
$flags+=("--request-attributes"); 
$flags+=("--input-text"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lex-runtime-put-session {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bot-name"); 
$flags+=("--bot-alias"); 
$flags+=("--user-id"); 
$flags+=("--session-attributes"); 
$flags+=("--dialog-action"); 
$flags+=("--recent-intent-summary-view"); 
$flags+=("--accept");

return $flags;
}

 function Get-license-manager {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-license-configuration"); 
$commands+=("delete-license-configuration"); 
$commands+=("get-license-configuration"); 
$commands+=("get-service-settings"); 
$commands+=("list-associations-for-license-configuration"); 
$commands+=("list-failures-for-license-configuration-operations"); 
$commands+=("list-license-configurations"); 
$commands+=("list-license-specifications-for-resource"); 
$commands+=("list-resource-inventory"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-usage-for-license-configuration"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-license-configuration"); 
$commands+=("update-license-specifications-for-resource"); 
$commands+=("update-service-settings");

return $commands;
}

 function Get-license-manager-create-license-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--license-counting-type"); 
$flags+=("--license-count"); 
$flags+=("--license-count-hard-limit"); 
$flags+=("--no-license-count-hard-limit"); 
$flags+=("--license-rules"); 
$flags+=("--tags"); 
$flags+=("--product-information-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-license-manager-delete-license-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--license-configuration-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-license-manager-get-license-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--license-configuration-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-license-manager-get-service-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-license-manager-list-associations-for-license-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--license-configuration-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-license-manager-list-failures-for-license-configuration-operations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--license-configuration-arn"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-license-manager-list-license-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--license-configuration-arns"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-license-manager-list-license-specifications-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-license-manager-list-resource-inventory {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-license-manager-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-license-manager-list-usage-for-license-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--license-configuration-arn"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-license-manager-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-license-manager-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-license-manager-update-license-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--license-configuration-arn"); 
$flags+=("--license-configuration-status"); 
$flags+=("--license-rules"); 
$flags+=("--license-count"); 
$flags+=("--license-count-hard-limit"); 
$flags+=("--no-license-count-hard-limit"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--product-information-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-license-manager-update-license-specifications-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--add-license-specifications"); 
$flags+=("--remove-license-specifications"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-license-manager-update-service-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--s"); 
$flags+=("--sns-topic-arn"); 
$flags+=("--organization-configuration"); 
$flags+=("--enable-cross-accounts-discovery"); 
$flags+=("--no-enable-cross-accounts-discovery"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail {
    $commands = [System.Collections.ArrayList]@();

$commands+=("allocate-static-ip"); 
$commands+=("attach-disk"); 
$commands+=("attach-instances-to-load-balancer"); 
$commands+=("attach-load-balancer-tls-certificate"); 
$commands+=("attach-static-ip"); 
$commands+=("close-instance-public-ports"); 
$commands+=("copy-snapshot"); 
$commands+=("create-cloud-formation-stack"); 
$commands+=("create-contact-method"); 
$commands+=("create-disk"); 
$commands+=("create-disk-from-snapshot"); 
$commands+=("create-disk-snapshot"); 
$commands+=("create-domain"); 
$commands+=("create-domain-entry"); 
$commands+=("create-instance-snapshot"); 
$commands+=("create-instances"); 
$commands+=("create-instances-from-snapshot"); 
$commands+=("create-key-pair"); 
$commands+=("create-load-balancer"); 
$commands+=("create-load-balancer-tls-certificate"); 
$commands+=("create-relational-database"); 
$commands+=("create-relational-database-from-snapshot"); 
$commands+=("create-relational-database-snapshot"); 
$commands+=("delete-alarm"); 
$commands+=("delete-auto-snapshot"); 
$commands+=("delete-contact-method"); 
$commands+=("delete-disk"); 
$commands+=("delete-disk-snapshot"); 
$commands+=("delete-domain"); 
$commands+=("delete-domain-entry"); 
$commands+=("delete-instance"); 
$commands+=("delete-instance-snapshot"); 
$commands+=("delete-key-pair"); 
$commands+=("delete-known-host-keys"); 
$commands+=("delete-load-balancer"); 
$commands+=("delete-load-balancer-tls-certificate"); 
$commands+=("delete-relational-database"); 
$commands+=("delete-relational-database-snapshot"); 
$commands+=("detach-disk"); 
$commands+=("detach-instances-from-load-balancer"); 
$commands+=("detach-static-ip"); 
$commands+=("disable-add-on"); 
$commands+=("download-default-key-pair"); 
$commands+=("enable-add-on"); 
$commands+=("export-snapshot"); 
$commands+=("get-active-names"); 
$commands+=("get-alarms"); 
$commands+=("get-auto-snapshots"); 
$commands+=("get-blueprints"); 
$commands+=("get-bundles"); 
$commands+=("get-cloud-formation-stack-records"); 
$commands+=("get-contact-methods"); 
$commands+=("get-disk"); 
$commands+=("get-disk-snapshot"); 
$commands+=("get-disk-snapshots"); 
$commands+=("get-disks"); 
$commands+=("get-domain"); 
$commands+=("get-domains"); 
$commands+=("get-export-snapshot-records"); 
$commands+=("get-instance"); 
$commands+=("get-instance-access-details"); 
$commands+=("get-instance-metric-data"); 
$commands+=("get-instance-port-states"); 
$commands+=("get-instance-snapshot"); 
$commands+=("get-instance-snapshots"); 
$commands+=("get-instance-state"); 
$commands+=("get-instances"); 
$commands+=("get-key-pair"); 
$commands+=("get-key-pairs"); 
$commands+=("get-load-balancer"); 
$commands+=("get-load-balancer-metric-data"); 
$commands+=("get-load-balancer-tls-certificates"); 
$commands+=("get-load-balancers"); 
$commands+=("get-operation"); 
$commands+=("get-operations"); 
$commands+=("get-operations-for-resource"); 
$commands+=("get-regions"); 
$commands+=("get-relational-database"); 
$commands+=("get-relational-database-blueprints"); 
$commands+=("get-relational-database-bundles"); 
$commands+=("get-relational-database-events"); 
$commands+=("get-relational-database-log-events"); 
$commands+=("get-relational-database-log-streams"); 
$commands+=("get-relational-database-master-user-password"); 
$commands+=("get-relational-database-metric-data"); 
$commands+=("get-relational-database-parameters"); 
$commands+=("get-relational-database-snapshot"); 
$commands+=("get-relational-database-snapshots"); 
$commands+=("get-relational-databases"); 
$commands+=("get-static-ip"); 
$commands+=("get-static-ips"); 
$commands+=("import-key-pair"); 
$commands+=("is-vpc-peered"); 
$commands+=("open-instance-public-ports"); 
$commands+=("peer-vpc"); 
$commands+=("put-alarm"); 
$commands+=("put-instance-public-ports"); 
$commands+=("reboot-instance"); 
$commands+=("reboot-relational-database"); 
$commands+=("release-static-ip"); 
$commands+=("send-contact-method-verification"); 
$commands+=("start-instance"); 
$commands+=("start-relational-database"); 
$commands+=("stop-instance"); 
$commands+=("stop-relational-database"); 
$commands+=("tag-resource"); 
$commands+=("test-alarm"); 
$commands+=("unpeer-vpc"); 
$commands+=("untag-resource"); 
$commands+=("update-domain-entry"); 
$commands+=("update-load-balancer-attribute"); 
$commands+=("update-relational-database"); 
$commands+=("update-relational-database-parameters");

return $commands;
}

 function Get-lightsail-allocate-static-ip {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--static-ip-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-attach-disk {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--disk-name"); 
$flags+=("--instance-name"); 
$flags+=("--disk-path"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-attach-instances-to-load-balancer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--instance-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-attach-load-balancer-tls-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--certificate-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-attach-static-ip {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--static-ip-name"); 
$flags+=("--instance-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-close-instance-public-ports {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--port-info"); 
$flags+=("--instance-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-copy-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-snapshot-name"); 
$flags+=("--source-resource-name"); 
$flags+=("--restore-date"); 
$flags+=("--use-latest-restorable-auto-snapshot"); 
$flags+=("--no-use-latest-restorable-auto-snapshot"); 
$flags+=("--target-snapshot-name"); 
$flags+=("--source-region"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-create-cloud-formation-stack {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instances"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-create-contact-method {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--protocol"); 
$flags+=("--contact-endpoint"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-create-disk {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--disk-name"); 
$flags+=("--availability-zone"); 
$flags+=("--size-in-gb"); 
$flags+=("--tags"); 
$flags+=("--add-ons"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-create-disk-from-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--disk-name"); 
$flags+=("--disk-snapshot-name"); 
$flags+=("--availability-zone"); 
$flags+=("--size-in-gb"); 
$flags+=("--tags"); 
$flags+=("--add-ons"); 
$flags+=("--source-disk-name"); 
$flags+=("--restore-date"); 
$flags+=("--use-latest-restorable-auto-snapshot"); 
$flags+=("--no-use-latest-restorable-auto-snapshot"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-create-disk-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--disk-name"); 
$flags+=("--disk-snapshot-name"); 
$flags+=("--instance-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-create-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-create-domain-entry {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--domain-entry"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-create-instance-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-snapshot-name"); 
$flags+=("--instance-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-create-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-names"); 
$flags+=("--availability-zone"); 
$flags+=("--custom-image-name"); 
$flags+=("--blueprint-id"); 
$flags+=("--bundle-id"); 
$flags+=("--user-data"); 
$flags+=("--key-pair-name"); 
$flags+=("--tags"); 
$flags+=("--add-ons"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-create-instances-from-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-names"); 
$flags+=("--attached-disk-mapping"); 
$flags+=("--availability-zone"); 
$flags+=("--instance-snapshot-name"); 
$flags+=("--bundle-id"); 
$flags+=("--user-data"); 
$flags+=("--key-pair-name"); 
$flags+=("--tags"); 
$flags+=("--add-ons"); 
$flags+=("--source-instance-name"); 
$flags+=("--restore-date"); 
$flags+=("--use-latest-restorable-auto-snapshot"); 
$flags+=("--no-use-latest-restorable-auto-snapshot"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-create-key-pair {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-pair-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-create-load-balancer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--instance-port"); 
$flags+=("--health-check-path"); 
$flags+=("--certificate-name"); 
$flags+=("--certificate-domain-name"); 
$flags+=("--certificate-alternative-names"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-create-load-balancer-tls-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--certificate-name"); 
$flags+=("--certificate-domain-name"); 
$flags+=("--certificate-alternative-names"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-create-relational-database {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--relational-database-name"); 
$flags+=("--availability-zone"); 
$flags+=("--relational-database-blueprint-id"); 
$flags+=("--relational-database-bundle-id"); 
$flags+=("--master-database-name"); 
$flags+=("--master-username"); 
$flags+=("--master-user-password"); 
$flags+=("--preferred-backup-window"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--publicly-accessible"); 
$flags+=("--no-publicly-accessible"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-create-relational-database-from-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--relational-database-name"); 
$flags+=("--availability-zone"); 
$flags+=("--publicly-accessible"); 
$flags+=("--no-publicly-accessible"); 
$flags+=("--relational-database-snapshot-name"); 
$flags+=("--relational-database-bundle-id"); 
$flags+=("--source-relational-database-name"); 
$flags+=("--restore-time"); 
$flags+=("--use-latest-restorable-time"); 
$flags+=("--no-use-latest-restorable-time"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-create-relational-database-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--relational-database-name"); 
$flags+=("--relational-database-snapshot-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-delete-alarm {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--alarm-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-delete-auto-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--date"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-delete-contact-method {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--protocol"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-delete-disk {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--disk-name"); 
$flags+=("--force-delete-add-ons"); 
$flags+=("--no-force-delete-add-ons"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-delete-disk-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--disk-snapshot-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-delete-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-delete-domain-entry {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--domain-entry"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-delete-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-name"); 
$flags+=("--force-delete-add-ons"); 
$flags+=("--no-force-delete-add-ons"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-delete-instance-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-snapshot-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-delete-key-pair {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-pair-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-delete-known-host-keys {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-delete-load-balancer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-delete-load-balancer-tls-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--certificate-name"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-delete-relational-database {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--relational-database-name"); 
$flags+=("--skip-final-snapshot"); 
$flags+=("--no-skip-final-snapshot"); 
$flags+=("--final-relational-database-snapshot-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-delete-relational-database-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--relational-database-snapshot-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-detach-disk {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--disk-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-detach-instances-from-load-balancer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--instance-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-detach-static-ip {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--static-ip-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-disable-add-on {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--add-on-type"); 
$flags+=("--resource-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-download-default-key-pair {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-enable-add-on {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--add-on-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-export-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-snapshot-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-active-names {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-snapshot-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-alarms {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--alarm-name"); 
$flags+=("--page-token"); 
$flags+=("--monitored-resource-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-auto-snapshots {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-blueprints {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--include-inactive"); 
$flags+=("--no-include-inactive"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-bundles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--include-inactive"); 
$flags+=("--no-include-inactive"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-cloud-formation-stack-records {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-contact-methods {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--protocols"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-disk {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--disk-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-disk-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--disk-snapshot-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-disk-snapshots {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-disks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-domains {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-export-snapshot-records {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-instance-access-details {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-name"); 
$flags+=("--protocol"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-instance-metric-data {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-name"); 
$flags+=("--metric-name"); 
$flags+=("--period"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--unit"); 
$flags+=("--statistics"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-instance-port-states {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-instance-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-snapshot-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-instance-snapshots {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-instance-state {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-key-pair {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-pair-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-key-pairs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-load-balancer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-load-balancer-metric-data {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--metric-name"); 
$flags+=("--period"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--unit"); 
$flags+=("--statistics"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-load-balancer-tls-certificates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-load-balancers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-operation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--operation-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-operations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-operations-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--page-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-regions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--include-availability-zones"); 
$flags+=("--no-include-availability-zones"); 
$flags+=("--include-relational-database-availability-zones"); 
$flags+=("--no-include-relational-database-availability-zones"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-relational-database {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--relational-database-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-relational-database-blueprints {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-relational-database-bundles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-relational-database-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--relational-database-name"); 
$flags+=("--duration-in-minutes"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-relational-database-log-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--relational-database-name"); 
$flags+=("--log-stream-name"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--start-from-head"); 
$flags+=("--no-start-from-head"); 
$flags+=("--page-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-relational-database-log-streams {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--relational-database-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-relational-database-master-user-password {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--relational-database-name"); 
$flags+=("--password-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-relational-database-metric-data {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--relational-database-name"); 
$flags+=("--metric-name"); 
$flags+=("--period"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--unit"); 
$flags+=("--statistics"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-relational-database-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--relational-database-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-relational-database-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--relational-database-snapshot-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-relational-database-snapshots {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-relational-databases {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-static-ip {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--static-ip-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-get-static-ips {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-import-key-pair {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-pair-name"); 
$flags+=("--public-key-base"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-is-vpc-peered {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-open-instance-public-ports {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--port-info"); 
$flags+=("--instance-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-peer-vpc {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-put-alarm {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--alarm-name"); 
$flags+=("--metric-name"); 
$flags+=("--monitored-resource-name"); 
$flags+=("--comparison-operator"); 
$flags+=("--threshold"); 
$flags+=("--evaluation-periods"); 
$flags+=("--datapoints-to-alarm"); 
$flags+=("--treat-missing-data"); 
$flags+=("--contact-protocols"); 
$flags+=("--notification-triggers"); 
$flags+=("--notification-enabled"); 
$flags+=("--no-notification-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-put-instance-public-ports {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--port-infos"); 
$flags+=("--instance-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-reboot-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-reboot-relational-database {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--relational-database-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-release-static-ip {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--static-ip-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-send-contact-method-verification {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--protocol"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-start-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-start-relational-database {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--relational-database-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-stop-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-name"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-stop-relational-database {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--relational-database-name"); 
$flags+=("--relational-database-snapshot-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-test-alarm {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--alarm-name"); 
$flags+=("--state"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-unpeer-vpc {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-update-domain-entry {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--domain-entry"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-update-load-balancer-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--load-balancer-name"); 
$flags+=("--attribute-name"); 
$flags+=("--attribute-value"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-update-relational-database {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--relational-database-name"); 
$flags+=("--master-user-password"); 
$flags+=("--rotate-master-user-password"); 
$flags+=("--no-rotate-master-user-password"); 
$flags+=("--preferred-backup-window"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--enable-backup-retention"); 
$flags+=("--no-enable-backup-retention"); 
$flags+=("--disable-backup-retention"); 
$flags+=("--no-disable-backup-retention"); 
$flags+=("--publicly-accessible"); 
$flags+=("--no-publicly-accessible"); 
$flags+=("--apply-immediately"); 
$flags+=("--no-apply-immediately"); 
$flags+=("--ca-certificate-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-lightsail-update-relational-database-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--relational-database-name"); 
$flags+=("--parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-kms-key"); 
$commands+=("cancel-export-task"); 
$commands+=("create-export-task"); 
$commands+=("create-log-group"); 
$commands+=("create-log-stream"); 
$commands+=("delete-destination"); 
$commands+=("delete-log-group"); 
$commands+=("delete-log-stream"); 
$commands+=("delete-metric-filter"); 
$commands+=("delete-resource-policy"); 
$commands+=("delete-retention-policy"); 
$commands+=("delete-subscription-filter"); 
$commands+=("describe-destinations"); 
$commands+=("describe-export-tasks"); 
$commands+=("describe-log-groups"); 
$commands+=("describe-log-streams"); 
$commands+=("describe-metric-filters"); 
$commands+=("describe-queries"); 
$commands+=("describe-resource-policies"); 
$commands+=("describe-subscription-filters"); 
$commands+=("disassociate-kms-key"); 
$commands+=("filter-log-events"); 
$commands+=("get-log-events"); 
$commands+=("get-log-group-fields"); 
$commands+=("get-log-record"); 
$commands+=("get-query-results"); 
$commands+=("list-tags-log-group"); 
$commands+=("put-destination"); 
$commands+=("put-destination-policy"); 
$commands+=("put-log-events"); 
$commands+=("put-metric-filter"); 
$commands+=("put-resource-policy"); 
$commands+=("put-retention-policy"); 
$commands+=("put-subscription-filter"); 
$commands+=("start-query"); 
$commands+=("stop-query"); 
$commands+=("tag-log-group"); 
$commands+=("test-metric-filter"); 
$commands+=("untag-log-group");

return $commands;
}

 function Get-logs-associate-kms-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name"); 
$flags+=("--kms-key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-cancel-export-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-create-export-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-name"); 
$flags+=("--log-group-name"); 
$flags+=("--log-stream-name-prefix"); 
$flags+=("--from"); 
$flags+=("--to"); 
$flags+=("--destination"); 
$flags+=("--destination-prefix"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-create-log-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name"); 
$flags+=("--kms-key-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-create-log-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name"); 
$flags+=("--log-stream-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-delete-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--destination-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-delete-log-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-delete-log-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name"); 
$flags+=("--log-stream-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-delete-metric-filter {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name"); 
$flags+=("--filter-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-delete-resource-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-delete-retention-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-delete-subscription-filter {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name"); 
$flags+=("--filter-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-describe-destinations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--destination-name-prefix"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-describe-export-tasks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-id"); 
$flags+=("--status-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-describe-log-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name-prefix"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-describe-log-streams {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name"); 
$flags+=("--log-stream-name-prefix"); 
$flags+=("--order-by"); 
$flags+=("--descending"); 
$flags+=("--no-descending"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-describe-metric-filters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name"); 
$flags+=("--filter-name-prefix"); 
$flags+=("--metric-name"); 
$flags+=("--metric-namespace"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-describe-queries {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-describe-resource-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-describe-subscription-filters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name"); 
$flags+=("--filter-name-prefix"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-disassociate-kms-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-filter-log-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name"); 
$flags+=("--log-stream-names"); 
$flags+=("--log-stream-name-prefix"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--filter-pattern"); 
$flags+=("--interleaved"); 
$flags+=("--no-interleaved"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-get-log-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name"); 
$flags+=("--log-stream-name"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--next-token"); 
$flags+=("--limit"); 
$flags+=("--start-from-head"); 
$flags+=("--no-start-from-head"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-get-log-group-fields {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name"); 
$flags+=("--time"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-get-log-record {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-record-pointer"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-get-query-results {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--query-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-list-tags-log-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-put-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--destination-name"); 
$flags+=("--target-arn"); 
$flags+=("--role-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-put-destination-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--destination-name"); 
$flags+=("--access-policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-put-log-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name"); 
$flags+=("--log-stream-name"); 
$flags+=("--log-events"); 
$flags+=("--sequence-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-put-metric-filter {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name"); 
$flags+=("--filter-name"); 
$flags+=("--filter-pattern"); 
$flags+=("--metric-transformations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-put-resource-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-name"); 
$flags+=("--policy-document"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-put-retention-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name"); 
$flags+=("--retention-in-days"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-put-subscription-filter {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name"); 
$flags+=("--filter-name"); 
$flags+=("--filter-pattern"); 
$flags+=("--destination-arn"); 
$flags+=("--role-arn"); 
$flags+=("--distribution"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-start-query {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name"); 
$flags+=("--log-group-names"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--query-string"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-stop-query {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--query-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-tag-log-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-test-metric-filter {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter-pattern"); 
$flags+=("--log-event-messages"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-logs-untag-log-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-group-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-tags"); 
$commands+=("create-batch-prediction"); 
$commands+=("create-data-source-from-rds"); 
$commands+=("create-data-source-from-redshift"); 
$commands+=("create-data-source-from-s3"); 
$commands+=("create-evaluation"); 
$commands+=("create-ml-model"); 
$commands+=("create-realtime-endpoint"); 
$commands+=("delete-batch-prediction"); 
$commands+=("delete-data-source"); 
$commands+=("delete-evaluation"); 
$commands+=("delete-ml-model"); 
$commands+=("delete-realtime-endpoint"); 
$commands+=("delete-tags"); 
$commands+=("describe-batch-predictions"); 
$commands+=("describe-data-sources"); 
$commands+=("describe-evaluations"); 
$commands+=("describe-ml-models"); 
$commands+=("describe-tags"); 
$commands+=("get-batch-prediction"); 
$commands+=("get-data-source"); 
$commands+=("get-evaluation"); 
$commands+=("get-ml-model"); 
$commands+=("predict"); 
$commands+=("update-batch-prediction"); 
$commands+=("update-data-source"); 
$commands+=("update-evaluation"); 
$commands+=("update-ml-model"); 
$commands+=("wait");

return $commands;
}

 function Get-machinelearning-add-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--tags"); 
$flags+=("--resource-id"); 
$flags+=("--resource-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-create-batch-prediction {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--batch-prediction-id"); 
$flags+=("--batch-prediction-name"); 
$flags+=("--ml-model-id"); 
$flags+=("--batch-prediction-data-source-id"); 
$flags+=("--output-uri"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-create-data-source-from-rds {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--data-source-id"); 
$flags+=("--data-source-name"); 
$flags+=("--rds-data"); 
$flags+=("--role-arn"); 
$flags+=("--compute-statistics"); 
$flags+=("--no-compute-statistics"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-create-data-source-from-redshift {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--data-source-id"); 
$flags+=("--data-source-name"); 
$flags+=("--data-spec"); 
$flags+=("--role-arn"); 
$flags+=("--compute-statistics"); 
$flags+=("--no-compute-statistics"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-create-data-source-from-s3 {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--data-source-id"); 
$flags+=("--data-source-name"); 
$flags+=("--data-spec"); 
$flags+=("--compute-statistics"); 
$flags+=("--no-compute-statistics"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-create-evaluation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--evaluation-id"); 
$flags+=("--evaluation-name"); 
$flags+=("--ml-model-id"); 
$flags+=("--evaluation-data-source-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-create-ml-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ml-model-id"); 
$flags+=("--ml-model-name"); 
$flags+=("--ml-model-type"); 
$flags+=("--parameters"); 
$flags+=("--training-data-source-id"); 
$flags+=("--recipe"); 
$flags+=("--recipe-uri"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-create-realtime-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ml-model-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-delete-batch-prediction {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--batch-prediction-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-delete-data-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--data-source-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-delete-evaluation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--evaluation-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-delete-ml-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ml-model-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-delete-realtime-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ml-model-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-delete-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--tag-keys"); 
$flags+=("--resource-id"); 
$flags+=("--resource-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-describe-batch-predictions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter-variable"); 
$flags+=("--eq"); 
$flags+=("--gt"); 
$flags+=("--lt"); 
$flags+=("--ge"); 
$flags+=("--le"); 
$flags+=("--ne"); 
$flags+=("--prefix"); 
$flags+=("--sort-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-describe-data-sources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter-variable"); 
$flags+=("--eq"); 
$flags+=("--gt"); 
$flags+=("--lt"); 
$flags+=("--ge"); 
$flags+=("--le"); 
$flags+=("--ne"); 
$flags+=("--prefix"); 
$flags+=("--sort-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-describe-evaluations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter-variable"); 
$flags+=("--eq"); 
$flags+=("--gt"); 
$flags+=("--lt"); 
$flags+=("--ge"); 
$flags+=("--le"); 
$flags+=("--ne"); 
$flags+=("--prefix"); 
$flags+=("--sort-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-describe-ml-models {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter-variable"); 
$flags+=("--eq"); 
$flags+=("--gt"); 
$flags+=("--lt"); 
$flags+=("--ge"); 
$flags+=("--le"); 
$flags+=("--ne"); 
$flags+=("--prefix"); 
$flags+=("--sort-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-describe-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--resource-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-get-batch-prediction {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--batch-prediction-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-get-data-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--data-source-id"); 
$flags+=("--verbose"); 
$flags+=("--no-verbose"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-get-evaluation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--evaluation-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-get-ml-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ml-model-id"); 
$flags+=("--verbose"); 
$flags+=("--no-verbose"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-predict {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ml-model-id"); 
$flags+=("--record"); 
$flags+=("--predict-endpoint"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-update-batch-prediction {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--batch-prediction-id"); 
$flags+=("--batch-prediction-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-update-data-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--data-source-id"); 
$flags+=("--data-source-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-update-evaluation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--evaluation-id"); 
$flags+=("--evaluation-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-update-ml-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ml-model-id"); 
$flags+=("--ml-model-name"); 
$flags+=("--score-threshold"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-machinelearning-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-macie {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-member-account"); 
$commands+=("associate-s3-resources"); 
$commands+=("disassociate-member-account"); 
$commands+=("disassociate-s3-resources"); 
$commands+=("list-member-accounts"); 
$commands+=("list-s3-resources"); 
$commands+=("update-s3-resources");

return $commands;
}

 function Get-macie-associate-member-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--member-account-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-macie-associate-s3-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--member-account-id"); 
$flags+=("--s"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-macie-disassociate-member-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--member-account-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-macie-disassociate-s3-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--member-account-id"); 
$flags+=("--associated-s"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-macie-list-member-accounts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-macie-list-s3-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--member-account-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-macie-update-s3-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--member-account-id"); 
$flags+=("--s"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-managedblockchain {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-member"); 
$commands+=("create-network"); 
$commands+=("create-node"); 
$commands+=("create-proposal"); 
$commands+=("delete-member"); 
$commands+=("delete-node"); 
$commands+=("get-member"); 
$commands+=("get-network"); 
$commands+=("get-node"); 
$commands+=("get-proposal"); 
$commands+=("list-invitations"); 
$commands+=("list-members"); 
$commands+=("list-networks"); 
$commands+=("list-nodes"); 
$commands+=("list-proposal-votes"); 
$commands+=("list-proposals"); 
$commands+=("reject-invitation"); 
$commands+=("update-member"); 
$commands+=("update-node"); 
$commands+=("vote-on-proposal");

return $commands;
}

 function Get-managedblockchain-create-member {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-request-token"); 
$flags+=("--invitation-id"); 
$flags+=("--network-id"); 
$flags+=("--member-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-managedblockchain-create-network {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-request-token"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--framework"); 
$flags+=("--framework-version"); 
$flags+=("--framework-configuration"); 
$flags+=("--voting-policy"); 
$flags+=("--member-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-managedblockchain-create-node {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-request-token"); 
$flags+=("--network-id"); 
$flags+=("--member-id"); 
$flags+=("--node-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-managedblockchain-create-proposal {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-request-token"); 
$flags+=("--network-id"); 
$flags+=("--member-id"); 
$flags+=("--actions"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-managedblockchain-delete-member {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--network-id"); 
$flags+=("--member-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-managedblockchain-delete-node {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--network-id"); 
$flags+=("--member-id"); 
$flags+=("--node-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-managedblockchain-get-member {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--network-id"); 
$flags+=("--member-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-managedblockchain-get-network {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--network-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-managedblockchain-get-node {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--network-id"); 
$flags+=("--member-id"); 
$flags+=("--node-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-managedblockchain-get-proposal {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--network-id"); 
$flags+=("--proposal-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-managedblockchain-list-invitations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-managedblockchain-list-members {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--network-id"); 
$flags+=("--name"); 
$flags+=("--status"); 
$flags+=("--is-owned"); 
$flags+=("--no-is-owned"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-managedblockchain-list-networks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--framework"); 
$flags+=("--status"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-managedblockchain-list-nodes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--network-id"); 
$flags+=("--member-id"); 
$flags+=("--status"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-managedblockchain-list-proposal-votes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--network-id"); 
$flags+=("--proposal-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-managedblockchain-list-proposals {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--network-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-managedblockchain-reject-invitation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--invitation-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-managedblockchain-update-member {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--network-id"); 
$flags+=("--member-id"); 
$flags+=("--log-publishing-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-managedblockchain-update-node {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--network-id"); 
$flags+=("--member-id"); 
$flags+=("--node-id"); 
$flags+=("--log-publishing-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-managedblockchain-vote-on-proposal {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--network-id"); 
$flags+=("--proposal-id"); 
$flags+=("--voter-member-id"); 
$flags+=("--vote"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-marketplace-catalog {
    $commands = [System.Collections.ArrayList]@();

$commands+=("cancel-change-set"); 
$commands+=("describe-change-set"); 
$commands+=("describe-entity"); 
$commands+=("list-change-sets"); 
$commands+=("list-entities"); 
$commands+=("start-change-set");

return $commands;
}

 function Get-marketplace-catalog-cancel-change-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog"); 
$flags+=("--change-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-marketplace-catalog-describe-change-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog"); 
$flags+=("--change-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-marketplace-catalog-describe-entity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog"); 
$flags+=("--entity-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-marketplace-catalog-list-change-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog"); 
$flags+=("--filter-list"); 
$flags+=("--sort"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-marketplace-catalog-list-entities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog"); 
$flags+=("--entity-type"); 
$flags+=("--filter-list"); 
$flags+=("--sort"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-marketplace-catalog-start-change-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--catalog"); 
$flags+=("--change-set"); 
$flags+=("--change-set-name"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-marketplace-entitlement {
    $commands = [System.Collections.ArrayList]@();

$commands+=("get-entitlements");

return $commands;
}

 function Get-marketplace-entitlement-get-entitlements {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--product-code"); 
$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-marketplacecommerceanalytics {
    $commands = [System.Collections.ArrayList]@();

$commands+=("generate-data-set"); 
$commands+=("start-support-data-export");

return $commands;
}

 function Get-marketplacecommerceanalytics-generate-data-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--data-set-type"); 
$flags+=("--data-set-publication-date"); 
$flags+=("--role-name-arn"); 
$flags+=("--destination-s"); 
$flags+=("--destination-s"); 
$flags+=("--sns-topic-arn"); 
$flags+=("--customer-defined-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-marketplacecommerceanalytics-start-support-data-export {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--data-set-type"); 
$flags+=("--from-date"); 
$flags+=("--role-name-arn"); 
$flags+=("--destination-s"); 
$flags+=("--destination-s"); 
$flags+=("--sns-topic-arn"); 
$flags+=("--customer-defined-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconnect {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-flow-outputs"); 
$commands+=("add-flow-sources"); 
$commands+=("add-flow-vpc-interfaces"); 
$commands+=("create-flow"); 
$commands+=("delete-flow"); 
$commands+=("describe-flow"); 
$commands+=("grant-flow-entitlements"); 
$commands+=("list-entitlements"); 
$commands+=("list-flows"); 
$commands+=("list-tags-for-resource"); 
$commands+=("remove-flow-output"); 
$commands+=("remove-flow-source"); 
$commands+=("remove-flow-vpc-interface"); 
$commands+=("revoke-flow-entitlement"); 
$commands+=("start-flow"); 
$commands+=("stop-flow"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-flow"); 
$commands+=("update-flow-entitlement"); 
$commands+=("update-flow-output"); 
$commands+=("update-flow-source");

return $commands;
}

 function Get-mediaconnect-add-flow-outputs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--flow-arn"); 
$flags+=("--outputs"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconnect-add-flow-sources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--flow-arn"); 
$flags+=("--sources"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconnect-add-flow-vpc-interfaces {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--flow-arn"); 
$flags+=("--vpc-interfaces"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconnect-create-flow {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--availability-zone"); 
$flags+=("--entitlements"); 
$flags+=("--name"); 
$flags+=("--outputs"); 
$flags+=("--source"); 
$flags+=("--source-failover-config"); 
$flags+=("--sources"); 
$flags+=("--vpc-interfaces"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconnect-delete-flow {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--flow-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconnect-describe-flow {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--flow-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconnect-grant-flow-entitlements {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--entitlements"); 
$flags+=("--flow-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconnect-list-entitlements {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconnect-list-flows {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconnect-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconnect-remove-flow-output {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--flow-arn"); 
$flags+=("--output-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconnect-remove-flow-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--flow-arn"); 
$flags+=("--source-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconnect-remove-flow-vpc-interface {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--flow-arn"); 
$flags+=("--vpc-interface-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconnect-revoke-flow-entitlement {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--entitlement-arn"); 
$flags+=("--flow-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconnect-start-flow {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--flow-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconnect-stop-flow {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--flow-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconnect-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconnect-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconnect-update-flow {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--flow-arn"); 
$flags+=("--source-failover-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconnect-update-flow-entitlement {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--encryption"); 
$flags+=("--entitlement-arn"); 
$flags+=("--flow-arn"); 
$flags+=("--subscribers"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconnect-update-flow-output {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cidr-allow-list"); 
$flags+=("--description"); 
$flags+=("--destination"); 
$flags+=("--encryption"); 
$flags+=("--flow-arn"); 
$flags+=("--max-latency"); 
$flags+=("--output-arn"); 
$flags+=("--port"); 
$flags+=("--protocol"); 
$flags+=("--remote-id"); 
$flags+=("--smoothing-latency"); 
$flags+=("--stream-id"); 
$flags+=("--vpc-interface-attachment"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconnect-update-flow-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--decryption"); 
$flags+=("--description"); 
$flags+=("--entitlement-arn"); 
$flags+=("--flow-arn"); 
$flags+=("--ingest-port"); 
$flags+=("--max-bitrate"); 
$flags+=("--max-latency"); 
$flags+=("--protocol"); 
$flags+=("--source-arn"); 
$flags+=("--stream-id"); 
$flags+=("--vpc-interface-name"); 
$flags+=("--whitelist-cidr"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-certificate"); 
$commands+=("cancel-job"); 
$commands+=("create-job"); 
$commands+=("create-job-template"); 
$commands+=("create-preset"); 
$commands+=("create-queue"); 
$commands+=("delete-job-template"); 
$commands+=("delete-preset"); 
$commands+=("delete-queue"); 
$commands+=("describe-endpoints"); 
$commands+=("disassociate-certificate"); 
$commands+=("get-job"); 
$commands+=("get-job-template"); 
$commands+=("get-preset"); 
$commands+=("get-queue"); 
$commands+=("list-job-templates"); 
$commands+=("list-jobs"); 
$commands+=("list-presets"); 
$commands+=("list-queues"); 
$commands+=("list-tags-for-resource"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-job-template"); 
$commands+=("update-preset"); 
$commands+=("update-queue");

return $commands;
}

 function Get-mediaconvert-associate-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert-cancel-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert-create-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--acceleration-settings"); 
$flags+=("--billing-tags-source"); 
$flags+=("--client-request-token"); 
$flags+=("--hop-destinations"); 
$flags+=("--job-template"); 
$flags+=("--priority"); 
$flags+=("--queue"); 
$flags+=("--role"); 
$flags+=("--settings"); 
$flags+=("--simulate-reserved-queue"); 
$flags+=("--status-update-interval"); 
$flags+=("--tags"); 
$flags+=("--user-metadata"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert-create-job-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--acceleration-settings"); 
$flags+=("--category"); 
$flags+=("--description"); 
$flags+=("--hop-destinations"); 
$flags+=("--name"); 
$flags+=("--priority"); 
$flags+=("--queue"); 
$flags+=("--settings"); 
$flags+=("--status-update-interval"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert-create-preset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--category"); 
$flags+=("--description"); 
$flags+=("--name"); 
$flags+=("--settings"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert-create-queue {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--name"); 
$flags+=("--pricing-plan"); 
$flags+=("--reservation-plan-settings"); 
$flags+=("--status"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert-delete-job-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert-delete-preset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert-delete-queue {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert-describe-endpoints {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--mode"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert-disassociate-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert-get-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert-get-job-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert-get-preset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert-get-queue {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert-list-job-templates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--category"); 
$flags+=("--list-by"); 
$flags+=("--order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert-list-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--order"); 
$flags+=("--queue"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert-list-presets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--category"); 
$flags+=("--list-by"); 
$flags+=("--order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert-list-queues {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--list-by"); 
$flags+=("--order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert-update-job-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--acceleration-settings"); 
$flags+=("--category"); 
$flags+=("--description"); 
$flags+=("--hop-destinations"); 
$flags+=("--name"); 
$flags+=("--priority"); 
$flags+=("--queue"); 
$flags+=("--settings"); 
$flags+=("--status-update-interval"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert-update-preset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--category"); 
$flags+=("--description"); 
$flags+=("--name"); 
$flags+=("--settings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediaconvert-update-queue {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--name"); 
$flags+=("--reservation-plan-settings"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive {
    $commands = [System.Collections.ArrayList]@();

$commands+=("batch-update-schedule"); 
$commands+=("create-channel"); 
$commands+=("create-input"); 
$commands+=("create-input-security-group"); 
$commands+=("create-multiplex"); 
$commands+=("create-multiplex-program"); 
$commands+=("create-tags"); 
$commands+=("delete-channel"); 
$commands+=("delete-input"); 
$commands+=("delete-input-security-group"); 
$commands+=("delete-multiplex"); 
$commands+=("delete-multiplex-program"); 
$commands+=("delete-reservation"); 
$commands+=("delete-schedule"); 
$commands+=("delete-tags"); 
$commands+=("describe-channel"); 
$commands+=("describe-input"); 
$commands+=("describe-input-security-group"); 
$commands+=("describe-multiplex"); 
$commands+=("describe-multiplex-program"); 
$commands+=("describe-offering"); 
$commands+=("describe-reservation"); 
$commands+=("describe-schedule"); 
$commands+=("list-channels"); 
$commands+=("list-input-security-groups"); 
$commands+=("list-inputs"); 
$commands+=("list-multiplex-programs"); 
$commands+=("list-multiplexes"); 
$commands+=("list-offerings"); 
$commands+=("list-reservations"); 
$commands+=("list-tags-for-resource"); 
$commands+=("purchase-offering"); 
$commands+=("start-channel"); 
$commands+=("start-multiplex"); 
$commands+=("stop-channel"); 
$commands+=("stop-multiplex"); 
$commands+=("update-channel"); 
$commands+=("update-channel-class"); 
$commands+=("update-input"); 
$commands+=("update-input-security-group"); 
$commands+=("update-multiplex"); 
$commands+=("update-multiplex-program"); 
$commands+=("update-reservation"); 
$commands+=("wait");

return $commands;
}

 function Get-medialive-batch-update-schedule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-id"); 
$flags+=("--creates"); 
$flags+=("--deletes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-create-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-class"); 
$flags+=("--destinations"); 
$flags+=("--encoder-settings"); 
$flags+=("--input-attachments"); 
$flags+=("--input-specification"); 
$flags+=("--log-level"); 
$flags+=("--name"); 
$flags+=("--request-id"); 
$flags+=("--reserved"); 
$flags+=("--role-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-create-input {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--destinations"); 
$flags+=("--input-security-groups"); 
$flags+=("--media-connect-flows"); 
$flags+=("--name"); 
$flags+=("--request-id"); 
$flags+=("--role-arn"); 
$flags+=("--sources"); 
$flags+=("--tags"); 
$flags+=("--type"); 
$flags+=("--vpc"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-create-input-security-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--tags"); 
$flags+=("--whitelist-rules"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-create-multiplex {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--availability-zones"); 
$flags+=("--multiplex-settings"); 
$flags+=("--name"); 
$flags+=("--request-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-create-multiplex-program {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--multiplex-id"); 
$flags+=("--multiplex-program-settings"); 
$flags+=("--program-name"); 
$flags+=("--request-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-create-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-delete-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-delete-input {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--input-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-delete-input-security-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--input-security-group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-delete-multiplex {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--multiplex-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-delete-multiplex-program {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--multiplex-id"); 
$flags+=("--program-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-delete-reservation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--reservation-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-delete-schedule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-delete-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-describe-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-describe-input {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--input-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-describe-input-security-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--input-security-group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-describe-multiplex {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--multiplex-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-describe-multiplex-program {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--multiplex-id"); 
$flags+=("--program-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-describe-offering {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--offering-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-describe-reservation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--reservation-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-describe-schedule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-list-channels {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-list-input-security-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-list-inputs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-list-multiplex-programs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--multiplex-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-list-multiplexes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-list-offerings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-class"); 
$flags+=("--channel-configuration"); 
$flags+=("--codec"); 
$flags+=("--duration"); 
$flags+=("--maximum-bitrate"); 
$flags+=("--maximum-framerate"); 
$flags+=("--resolution"); 
$flags+=("--resource-type"); 
$flags+=("--special-feature"); 
$flags+=("--video-quality"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-list-reservations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-class"); 
$flags+=("--codec"); 
$flags+=("--maximum-bitrate"); 
$flags+=("--maximum-framerate"); 
$flags+=("--resolution"); 
$flags+=("--resource-type"); 
$flags+=("--special-feature"); 
$flags+=("--video-quality"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-purchase-offering {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--count"); 
$flags+=("--name"); 
$flags+=("--offering-id"); 
$flags+=("--request-id"); 
$flags+=("--start"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-start-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-start-multiplex {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--multiplex-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-stop-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-stop-multiplex {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--multiplex-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-update-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-id"); 
$flags+=("--destinations"); 
$flags+=("--encoder-settings"); 
$flags+=("--input-attachments"); 
$flags+=("--input-specification"); 
$flags+=("--log-level"); 
$flags+=("--name"); 
$flags+=("--role-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-update-channel-class {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-class"); 
$flags+=("--channel-id"); 
$flags+=("--destinations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-update-input {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--destinations"); 
$flags+=("--input-id"); 
$flags+=("--input-security-groups"); 
$flags+=("--media-connect-flows"); 
$flags+=("--name"); 
$flags+=("--role-arn"); 
$flags+=("--sources"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-update-input-security-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--input-security-group-id"); 
$flags+=("--tags"); 
$flags+=("--whitelist-rules"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-update-multiplex {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--multiplex-id"); 
$flags+=("--multiplex-settings"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-update-multiplex-program {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--multiplex-id"); 
$flags+=("--multiplex-program-settings"); 
$flags+=("--program-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-update-reservation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--reservation-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-medialive-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-mediapackage {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-channel"); 
$commands+=("create-harvest-job"); 
$commands+=("create-origin-endpoint"); 
$commands+=("delete-channel"); 
$commands+=("delete-origin-endpoint"); 
$commands+=("describe-channel"); 
$commands+=("describe-harvest-job"); 
$commands+=("describe-origin-endpoint"); 
$commands+=("list-channels"); 
$commands+=("list-harvest-jobs"); 
$commands+=("list-origin-endpoints"); 
$commands+=("list-tags-for-resource"); 
$commands+=("rotate-ingest-endpoint-credentials"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-channel"); 
$commands+=("update-origin-endpoint");

return $commands;
}

 function Get-mediapackage-create-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-create-harvest-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--end-time"); 
$flags+=("--id"); 
$flags+=("--origin-endpoint-id"); 
$flags+=("--s"); 
$flags+=("--start-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-create-origin-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authorization"); 
$flags+=("--channel-id"); 
$flags+=("--cmaf-package"); 
$flags+=("--dash-package"); 
$flags+=("--description"); 
$flags+=("--hls-package"); 
$flags+=("--id"); 
$flags+=("--manifest-name"); 
$flags+=("--mss-package"); 
$flags+=("--origination"); 
$flags+=("--startover-window-seconds"); 
$flags+=("--tags"); 
$flags+=("--time-delay-seconds"); 
$flags+=("--whitelist"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-delete-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-delete-origin-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-describe-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-describe-harvest-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-describe-origin-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-list-channels {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-list-harvest-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--include-channel-id"); 
$flags+=("--include-status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-list-origin-endpoints {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--channel-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-rotate-ingest-endpoint-credentials {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--ingest-endpoint-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-update-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-update-origin-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authorization"); 
$flags+=("--cmaf-package"); 
$flags+=("--dash-package"); 
$flags+=("--description"); 
$flags+=("--hls-package"); 
$flags+=("--id"); 
$flags+=("--manifest-name"); 
$flags+=("--mss-package"); 
$flags+=("--origination"); 
$flags+=("--startover-window-seconds"); 
$flags+=("--time-delay-seconds"); 
$flags+=("--whitelist"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-vod {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-asset"); 
$commands+=("create-packaging-configuration"); 
$commands+=("create-packaging-group"); 
$commands+=("delete-asset"); 
$commands+=("delete-packaging-configuration"); 
$commands+=("delete-packaging-group"); 
$commands+=("describe-asset"); 
$commands+=("describe-packaging-configuration"); 
$commands+=("describe-packaging-group"); 
$commands+=("list-assets"); 
$commands+=("list-packaging-configurations"); 
$commands+=("list-packaging-groups"); 
$commands+=("list-tags-for-resource"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource");

return $commands;
}

 function Get-mediapackage-vod-create-asset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--packaging-group-id"); 
$flags+=("--resource-id"); 
$flags+=("--source-arn"); 
$flags+=("--source-role-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-vod-create-packaging-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cmaf-package"); 
$flags+=("--dash-package"); 
$flags+=("--hls-package"); 
$flags+=("--id"); 
$flags+=("--mss-package"); 
$flags+=("--packaging-group-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-vod-create-packaging-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-vod-delete-asset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-vod-delete-packaging-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-vod-delete-packaging-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-vod-describe-asset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-vod-describe-packaging-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-vod-describe-packaging-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-vod-list-assets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--packaging-group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-vod-list-packaging-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--packaging-group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-vod-list-packaging-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-vod-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-vod-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediapackage-vod-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-container"); 
$commands+=("delete-container"); 
$commands+=("delete-container-policy"); 
$commands+=("delete-cors-policy"); 
$commands+=("delete-lifecycle-policy"); 
$commands+=("delete-metric-policy"); 
$commands+=("describe-container"); 
$commands+=("get-container-policy"); 
$commands+=("get-cors-policy"); 
$commands+=("get-lifecycle-policy"); 
$commands+=("get-metric-policy"); 
$commands+=("list-containers"); 
$commands+=("list-tags-for-resource"); 
$commands+=("put-container-policy"); 
$commands+=("put-cors-policy"); 
$commands+=("put-lifecycle-policy"); 
$commands+=("put-metric-policy"); 
$commands+=("start-access-logging"); 
$commands+=("stop-access-logging"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource");

return $commands;
}

 function Get-mediastore-create-container {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--container-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore-delete-container {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--container-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore-delete-container-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--container-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore-delete-cors-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--container-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore-delete-lifecycle-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--container-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore-delete-metric-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--container-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore-describe-container {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--container-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore-get-container-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--container-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore-get-cors-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--container-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore-get-lifecycle-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--container-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore-get-metric-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--container-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore-list-containers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore-put-container-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--container-name"); 
$flags+=("--policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore-put-cors-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--container-name"); 
$flags+=("--cors-policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore-put-lifecycle-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--container-name"); 
$flags+=("--lifecycle-policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore-put-metric-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--container-name"); 
$flags+=("--metric-policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore-start-access-logging {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--container-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore-stop-access-logging {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--container-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore-data {
    $commands = [System.Collections.ArrayList]@();

$commands+=("delete-object"); 
$commands+=("describe-object"); 
$commands+=("get-object"); 
$commands+=("list-items"); 
$commands+=("put-object");

return $commands;
}

 function Get-mediastore-data-delete-object {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--path"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore-data-describe-object {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--path"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore-data-get-object {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--path"); 
$flags+=("--range");

return $flags;
}

 function Get-mediastore-data-list-items {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--path"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediastore-data-put-object {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--body"); 
$flags+=("--path"); 
$flags+=("--content-type"); 
$flags+=("--cache-control"); 
$flags+=("--storage-class"); 
$flags+=("--upload-availability"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediatailor {
    $commands = [System.Collections.ArrayList]@();

$commands+=("delete-playback-configuration"); 
$commands+=("get-playback-configuration"); 
$commands+=("list-playback-configurations"); 
$commands+=("list-tags-for-resource"); 
$commands+=("put-playback-configuration"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource");

return $commands;
}

 function Get-mediatailor-delete-playback-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediatailor-get-playback-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediatailor-list-playback-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediatailor-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediatailor-put-playback-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ad-decision-server-url"); 
$flags+=("--avail-suppression"); 
$flags+=("--cdn-configuration"); 
$flags+=("--dash-configuration"); 
$flags+=("--live-pre-roll-configuration"); 
$flags+=("--name"); 
$flags+=("--personalization-threshold-seconds"); 
$flags+=("--slate-ad-url"); 
$flags+=("--tags"); 
$flags+=("--transcode-profile-name"); 
$flags+=("--video-content-source-url"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediatailor-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mediatailor-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-meteringmarketplace {
    $commands = [System.Collections.ArrayList]@();

$commands+=("batch-meter-usage"); 
$commands+=("meter-usage"); 
$commands+=("register-usage"); 
$commands+=("resolve-customer");

return $commands;
}

 function Get-meteringmarketplace-batch-meter-usage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--usage-records"); 
$flags+=("--product-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-meteringmarketplace-meter-usage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--product-code"); 
$flags+=("--timestamp"); 
$flags+=("--usage-dimension"); 
$flags+=("--usage-quantity"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-meteringmarketplace-register-usage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--product-code"); 
$flags+=("--public-key-version"); 
$flags+=("--nonce"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-meteringmarketplace-resolve-customer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registration-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mgh {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-created-artifact"); 
$commands+=("associate-discovered-resource"); 
$commands+=("create-progress-update-stream"); 
$commands+=("delete-progress-update-stream"); 
$commands+=("describe-application-state"); 
$commands+=("describe-migration-task"); 
$commands+=("disassociate-created-artifact"); 
$commands+=("disassociate-discovered-resource"); 
$commands+=("import-migration-task"); 
$commands+=("list-application-states"); 
$commands+=("list-created-artifacts"); 
$commands+=("list-discovered-resources"); 
$commands+=("list-migration-tasks"); 
$commands+=("list-progress-update-streams"); 
$commands+=("notify-application-state"); 
$commands+=("notify-migration-task-state"); 
$commands+=("put-resource-attributes");

return $commands;
}

 function Get-mgh-associate-created-artifact {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--progress-update-stream"); 
$flags+=("--migration-task-name"); 
$flags+=("--created-artifact"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mgh-associate-discovered-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--progress-update-stream"); 
$flags+=("--migration-task-name"); 
$flags+=("--discovered-resource"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mgh-create-progress-update-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--progress-update-stream-name"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mgh-delete-progress-update-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--progress-update-stream-name"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mgh-describe-application-state {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mgh-describe-migration-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--progress-update-stream"); 
$flags+=("--migration-task-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mgh-disassociate-created-artifact {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--progress-update-stream"); 
$flags+=("--migration-task-name"); 
$flags+=("--created-artifact-name"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mgh-disassociate-discovered-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--progress-update-stream"); 
$flags+=("--migration-task-name"); 
$flags+=("--configuration-id"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mgh-import-migration-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--progress-update-stream"); 
$flags+=("--migration-task-name"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mgh-list-application-states {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mgh-list-created-artifacts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--progress-update-stream"); 
$flags+=("--migration-task-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mgh-list-discovered-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--progress-update-stream"); 
$flags+=("--migration-task-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mgh-list-migration-tasks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mgh-list-progress-update-streams {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mgh-notify-application-state {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--status"); 
$flags+=("--update-date-time"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mgh-notify-migration-task-state {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--progress-update-stream"); 
$flags+=("--migration-task-name"); 
$flags+=("--task"); 
$flags+=("--update-date-time"); 
$flags+=("--next-update-seconds"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mgh-put-resource-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--progress-update-stream"); 
$flags+=("--migration-task-name"); 
$flags+=("--resource-attribute-list"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-migrationhub-config {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-home-region-control"); 
$commands+=("describe-home-region-controls"); 
$commands+=("get-home-region");

return $commands;
}

 function Get-migrationhub-config-create-home-region-control {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--home-region"); 
$flags+=("--target"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-migrationhub-config-describe-home-region-controls {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--control-id"); 
$flags+=("--home-region"); 
$flags+=("--target"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-migrationhub-config-get-home-region {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mobile {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-project"); 
$commands+=("delete-project"); 
$commands+=("describe-bundle"); 
$commands+=("describe-project"); 
$commands+=("export-bundle"); 
$commands+=("export-project"); 
$commands+=("list-bundles"); 
$commands+=("list-projects"); 
$commands+=("update-project");

return $commands;
}

 function Get-mobile-create-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--contents"); 
$flags+=("--snapshot-id"); 
$flags+=("--project-region"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mobile-delete-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mobile-describe-bundle {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bundle-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mobile-describe-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-id"); 
$flags+=("--sync-from-resources"); 
$flags+=("--no-sync-from-resources"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mobile-export-bundle {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bundle-id"); 
$flags+=("--project-id"); 
$flags+=("--platform"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mobile-export-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mobile-list-bundles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mobile-list-projects {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mobile-update-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--contents"); 
$flags+=("--project-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mq {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-broker"); 
$commands+=("create-configuration"); 
$commands+=("create-tags"); 
$commands+=("create-user"); 
$commands+=("delete-broker"); 
$commands+=("delete-tags"); 
$commands+=("delete-user"); 
$commands+=("describe-broker"); 
$commands+=("describe-broker-engine-types"); 
$commands+=("describe-broker-instance-options"); 
$commands+=("describe-configuration"); 
$commands+=("describe-configuration-revision"); 
$commands+=("describe-user"); 
$commands+=("list-brokers"); 
$commands+=("list-configuration-revisions"); 
$commands+=("list-configurations"); 
$commands+=("list-tags"); 
$commands+=("list-users"); 
$commands+=("reboot-broker"); 
$commands+=("update-broker"); 
$commands+=("update-configuration"); 
$commands+=("update-user");

return $commands;
}

 function Get-mq-create-broker {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-minor-version-upgrade"); 
$flags+=("--no-auto-minor-version-upgrade"); 
$flags+=("--broker-name"); 
$flags+=("--configuration"); 
$flags+=("--creator-request-id"); 
$flags+=("--deployment-mode"); 
$flags+=("--encryption-options"); 
$flags+=("--engine-type"); 
$flags+=("--engine-version"); 
$flags+=("--host-instance-type"); 
$flags+=("--logs"); 
$flags+=("--maintenance-window-start-time"); 
$flags+=("--publicly-accessible"); 
$flags+=("--no-publicly-accessible"); 
$flags+=("--security-groups"); 
$flags+=("--storage-type"); 
$flags+=("--subnet-ids"); 
$flags+=("--tags"); 
$flags+=("--users"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mq-create-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--engine-type"); 
$flags+=("--engine-version"); 
$flags+=("--name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mq-create-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mq-create-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--broker-id"); 
$flags+=("--console-access"); 
$flags+=("--no-console-access"); 
$flags+=("--groups"); 
$flags+=("--password"); 
$flags+=("--username"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mq-delete-broker {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--broker-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mq-delete-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mq-delete-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--broker-id"); 
$flags+=("--username"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mq-describe-broker {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--broker-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mq-describe-broker-engine-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--engine-type"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mq-describe-broker-instance-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--engine-type"); 
$flags+=("--host-instance-type"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--storage-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mq-describe-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mq-describe-configuration-revision {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-id"); 
$flags+=("--configuration-revision"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mq-describe-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--broker-id"); 
$flags+=("--username"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mq-list-brokers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mq-list-configuration-revisions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mq-list-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mq-list-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mq-list-users {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--broker-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mq-reboot-broker {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--broker-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mq-update-broker {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-minor-version-upgrade"); 
$flags+=("--no-auto-minor-version-upgrade"); 
$flags+=("--broker-id"); 
$flags+=("--configuration"); 
$flags+=("--engine-version"); 
$flags+=("--host-instance-type"); 
$flags+=("--logs"); 
$flags+=("--security-groups"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mq-update-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-id"); 
$flags+=("--data"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mq-update-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--broker-id"); 
$flags+=("--console-access"); 
$flags+=("--no-console-access"); 
$flags+=("--groups"); 
$flags+=("--password"); 
$flags+=("--username"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk {
    $commands = [System.Collections.ArrayList]@();

$commands+=("accept-qualification-request"); 
$commands+=("approve-assignment"); 
$commands+=("associate-qualification-with-worker"); 
$commands+=("create-additional-assignments-for-hit"); 
$commands+=("create-hit"); 
$commands+=("create-hit-type"); 
$commands+=("create-hit-with-hit-type"); 
$commands+=("create-qualification-type"); 
$commands+=("create-worker-block"); 
$commands+=("delete-hit"); 
$commands+=("delete-qualification-type"); 
$commands+=("delete-worker-block"); 
$commands+=("disassociate-qualification-from-worker"); 
$commands+=("get-account-balance"); 
$commands+=("get-assignment"); 
$commands+=("get-file-upload-url"); 
$commands+=("get-hit"); 
$commands+=("get-qualification-score"); 
$commands+=("get-qualification-type"); 
$commands+=("list-assignments-for-hit"); 
$commands+=("list-bonus-payments"); 
$commands+=("list-hits"); 
$commands+=("list-hits-for-qualification-type"); 
$commands+=("list-qualification-requests"); 
$commands+=("list-qualification-types"); 
$commands+=("list-review-policy-results-for-hit"); 
$commands+=("list-reviewable-hits"); 
$commands+=("list-worker-blocks"); 
$commands+=("list-workers-with-qualification-type"); 
$commands+=("notify-workers"); 
$commands+=("reject-assignment"); 
$commands+=("reject-qualification-request"); 
$commands+=("send-bonus"); 
$commands+=("send-test-event-notification"); 
$commands+=("update-expiration-for-hit"); 
$commands+=("update-hit-review-status"); 
$commands+=("update-hit-type-of-hit"); 
$commands+=("update-notification-settings"); 
$commands+=("update-qualification-type");

return $commands;
}

 function Get-mturk-accept-qualification-request {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--qualification-request-id"); 
$flags+=("--integer-value"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-approve-assignment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assignment-id"); 
$flags+=("--requester-feedback"); 
$flags+=("--override-rejection"); 
$flags+=("--no-override-rejection"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-associate-qualification-with-worker {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--qualification-type-id"); 
$flags+=("--worker-id"); 
$flags+=("--integer-value"); 
$flags+=("--send-notification"); 
$flags+=("--no-send-notification"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-create-additional-assignments-for-hit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hit-id"); 
$flags+=("--number-of-additional-assignments"); 
$flags+=("--unique-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-create-hit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-assignments"); 
$flags+=("--auto-approval-delay-in-seconds"); 
$flags+=("--lifetime-in-seconds"); 
$flags+=("--assignment-duration-in-seconds"); 
$flags+=("--reward"); 
$flags+=("--title"); 
$flags+=("--keywords"); 
$flags+=("--description"); 
$flags+=("--question"); 
$flags+=("--requester-annotation"); 
$flags+=("--qualification-requirements"); 
$flags+=("--unique-request-token"); 
$flags+=("--assignment-review-policy"); 
$flags+=("--hit-review-policy"); 
$flags+=("--hit-layout-id"); 
$flags+=("--hit-layout-parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-create-hit-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-approval-delay-in-seconds"); 
$flags+=("--assignment-duration-in-seconds"); 
$flags+=("--reward"); 
$flags+=("--title"); 
$flags+=("--keywords"); 
$flags+=("--description"); 
$flags+=("--qualification-requirements"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-create-hit-with-hit-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hit-type-id"); 
$flags+=("--max-assignments"); 
$flags+=("--lifetime-in-seconds"); 
$flags+=("--question"); 
$flags+=("--requester-annotation"); 
$flags+=("--unique-request-token"); 
$flags+=("--assignment-review-policy"); 
$flags+=("--hit-review-policy"); 
$flags+=("--hit-layout-id"); 
$flags+=("--hit-layout-parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-create-qualification-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--keywords"); 
$flags+=("--description"); 
$flags+=("--qualification-type-status"); 
$flags+=("--retry-delay-in-seconds"); 
$flags+=("--test"); 
$flags+=("--answer-key"); 
$flags+=("--test-duration-in-seconds"); 
$flags+=("--auto-granted"); 
$flags+=("--no-auto-granted"); 
$flags+=("--auto-granted-value"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-create-worker-block {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--worker-id"); 
$flags+=("--reason"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-delete-hit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hit-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-delete-qualification-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--qualification-type-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-delete-worker-block {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--worker-id"); 
$flags+=("--reason"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-disassociate-qualification-from-worker {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--worker-id"); 
$flags+=("--qualification-type-id"); 
$flags+=("--reason"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-get-account-balance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-get-assignment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assignment-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-get-file-upload-url {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assignment-id"); 
$flags+=("--question-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-get-hit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hit-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-get-qualification-score {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--qualification-type-id"); 
$flags+=("--worker-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-get-qualification-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--qualification-type-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-list-assignments-for-hit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hit-id"); 
$flags+=("--assignment-statuses"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-list-bonus-payments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hit-id"); 
$flags+=("--assignment-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-list-hits {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-list-hits-for-qualification-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--qualification-type-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-list-qualification-requests {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--qualification-type-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-list-qualification-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--must-be-requestable"); 
$flags+=("--no-must-be-requestable"); 
$flags+=("--must-be-owned-by-caller"); 
$flags+=("--no-must-be-owned-by-caller"); 
$flags+=("--types-query"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-list-review-policy-results-for-hit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hit-id"); 
$flags+=("--policy-levels"); 
$flags+=("--retrieve-actions"); 
$flags+=("--no-retrieve-actions"); 
$flags+=("--retrieve-results"); 
$flags+=("--no-retrieve-results"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-list-reviewable-hits {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hit-type-id"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-list-worker-blocks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-list-workers-with-qualification-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--qualification-type-id"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-notify-workers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subject"); 
$flags+=("--message-text"); 
$flags+=("--worker-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-reject-assignment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--assignment-id"); 
$flags+=("--requester-feedback"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-reject-qualification-request {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--qualification-request-id"); 
$flags+=("--reason"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-send-bonus {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--worker-id"); 
$flags+=("--bonus-amount"); 
$flags+=("--assignment-id"); 
$flags+=("--reason"); 
$flags+=("--unique-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-send-test-event-notification {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--notification"); 
$flags+=("--test-event-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-update-expiration-for-hit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hit-id"); 
$flags+=("--expire-at"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-update-hit-review-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hit-id"); 
$flags+=("--revert"); 
$flags+=("--no-revert"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-update-hit-type-of-hit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hit-id"); 
$flags+=("--hit-type-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-update-notification-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hit-type-id"); 
$flags+=("--notification"); 
$flags+=("--active"); 
$flags+=("--no-active"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-mturk-update-qualification-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--qualification-type-id"); 
$flags+=("--description"); 
$flags+=("--qualification-type-status"); 
$flags+=("--test"); 
$flags+=("--answer-key"); 
$flags+=("--test-duration-in-seconds"); 
$flags+=("--retry-delay-in-seconds"); 
$flags+=("--auto-granted"); 
$flags+=("--no-auto-granted"); 
$flags+=("--auto-granted-value"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-role-to-db-cluster"); 
$commands+=("add-source-identifier-to-subscription"); 
$commands+=("add-tags-to-resource"); 
$commands+=("apply-pending-maintenance-action"); 
$commands+=("copy-db-cluster-parameter-group"); 
$commands+=("copy-db-cluster-snapshot"); 
$commands+=("copy-db-parameter-group"); 
$commands+=("create-db-cluster"); 
$commands+=("create-db-cluster-parameter-group"); 
$commands+=("create-db-cluster-snapshot"); 
$commands+=("create-db-instance"); 
$commands+=("create-db-parameter-group"); 
$commands+=("create-db-subnet-group"); 
$commands+=("create-event-subscription"); 
$commands+=("delete-db-cluster"); 
$commands+=("delete-db-cluster-parameter-group"); 
$commands+=("delete-db-cluster-snapshot"); 
$commands+=("delete-db-instance"); 
$commands+=("delete-db-parameter-group"); 
$commands+=("delete-db-subnet-group"); 
$commands+=("delete-event-subscription"); 
$commands+=("describe-db-cluster-parameter-groups"); 
$commands+=("describe-db-cluster-parameters"); 
$commands+=("describe-db-cluster-snapshot-attributes"); 
$commands+=("describe-db-cluster-snapshots"); 
$commands+=("describe-db-clusters"); 
$commands+=("describe-db-engine-versions"); 
$commands+=("describe-db-instances"); 
$commands+=("describe-db-parameter-groups"); 
$commands+=("describe-db-parameters"); 
$commands+=("describe-db-subnet-groups"); 
$commands+=("describe-engine-default-cluster-parameters"); 
$commands+=("describe-engine-default-parameters"); 
$commands+=("describe-event-categories"); 
$commands+=("describe-event-subscriptions"); 
$commands+=("describe-events"); 
$commands+=("describe-orderable-db-instance-options"); 
$commands+=("describe-pending-maintenance-actions"); 
$commands+=("describe-valid-db-instance-modifications"); 
$commands+=("failover-db-cluster"); 
$commands+=("list-tags-for-resource"); 
$commands+=("modify-db-cluster"); 
$commands+=("modify-db-cluster-parameter-group"); 
$commands+=("modify-db-cluster-snapshot-attribute"); 
$commands+=("modify-db-instance"); 
$commands+=("modify-db-parameter-group"); 
$commands+=("modify-db-subnet-group"); 
$commands+=("modify-event-subscription"); 
$commands+=("promote-read-replica-db-cluster"); 
$commands+=("reboot-db-instance"); 
$commands+=("remove-role-from-db-cluster"); 
$commands+=("remove-source-identifier-from-subscription"); 
$commands+=("remove-tags-from-resource"); 
$commands+=("reset-db-cluster-parameter-group"); 
$commands+=("reset-db-parameter-group"); 
$commands+=("restore-db-cluster-from-snapshot"); 
$commands+=("restore-db-cluster-to-point-in-time"); 
$commands+=("start-db-cluster"); 
$commands+=("stop-db-cluster"); 
$commands+=("wait");

return $commands;
}

 function Get-neptune-add-role-to-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--role-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-add-source-identifier-to-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-name"); 
$flags+=("--source-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-add-tags-to-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-apply-pending-maintenance-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-identifier"); 
$flags+=("--apply-action"); 
$flags+=("--opt-in-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-copy-db-cluster-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-db-cluster-parameter-group-identifier"); 
$flags+=("--target-db-cluster-parameter-group-identifier"); 
$flags+=("--target-db-cluster-parameter-group-description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-copy-db-cluster-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-db-cluster-snapshot-identifier"); 
$flags+=("--target-db-cluster-snapshot-identifier"); 
$flags+=("--kms-key-id"); 
$flags+=("--pre-signed-url"); 
$flags+=("--copy-tags"); 
$flags+=("--no-copy-tags"); 
$flags+=("--tags"); 
$flags+=("--source-region"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-copy-db-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-db-parameter-group-identifier"); 
$flags+=("--target-db-parameter-group-identifier"); 
$flags+=("--target-db-parameter-group-description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-create-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--availability-zones"); 
$flags+=("--backup-retention-period"); 
$flags+=("--character-set-name"); 
$flags+=("--database-name"); 
$flags+=("--db-cluster-identifier"); 
$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--db-subnet-group-name"); 
$flags+=("--engine"); 
$flags+=("--engine-version"); 
$flags+=("--port"); 
$flags+=("--master-username"); 
$flags+=("--master-user-password"); 
$flags+=("--option-group-name"); 
$flags+=("--preferred-backup-window"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--replication-source-identifier"); 
$flags+=("--tags"); 
$flags+=("--storage-encrypted"); 
$flags+=("--no-storage-encrypted"); 
$flags+=("--kms-key-id"); 
$flags+=("--pre-signed-url"); 
$flags+=("--enable-iam-database-authentication"); 
$flags+=("--no-enable-iam-database-authentication"); 
$flags+=("--enable-cloudwatch-logs-exports"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--source-region"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-create-db-cluster-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--db-parameter-group-family"); 
$flags+=("--description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-create-db-cluster-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-snapshot-identifier"); 
$flags+=("--db-cluster-identifier"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-create-db-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-name"); 
$flags+=("--db-instance-identifier"); 
$flags+=("--allocated-storage"); 
$flags+=("--db-instance-class"); 
$flags+=("--engine"); 
$flags+=("--master-username"); 
$flags+=("--master-user-password"); 
$flags+=("--db-security-groups"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--availability-zone"); 
$flags+=("--db-subnet-group-name"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--db-parameter-group-name"); 
$flags+=("--backup-retention-period"); 
$flags+=("--preferred-backup-window"); 
$flags+=("--port"); 
$flags+=("--multi-az"); 
$flags+=("--no-multi-az"); 
$flags+=("--engine-version"); 
$flags+=("--auto-minor-version-upgrade"); 
$flags+=("--no-auto-minor-version-upgrade"); 
$flags+=("--license-model"); 
$flags+=("--iops"); 
$flags+=("--option-group-name"); 
$flags+=("--character-set-name"); 
$flags+=("--publicly-accessible"); 
$flags+=("--no-publicly-accessible"); 
$flags+=("--tags"); 
$flags+=("--db-cluster-identifier"); 
$flags+=("--storage-type"); 
$flags+=("--tde-credential-arn"); 
$flags+=("--tde-credential-password"); 
$flags+=("--storage-encrypted"); 
$flags+=("--no-storage-encrypted"); 
$flags+=("--kms-key-id"); 
$flags+=("--domain"); 
$flags+=("--copy-tags-to-snapshot"); 
$flags+=("--no-copy-tags-to-snapshot"); 
$flags+=("--monitoring-interval"); 
$flags+=("--monitoring-role-arn"); 
$flags+=("--domain-iam-role-name"); 
$flags+=("--promotion-tier"); 
$flags+=("--timezone"); 
$flags+=("--enable-iam-database-authentication"); 
$flags+=("--no-enable-iam-database-authentication"); 
$flags+=("--enable-performance-insights"); 
$flags+=("--no-enable-performance-insights"); 
$flags+=("--performance-insights-kms-key-id"); 
$flags+=("--enable-cloudwatch-logs-exports"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-create-db-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-parameter-group-name"); 
$flags+=("--db-parameter-group-family"); 
$flags+=("--description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-create-db-subnet-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-subnet-group-name"); 
$flags+=("--db-subnet-group-description"); 
$flags+=("--subnet-ids"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-create-event-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-name"); 
$flags+=("--sns-topic-arn"); 
$flags+=("--source-type"); 
$flags+=("--event-categories"); 
$flags+=("--source-ids"); 
$flags+=("--enabled"); 
$flags+=("--no-enabled"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-delete-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--skip-final-snapshot"); 
$flags+=("--no-skip-final-snapshot"); 
$flags+=("--final-db-snapshot-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-delete-db-cluster-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-delete-db-cluster-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-snapshot-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-delete-db-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--skip-final-snapshot"); 
$flags+=("--no-skip-final-snapshot"); 
$flags+=("--final-db-snapshot-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-delete-db-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-parameter-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-delete-db-subnet-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-subnet-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-delete-event-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-describe-db-cluster-parameter-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-describe-db-cluster-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--source"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-describe-db-cluster-snapshot-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-snapshot-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-describe-db-cluster-snapshots {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--db-cluster-snapshot-identifier"); 
$flags+=("--snapshot-type"); 
$flags+=("--filters"); 
$flags+=("--include-shared"); 
$flags+=("--no-include-shared"); 
$flags+=("--include-public"); 
$flags+=("--no-include-public"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-describe-db-clusters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-describe-db-engine-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--engine"); 
$flags+=("--engine-version"); 
$flags+=("--db-parameter-group-family"); 
$flags+=("--filters"); 
$flags+=("--default-only"); 
$flags+=("--no-default-only"); 
$flags+=("--list-supported-character-sets"); 
$flags+=("--no-list-supported-character-sets"); 
$flags+=("--list-supported-timezones"); 
$flags+=("--no-list-supported-timezones"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-describe-db-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-describe-db-parameter-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-parameter-group-name"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-describe-db-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-parameter-group-name"); 
$flags+=("--source"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-describe-db-subnet-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-subnet-group-name"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-describe-engine-default-cluster-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-parameter-group-family"); 
$flags+=("--filters"); 
$flags+=("--max-records"); 
$flags+=("--marker"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-describe-engine-default-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-parameter-group-family"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-describe-event-categories {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-type"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-describe-event-subscriptions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-name"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-describe-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-identifier"); 
$flags+=("--source-type"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--duration"); 
$flags+=("--event-categories"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-describe-orderable-db-instance-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--engine"); 
$flags+=("--engine-version"); 
$flags+=("--db-instance-class"); 
$flags+=("--license-model"); 
$flags+=("--vpc"); 
$flags+=("--no-vpc"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-describe-pending-maintenance-actions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-identifier"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-describe-valid-db-instance-modifications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-failover-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--target-db-instance-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-modify-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--new-db-cluster-identifier"); 
$flags+=("--apply-immediately"); 
$flags+=("--no-apply-immediately"); 
$flags+=("--backup-retention-period"); 
$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--port"); 
$flags+=("--master-user-password"); 
$flags+=("--option-group-name"); 
$flags+=("--preferred-backup-window"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--enable-iam-database-authentication"); 
$flags+=("--no-enable-iam-database-authentication"); 
$flags+=("--cloudwatch-logs-export-configuration"); 
$flags+=("--engine-version"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-modify-db-cluster-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-modify-db-cluster-snapshot-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-snapshot-identifier"); 
$flags+=("--attribute-name"); 
$flags+=("--values-to-add"); 
$flags+=("--values-to-remove"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-modify-db-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--allocated-storage"); 
$flags+=("--db-instance-class"); 
$flags+=("--db-subnet-group-name"); 
$flags+=("--db-security-groups"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--apply-immediately"); 
$flags+=("--no-apply-immediately"); 
$flags+=("--master-user-password"); 
$flags+=("--db-parameter-group-name"); 
$flags+=("--backup-retention-period"); 
$flags+=("--preferred-backup-window"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--multi-az"); 
$flags+=("--no-multi-az"); 
$flags+=("--engine-version"); 
$flags+=("--allow-major-version-upgrade"); 
$flags+=("--no-allow-major-version-upgrade"); 
$flags+=("--auto-minor-version-upgrade"); 
$flags+=("--no-auto-minor-version-upgrade"); 
$flags+=("--license-model"); 
$flags+=("--iops"); 
$flags+=("--option-group-name"); 
$flags+=("--new-db-instance-identifier"); 
$flags+=("--storage-type"); 
$flags+=("--tde-credential-arn"); 
$flags+=("--tde-credential-password"); 
$flags+=("--ca-certificate-identifier"); 
$flags+=("--domain"); 
$flags+=("--copy-tags-to-snapshot"); 
$flags+=("--no-copy-tags-to-snapshot"); 
$flags+=("--monitoring-interval"); 
$flags+=("--db-port-number"); 
$flags+=("--publicly-accessible"); 
$flags+=("--no-publicly-accessible"); 
$flags+=("--monitoring-role-arn"); 
$flags+=("--domain-iam-role-name"); 
$flags+=("--promotion-tier"); 
$flags+=("--enable-iam-database-authentication"); 
$flags+=("--no-enable-iam-database-authentication"); 
$flags+=("--enable-performance-insights"); 
$flags+=("--no-enable-performance-insights"); 
$flags+=("--performance-insights-kms-key-id"); 
$flags+=("--cloudwatch-logs-export-configuration"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-modify-db-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-parameter-group-name"); 
$flags+=("--parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-modify-db-subnet-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-subnet-group-name"); 
$flags+=("--db-subnet-group-description"); 
$flags+=("--subnet-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-modify-event-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-name"); 
$flags+=("--sns-topic-arn"); 
$flags+=("--source-type"); 
$flags+=("--event-categories"); 
$flags+=("--enabled"); 
$flags+=("--no-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-promote-read-replica-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-reboot-db-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--force-failover"); 
$flags+=("--no-force-failover"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-remove-role-from-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--role-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-remove-source-identifier-from-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-name"); 
$flags+=("--source-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-remove-tags-from-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-reset-db-cluster-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--reset-all-parameters"); 
$flags+=("--no-reset-all-parameters"); 
$flags+=("--parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-reset-db-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-parameter-group-name"); 
$flags+=("--reset-all-parameters"); 
$flags+=("--no-reset-all-parameters"); 
$flags+=("--parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-restore-db-cluster-from-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--availability-zones"); 
$flags+=("--db-cluster-identifier"); 
$flags+=("--snapshot-identifier"); 
$flags+=("--engine"); 
$flags+=("--engine-version"); 
$flags+=("--port"); 
$flags+=("--db-subnet-group-name"); 
$flags+=("--database-name"); 
$flags+=("--option-group-name"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--tags"); 
$flags+=("--kms-key-id"); 
$flags+=("--enable-iam-database-authentication"); 
$flags+=("--no-enable-iam-database-authentication"); 
$flags+=("--enable-cloudwatch-logs-exports"); 
$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-restore-db-cluster-to-point-in-time {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--restore-type"); 
$flags+=("--source-db-cluster-identifier"); 
$flags+=("--restore-to-time"); 
$flags+=("--use-latest-restorable-time"); 
$flags+=("--no-use-latest-restorable-time"); 
$flags+=("--port"); 
$flags+=("--db-subnet-group-name"); 
$flags+=("--option-group-name"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--tags"); 
$flags+=("--kms-key-id"); 
$flags+=("--enable-iam-database-authentication"); 
$flags+=("--no-enable-iam-database-authentication"); 
$flags+=("--enable-cloudwatch-logs-exports"); 
$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-start-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-stop-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-neptune-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-networkmanager {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-customer-gateway"); 
$commands+=("associate-link"); 
$commands+=("create-device"); 
$commands+=("create-global-network"); 
$commands+=("create-link"); 
$commands+=("create-site"); 
$commands+=("delete-device"); 
$commands+=("delete-global-network"); 
$commands+=("delete-link"); 
$commands+=("delete-site"); 
$commands+=("deregister-transit-gateway"); 
$commands+=("describe-global-networks"); 
$commands+=("disassociate-customer-gateway"); 
$commands+=("disassociate-link"); 
$commands+=("get-customer-gateway-associations"); 
$commands+=("get-devices"); 
$commands+=("get-link-associations"); 
$commands+=("get-links"); 
$commands+=("get-sites"); 
$commands+=("get-transit-gateway-registrations"); 
$commands+=("list-tags-for-resource"); 
$commands+=("register-transit-gateway"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-device"); 
$commands+=("update-global-network"); 
$commands+=("update-link"); 
$commands+=("update-site");

return $commands;
}

 function Get-networkmanager-associate-customer-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--customer-gateway-arn"); 
$flags+=("--global-network-id"); 
$flags+=("--device-id"); 
$flags+=("--link-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-associate-link {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-network-id"); 
$flags+=("--device-id"); 
$flags+=("--link-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-create-device {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-network-id"); 
$flags+=("--description"); 
$flags+=("--type"); 
$flags+=("--vendor"); 
$flags+=("--model"); 
$flags+=("--serial-number"); 
$flags+=("--location"); 
$flags+=("--site-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-create-global-network {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-create-link {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-network-id"); 
$flags+=("--description"); 
$flags+=("--type"); 
$flags+=("--bandwidth"); 
$flags+=("--provider"); 
$flags+=("--site-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-create-site {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-network-id"); 
$flags+=("--description"); 
$flags+=("--location"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-delete-device {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-network-id"); 
$flags+=("--device-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-delete-global-network {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-network-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-delete-link {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-network-id"); 
$flags+=("--link-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-delete-site {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-network-id"); 
$flags+=("--site-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-deregister-transit-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-network-id"); 
$flags+=("--transit-gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-describe-global-networks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-network-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-disassociate-customer-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-network-id"); 
$flags+=("--customer-gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-disassociate-link {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-network-id"); 
$flags+=("--device-id"); 
$flags+=("--link-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-get-customer-gateway-associations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-network-id"); 
$flags+=("--customer-gateway-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-get-devices {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-network-id"); 
$flags+=("--device-ids"); 
$flags+=("--site-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-get-link-associations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-network-id"); 
$flags+=("--device-id"); 
$flags+=("--link-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-get-links {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-network-id"); 
$flags+=("--link-ids"); 
$flags+=("--site-id"); 
$flags+=("--type"); 
$flags+=("--provider"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-get-sites {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-network-id"); 
$flags+=("--site-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-get-transit-gateway-registrations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-network-id"); 
$flags+=("--transit-gateway-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-register-transit-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-network-id"); 
$flags+=("--transit-gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-update-device {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-network-id"); 
$flags+=("--device-id"); 
$flags+=("--description"); 
$flags+=("--type"); 
$flags+=("--vendor"); 
$flags+=("--model"); 
$flags+=("--serial-number"); 
$flags+=("--location"); 
$flags+=("--site-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-update-global-network {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-network-id"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-update-link {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-network-id"); 
$flags+=("--link-id"); 
$flags+=("--description"); 
$flags+=("--type"); 
$flags+=("--bandwidth"); 
$flags+=("--provider"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-networkmanager-update-site {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-network-id"); 
$flags+=("--site-id"); 
$flags+=("--description"); 
$flags+=("--location"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks {
    $commands = [System.Collections.ArrayList]@();

$commands+=("assign-instance"); 
$commands+=("assign-volume"); 
$commands+=("associate-elastic-ip"); 
$commands+=("attach-elastic-load-balancer"); 
$commands+=("clone-stack"); 
$commands+=("create-app"); 
$commands+=("create-deployment"); 
$commands+=("create-instance"); 
$commands+=("create-layer"); 
$commands+=("create-stack"); 
$commands+=("create-user-profile"); 
$commands+=("delete-app"); 
$commands+=("delete-instance"); 
$commands+=("delete-layer"); 
$commands+=("delete-stack"); 
$commands+=("delete-user-profile"); 
$commands+=("deregister-ecs-cluster"); 
$commands+=("deregister-elastic-ip"); 
$commands+=("deregister-instance"); 
$commands+=("deregister-rds-db-instance"); 
$commands+=("deregister-volume"); 
$commands+=("describe-agent-versions"); 
$commands+=("describe-apps"); 
$commands+=("describe-commands"); 
$commands+=("describe-deployments"); 
$commands+=("describe-ecs-clusters"); 
$commands+=("describe-elastic-ips"); 
$commands+=("describe-elastic-load-balancers"); 
$commands+=("describe-instances"); 
$commands+=("describe-layers"); 
$commands+=("describe-load-based-auto-scaling"); 
$commands+=("describe-my-user-profile"); 
$commands+=("describe-operating-systems"); 
$commands+=("describe-permissions"); 
$commands+=("describe-raid-arrays"); 
$commands+=("describe-rds-db-instances"); 
$commands+=("describe-service-errors"); 
$commands+=("describe-stack-provisioning-parameters"); 
$commands+=("describe-stack-summary"); 
$commands+=("describe-stacks"); 
$commands+=("describe-time-based-auto-scaling"); 
$commands+=("describe-user-profiles"); 
$commands+=("describe-volumes"); 
$commands+=("detach-elastic-load-balancer"); 
$commands+=("disassociate-elastic-ip"); 
$commands+=("get-hostname-suggestion"); 
$commands+=("grant-access"); 
$commands+=("list-tags"); 
$commands+=("reboot-instance"); 
$commands+=("register"); 
$commands+=("register-ecs-cluster"); 
$commands+=("register-elastic-ip"); 
$commands+=("register-instance"); 
$commands+=("register-rds-db-instance"); 
$commands+=("register-volume"); 
$commands+=("set-load-based-auto-scaling"); 
$commands+=("set-permission"); 
$commands+=("set-time-based-auto-scaling"); 
$commands+=("start-instance"); 
$commands+=("start-stack"); 
$commands+=("stop-instance"); 
$commands+=("stop-stack"); 
$commands+=("tag-resource"); 
$commands+=("unassign-instance"); 
$commands+=("unassign-volume"); 
$commands+=("untag-resource"); 
$commands+=("update-app"); 
$commands+=("update-elastic-ip"); 
$commands+=("update-instance"); 
$commands+=("update-layer"); 
$commands+=("update-my-user-profile"); 
$commands+=("update-rds-db-instance"); 
$commands+=("update-stack"); 
$commands+=("update-user-profile"); 
$commands+=("update-volume"); 
$commands+=("wait");

return $commands;
}

 function Get-opsworks-assign-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--layer-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-assign-volume {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--volume-id"); 
$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-associate-elastic-ip {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--elastic-ip"); 
$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-attach-elastic-load-balancer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--elastic-load-balancer-name"); 
$flags+=("--layer-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-clone-stack {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-stack-id"); 
$flags+=("--name"); 
$flags+=("--vpc-id"); 
$flags+=("--attributes"); 
$flags+=("--service-role-arn"); 
$flags+=("--default-instance-profile-arn"); 
$flags+=("--default-os"); 
$flags+=("--hostname-theme"); 
$flags+=("--default-availability-zone"); 
$flags+=("--default-subnet-id"); 
$flags+=("--custom-json"); 
$flags+=("--configuration-manager"); 
$flags+=("--chef-configuration"); 
$flags+=("--use-custom-cookbooks"); 
$flags+=("--no-use-custom-cookbooks"); 
$flags+=("--use-opsworks-security-groups"); 
$flags+=("--no-use-opsworks-security-groups"); 
$flags+=("--custom-cookbooks-source"); 
$flags+=("--default-ssh-key-name"); 
$flags+=("--clone-permissions"); 
$flags+=("--no-clone-permissions"); 
$flags+=("--clone-app-ids"); 
$flags+=("--default-root-device-type"); 
$flags+=("--agent-version"); 
$flags+=("--stack-region"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-create-app {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-id"); 
$flags+=("--shortname"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--data-sources"); 
$flags+=("--type"); 
$flags+=("--app-source"); 
$flags+=("--domains"); 
$flags+=("--enable-ssl"); 
$flags+=("--no-enable-ssl"); 
$flags+=("--ssl-configuration"); 
$flags+=("--attributes"); 
$flags+=("--environment"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-create-deployment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-id"); 
$flags+=("--app-id"); 
$flags+=("--instance-ids"); 
$flags+=("--layer-ids"); 
$flags+=("--command"); 
$flags+=("--comment"); 
$flags+=("--custom-json"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-create-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-id"); 
$flags+=("--layer-ids"); 
$flags+=("--instance-type"); 
$flags+=("--auto-scaling-type"); 
$flags+=("--hostname"); 
$flags+=("--os"); 
$flags+=("--ami-id"); 
$flags+=("--ssh-key-name"); 
$flags+=("--availability-zone"); 
$flags+=("--virtualization-type"); 
$flags+=("--subnet-id"); 
$flags+=("--architecture"); 
$flags+=("--root-device-type"); 
$flags+=("--block-device-mappings"); 
$flags+=("--install-updates-on-boot"); 
$flags+=("--no-install-updates-on-boot"); 
$flags+=("--ebs-optimized"); 
$flags+=("--no-ebs-optimized"); 
$flags+=("--agent-version"); 
$flags+=("--tenancy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-create-layer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-id"); 
$flags+=("--type"); 
$flags+=("--name"); 
$flags+=("--shortname"); 
$flags+=("--attributes"); 
$flags+=("--cloud-watch-logs-configuration"); 
$flags+=("--custom-instance-profile-arn"); 
$flags+=("--custom-json"); 
$flags+=("--custom-security-group-ids"); 
$flags+=("--packages"); 
$flags+=("--volume-configurations"); 
$flags+=("--enable-auto-healing"); 
$flags+=("--no-enable-auto-healing"); 
$flags+=("--auto-assign-elastic-ips"); 
$flags+=("--no-auto-assign-elastic-ips"); 
$flags+=("--auto-assign-public-ips"); 
$flags+=("--no-auto-assign-public-ips"); 
$flags+=("--custom-recipes"); 
$flags+=("--install-updates-on-boot"); 
$flags+=("--no-install-updates-on-boot"); 
$flags+=("--use-ebs-optimized-instances"); 
$flags+=("--no-use-ebs-optimized-instances"); 
$flags+=("--lifecycle-event-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-create-stack {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--vpc-id"); 
$flags+=("--attributes"); 
$flags+=("--service-role-arn"); 
$flags+=("--default-instance-profile-arn"); 
$flags+=("--default-os"); 
$flags+=("--hostname-theme"); 
$flags+=("--default-availability-zone"); 
$flags+=("--default-subnet-id"); 
$flags+=("--custom-json"); 
$flags+=("--configuration-manager"); 
$flags+=("--chef-configuration"); 
$flags+=("--use-custom-cookbooks"); 
$flags+=("--no-use-custom-cookbooks"); 
$flags+=("--use-opsworks-security-groups"); 
$flags+=("--no-use-opsworks-security-groups"); 
$flags+=("--custom-cookbooks-source"); 
$flags+=("--default-ssh-key-name"); 
$flags+=("--default-root-device-type"); 
$flags+=("--agent-version"); 
$flags+=("--stack-region"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-create-user-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--iam-user-arn"); 
$flags+=("--ssh-username"); 
$flags+=("--ssh-public-key"); 
$flags+=("--allow-self-management"); 
$flags+=("--no-allow-self-management"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-delete-app {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-delete-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--delete-elastic-ip"); 
$flags+=("--no-delete-elastic-ip"); 
$flags+=("--delete-volumes"); 
$flags+=("--no-delete-volumes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-delete-layer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--layer-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-delete-stack {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-delete-user-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--iam-user-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-deregister-ecs-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ecs-cluster-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-deregister-elastic-ip {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--elastic-ip"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-deregister-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-deregister-rds-db-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rds-db-instance-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-deregister-volume {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--volume-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-describe-agent-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-id"); 
$flags+=("--configuration-manager"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-describe-apps {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-id"); 
$flags+=("--app-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-describe-commands {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--deployment-id"); 
$flags+=("--instance-id"); 
$flags+=("--command-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-describe-deployments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-id"); 
$flags+=("--app-id"); 
$flags+=("--deployment-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-describe-ecs-clusters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ecs-cluster-arns"); 
$flags+=("--stack-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-describe-elastic-ips {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--stack-id"); 
$flags+=("--ips"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-describe-elastic-load-balancers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-id"); 
$flags+=("--layer-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-describe-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-id"); 
$flags+=("--layer-id"); 
$flags+=("--instance-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-describe-layers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-id"); 
$flags+=("--layer-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-describe-load-based-auto-scaling {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--layer-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-describe-my-user-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-describe-operating-systems {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-describe-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-describe-raid-arrays {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--stack-id"); 
$flags+=("--raid-array-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-describe-rds-db-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-id"); 
$flags+=("--rds-db-instance-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-describe-service-errors {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-id"); 
$flags+=("--instance-id"); 
$flags+=("--service-error-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-describe-stack-provisioning-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-describe-stack-summary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-describe-stacks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-describe-time-based-auto-scaling {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-describe-user-profiles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--iam-user-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-describe-volumes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--stack-id"); 
$flags+=("--raid-array-id"); 
$flags+=("--volume-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-detach-elastic-load-balancer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--elastic-load-balancer-name"); 
$flags+=("--layer-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-disassociate-elastic-ip {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--elastic-ip"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-get-hostname-suggestion {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--layer-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-grant-access {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--valid-for-in-minutes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-list-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-reboot-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-register {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-id"); 
$flags+=("--infrastructure-class"); 
$flags+=("--override-hostname"); 
$flags+=("--override-private-ip"); 
$flags+=("--override-public-ip"); 
$flags+=("--override-ssh"); 
$flags+=("--ssh-username"); 
$flags+=("--ssh-private-key"); 
$flags+=("--local"); 
$flags+=("--use-instance-profile");

return $flags;
}

 function Get-opsworks-register-ecs-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ecs-cluster-arn"); 
$flags+=("--stack-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-register-elastic-ip {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--elastic-ip"); 
$flags+=("--stack-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-register-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-id"); 
$flags+=("--hostname"); 
$flags+=("--public-ip"); 
$flags+=("--private-ip"); 
$flags+=("--rsa-public-key"); 
$flags+=("--rsa-public-key-fingerprint"); 
$flags+=("--instance-identity"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-register-rds-db-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-id"); 
$flags+=("--rds-db-instance-arn"); 
$flags+=("--db-user"); 
$flags+=("--db-password"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-register-volume {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ec"); 
$flags+=("--stack-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-set-load-based-auto-scaling {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--layer-id"); 
$flags+=("--enable"); 
$flags+=("--no-enable"); 
$flags+=("--up-scaling"); 
$flags+=("--down-scaling"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-set-permission {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-id"); 
$flags+=("--iam-user-arn"); 
$flags+=("--allow-ssh"); 
$flags+=("--no-allow-ssh"); 
$flags+=("--allow-sudo"); 
$flags+=("--no-allow-sudo"); 
$flags+=("--level"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-set-time-based-auto-scaling {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--auto-scaling-schedule"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-start-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-start-stack {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-stop-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-stop-stack {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-unassign-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-unassign-volume {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--volume-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-update-app {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--data-sources"); 
$flags+=("--type"); 
$flags+=("--app-source"); 
$flags+=("--domains"); 
$flags+=("--enable-ssl"); 
$flags+=("--no-enable-ssl"); 
$flags+=("--ssl-configuration"); 
$flags+=("--attributes"); 
$flags+=("--environment"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-update-elastic-ip {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--elastic-ip"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-update-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--layer-ids"); 
$flags+=("--instance-type"); 
$flags+=("--auto-scaling-type"); 
$flags+=("--hostname"); 
$flags+=("--os"); 
$flags+=("--ami-id"); 
$flags+=("--ssh-key-name"); 
$flags+=("--architecture"); 
$flags+=("--install-updates-on-boot"); 
$flags+=("--no-install-updates-on-boot"); 
$flags+=("--ebs-optimized"); 
$flags+=("--no-ebs-optimized"); 
$flags+=("--agent-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-update-layer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--layer-id"); 
$flags+=("--name"); 
$flags+=("--shortname"); 
$flags+=("--attributes"); 
$flags+=("--cloud-watch-logs-configuration"); 
$flags+=("--custom-instance-profile-arn"); 
$flags+=("--custom-json"); 
$flags+=("--custom-security-group-ids"); 
$flags+=("--packages"); 
$flags+=("--volume-configurations"); 
$flags+=("--enable-auto-healing"); 
$flags+=("--no-enable-auto-healing"); 
$flags+=("--auto-assign-elastic-ips"); 
$flags+=("--no-auto-assign-elastic-ips"); 
$flags+=("--auto-assign-public-ips"); 
$flags+=("--no-auto-assign-public-ips"); 
$flags+=("--custom-recipes"); 
$flags+=("--install-updates-on-boot"); 
$flags+=("--no-install-updates-on-boot"); 
$flags+=("--use-ebs-optimized-instances"); 
$flags+=("--no-use-ebs-optimized-instances"); 
$flags+=("--lifecycle-event-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-update-my-user-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ssh-public-key"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-update-rds-db-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rds-db-instance-arn"); 
$flags+=("--db-user"); 
$flags+=("--db-password"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-update-stack {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stack-id"); 
$flags+=("--name"); 
$flags+=("--attributes"); 
$flags+=("--service-role-arn"); 
$flags+=("--default-instance-profile-arn"); 
$flags+=("--default-os"); 
$flags+=("--hostname-theme"); 
$flags+=("--default-availability-zone"); 
$flags+=("--default-subnet-id"); 
$flags+=("--custom-json"); 
$flags+=("--configuration-manager"); 
$flags+=("--chef-configuration"); 
$flags+=("--use-custom-cookbooks"); 
$flags+=("--no-use-custom-cookbooks"); 
$flags+=("--custom-cookbooks-source"); 
$flags+=("--default-ssh-key-name"); 
$flags+=("--default-root-device-type"); 
$flags+=("--use-opsworks-security-groups"); 
$flags+=("--no-use-opsworks-security-groups"); 
$flags+=("--agent-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-update-user-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--iam-user-arn"); 
$flags+=("--ssh-username"); 
$flags+=("--ssh-public-key"); 
$flags+=("--allow-self-management"); 
$flags+=("--no-allow-self-management"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-update-volume {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--volume-id"); 
$flags+=("--name"); 
$flags+=("--mount-point"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-opsworks-cm {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-node"); 
$commands+=("create-backup"); 
$commands+=("create-server"); 
$commands+=("delete-backup"); 
$commands+=("delete-server"); 
$commands+=("describe-account-attributes"); 
$commands+=("describe-backups"); 
$commands+=("describe-events"); 
$commands+=("describe-node-association-status"); 
$commands+=("describe-servers"); 
$commands+=("disassociate-node"); 
$commands+=("export-server-engine-attribute"); 
$commands+=("list-tags-for-resource"); 
$commands+=("restore-server"); 
$commands+=("start-maintenance"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-server"); 
$commands+=("update-server-engine-attributes"); 
$commands+=("wait");

return $commands;
}

 function Get-opsworks-cm-associate-node {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--server-name"); 
$flags+=("--node-name"); 
$flags+=("--engine-attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-cm-create-backup {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--server-name"); 
$flags+=("--description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-cm-create-server {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--associate-public-ip-address"); 
$flags+=("--no-associate-public-ip-address"); 
$flags+=("--custom-domain"); 
$flags+=("--custom-certificate"); 
$flags+=("--custom-private-key"); 
$flags+=("--disable-automated-backup"); 
$flags+=("--no-disable-automated-backup"); 
$flags+=("--engine"); 
$flags+=("--engine-model"); 
$flags+=("--engine-version"); 
$flags+=("--engine-attributes"); 
$flags+=("--backup-retention-count"); 
$flags+=("--server-name"); 
$flags+=("--instance-profile-arn"); 
$flags+=("--instance-type"); 
$flags+=("--key-pair"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--preferred-backup-window"); 
$flags+=("--security-group-ids"); 
$flags+=("--service-role-arn"); 
$flags+=("--subnet-ids"); 
$flags+=("--tags"); 
$flags+=("--backup-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-cm-delete-backup {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-cm-delete-server {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--server-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-cm-describe-account-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-cm-describe-backups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-id"); 
$flags+=("--server-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-cm-describe-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--server-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-cm-describe-node-association-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--node-association-status-token"); 
$flags+=("--server-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-cm-describe-servers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--server-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-cm-disassociate-node {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--server-name"); 
$flags+=("--node-name"); 
$flags+=("--engine-attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-cm-export-server-engine-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--export-attribute-name"); 
$flags+=("--server-name"); 
$flags+=("--input-attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-cm-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-cm-restore-server {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--backup-id"); 
$flags+=("--server-name"); 
$flags+=("--instance-type"); 
$flags+=("--key-pair"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-cm-start-maintenance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--server-name"); 
$flags+=("--engine-attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-cm-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-cm-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-cm-update-server {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--disable-automated-backup"); 
$flags+=("--no-disable-automated-backup"); 
$flags+=("--backup-retention-count"); 
$flags+=("--server-name"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--preferred-backup-window"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-cm-update-server-engine-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--server-name"); 
$flags+=("--attribute-name"); 
$flags+=("--attribute-value"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-opsworks-cm-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-organizations {
    $commands = [System.Collections.ArrayList]@();

$commands+=("accept-handshake"); 
$commands+=("attach-policy"); 
$commands+=("cancel-handshake"); 
$commands+=("create-account"); 
$commands+=("create-gov-cloud-account"); 
$commands+=("create-organization"); 
$commands+=("create-organizational-unit"); 
$commands+=("create-policy"); 
$commands+=("decline-handshake"); 
$commands+=("delete-organization"); 
$commands+=("delete-organizational-unit"); 
$commands+=("delete-policy"); 
$commands+=("deregister-delegated-administrator"); 
$commands+=("describe-account"); 
$commands+=("describe-create-account-status"); 
$commands+=("describe-effective-policy"); 
$commands+=("describe-handshake"); 
$commands+=("describe-organization"); 
$commands+=("describe-organizational-unit"); 
$commands+=("describe-policy"); 
$commands+=("detach-policy"); 
$commands+=("disable-aws-service-access"); 
$commands+=("disable-policy-type"); 
$commands+=("enable-all-features"); 
$commands+=("enable-aws-service-access"); 
$commands+=("enable-policy-type"); 
$commands+=("invite-account-to-organization"); 
$commands+=("leave-organization"); 
$commands+=("list-accounts"); 
$commands+=("list-accounts-for-parent"); 
$commands+=("list-aws-service-access-for-organization"); 
$commands+=("list-children"); 
$commands+=("list-create-account-status"); 
$commands+=("list-delegated-administrators"); 
$commands+=("list-delegated-services-for-account"); 
$commands+=("list-handshakes-for-account"); 
$commands+=("list-handshakes-for-organization"); 
$commands+=("list-organizational-units-for-parent"); 
$commands+=("list-parents"); 
$commands+=("list-policies"); 
$commands+=("list-policies-for-target"); 
$commands+=("list-roots"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-targets-for-policy"); 
$commands+=("move-account"); 
$commands+=("register-delegated-administrator"); 
$commands+=("remove-account-from-organization"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-organizational-unit"); 
$commands+=("update-policy");

return $commands;
}

 function Get-organizations-accept-handshake {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--handshake-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-attach-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-id"); 
$flags+=("--target-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-cancel-handshake {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--handshake-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-create-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--email"); 
$flags+=("--account-name"); 
$flags+=("--role-name"); 
$flags+=("--iam-user-access-to-billing"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-create-gov-cloud-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--email"); 
$flags+=("--account-name"); 
$flags+=("--role-name"); 
$flags+=("--iam-user-access-to-billing"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-create-organization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--feature-set"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-create-organizational-unit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--parent-id"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-create-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--content"); 
$flags+=("--description"); 
$flags+=("--name"); 
$flags+=("--type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-decline-handshake {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--handshake-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-delete-organization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-delete-organizational-unit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organizational-unit-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-delete-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-deregister-delegated-administrator {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--service-principal"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-describe-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-describe-create-account-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--create-account-request-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-describe-effective-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-type"); 
$flags+=("--target-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-describe-handshake {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--handshake-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-describe-organization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-describe-organizational-unit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organizational-unit-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-describe-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-detach-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-id"); 
$flags+=("--target-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-disable-aws-service-access {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-principal"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-disable-policy-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--root-id"); 
$flags+=("--policy-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-enable-all-features {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-enable-aws-service-access {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-principal"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-enable-policy-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--root-id"); 
$flags+=("--policy-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-invite-account-to-organization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--target"); 
$flags+=("--notes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-leave-organization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-list-accounts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-list-accounts-for-parent {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--parent-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-list-aws-service-access-for-organization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-list-children {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--parent-id"); 
$flags+=("--child-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-list-create-account-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--states"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-list-delegated-administrators {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-principal"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-list-delegated-services-for-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-list-handshakes-for-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-list-handshakes-for-organization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-list-organizational-units-for-parent {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--parent-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-list-parents {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--child-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-list-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-list-policies-for-target {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--target-id"); 
$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-list-roots {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-list-targets-for-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-move-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--source-parent-id"); 
$flags+=("--destination-parent-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-register-delegated-administrator {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--service-principal"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-remove-account-from-organization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-update-organizational-unit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organizational-unit-id"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-organizations-update-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy-id"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--content"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-outposts {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-outpost"); 
$commands+=("delete-outpost"); 
$commands+=("delete-site"); 
$commands+=("get-outpost"); 
$commands+=("get-outpost-instance-types"); 
$commands+=("list-outposts"); 
$commands+=("list-sites");

return $commands;
}

 function Get-outposts-create-outpost {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--site-id"); 
$flags+=("--availability-zone"); 
$flags+=("--availability-zone-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-outposts-delete-outpost {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--outpost-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-outposts-delete-site {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--site-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-outposts-get-outpost {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--outpost-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-outposts-get-outpost-instance-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--outpost-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-outposts-list-outposts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-outposts-list-sites {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-batch-inference-job"); 
$commands+=("create-campaign"); 
$commands+=("create-dataset"); 
$commands+=("create-dataset-group"); 
$commands+=("create-dataset-import-job"); 
$commands+=("create-event-tracker"); 
$commands+=("create-schema"); 
$commands+=("create-solution"); 
$commands+=("create-solution-version"); 
$commands+=("delete-campaign"); 
$commands+=("delete-dataset"); 
$commands+=("delete-dataset-group"); 
$commands+=("delete-event-tracker"); 
$commands+=("delete-schema"); 
$commands+=("delete-solution"); 
$commands+=("describe-algorithm"); 
$commands+=("describe-batch-inference-job"); 
$commands+=("describe-campaign"); 
$commands+=("describe-dataset"); 
$commands+=("describe-dataset-group"); 
$commands+=("describe-dataset-import-job"); 
$commands+=("describe-event-tracker"); 
$commands+=("describe-feature-transformation"); 
$commands+=("describe-recipe"); 
$commands+=("describe-schema"); 
$commands+=("describe-solution"); 
$commands+=("describe-solution-version"); 
$commands+=("get-solution-metrics"); 
$commands+=("list-batch-inference-jobs"); 
$commands+=("list-campaigns"); 
$commands+=("list-dataset-groups"); 
$commands+=("list-dataset-import-jobs"); 
$commands+=("list-datasets"); 
$commands+=("list-event-trackers"); 
$commands+=("list-recipes"); 
$commands+=("list-schemas"); 
$commands+=("list-solution-versions"); 
$commands+=("list-solutions"); 
$commands+=("update-campaign");

return $commands;
}

 function Get-personalize-create-batch-inference-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-name"); 
$flags+=("--solution-version-arn"); 
$flags+=("--num-results"); 
$flags+=("--job-input"); 
$flags+=("--job-output"); 
$flags+=("--role-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-create-campaign {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--solution-version-arn"); 
$flags+=("--min-provisioned-tps"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-create-dataset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--schema-arn"); 
$flags+=("--dataset-group-arn"); 
$flags+=("--dataset-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-create-dataset-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--role-arn"); 
$flags+=("--kms-key-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-create-dataset-import-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-name"); 
$flags+=("--dataset-arn"); 
$flags+=("--data-source"); 
$flags+=("--role-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-create-event-tracker {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--dataset-group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-create-schema {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--schema"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-create-solution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--perform-hpo"); 
$flags+=("--no-perform-hpo"); 
$flags+=("--perform-auto-ml"); 
$flags+=("--no-perform-auto-ml"); 
$flags+=("--recipe-arn"); 
$flags+=("--dataset-group-arn"); 
$flags+=("--event-type"); 
$flags+=("--solution-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-create-solution-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--solution-arn"); 
$flags+=("--training-mode"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-delete-campaign {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--campaign-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-delete-dataset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-delete-dataset-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-delete-event-tracker {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--event-tracker-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-delete-schema {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schema-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-delete-solution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--solution-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-describe-algorithm {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--algorithm-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-describe-batch-inference-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--batch-inference-job-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-describe-campaign {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--campaign-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-describe-dataset {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-describe-dataset-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-describe-dataset-import-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-import-job-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-describe-event-tracker {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--event-tracker-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-describe-feature-transformation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--feature-transformation-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-describe-recipe {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--recipe-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-describe-schema {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schema-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-describe-solution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--solution-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-describe-solution-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--solution-version-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-get-solution-metrics {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--solution-version-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-list-batch-inference-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--solution-version-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-list-campaigns {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--solution-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-list-dataset-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-list-dataset-import-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-list-datasets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-list-event-trackers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-list-recipes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--recipe-provider"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-list-schemas {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-list-solution-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--solution-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-list-solutions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dataset-group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-update-campaign {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--campaign-arn"); 
$flags+=("--solution-version-arn"); 
$flags+=("--min-provisioned-tps"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-events {
    $commands = [System.Collections.ArrayList]@();

$commands+=("put-events");

return $commands;
}

 function Get-personalize-events-put-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--tracking-id"); 
$flags+=("--user-id"); 
$flags+=("--session-id"); 
$flags+=("--event-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-runtime {
    $commands = [System.Collections.ArrayList]@();

$commands+=("get-personalized-ranking"); 
$commands+=("get-recommendations");

return $commands;
}

 function Get-personalize-runtime-get-personalized-ranking {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--campaign-arn"); 
$flags+=("--input-list"); 
$flags+=("--user-id"); 
$flags+=("--context"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-personalize-runtime-get-recommendations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--campaign-arn"); 
$flags+=("--item-id"); 
$flags+=("--user-id"); 
$flags+=("--num-results"); 
$flags+=("--context"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pi {
    $commands = [System.Collections.ArrayList]@();

$commands+=("describe-dimension-keys"); 
$commands+=("get-resource-metrics");

return $commands;
}

 function Get-pi-describe-dimension-keys {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-type"); 
$flags+=("--identifier"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--metric"); 
$flags+=("--period-in-seconds"); 
$flags+=("--group-by"); 
$flags+=("--partition-by"); 
$flags+=("--filter"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pi-get-resource-metrics {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-type"); 
$flags+=("--identifier"); 
$flags+=("--metric-queries"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--period-in-seconds"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-app"); 
$commands+=("create-campaign"); 
$commands+=("create-email-template"); 
$commands+=("create-export-job"); 
$commands+=("create-import-job"); 
$commands+=("create-journey"); 
$commands+=("create-push-template"); 
$commands+=("create-recommender-configuration"); 
$commands+=("create-segment"); 
$commands+=("create-sms-template"); 
$commands+=("create-voice-template"); 
$commands+=("delete-adm-channel"); 
$commands+=("delete-apns-channel"); 
$commands+=("delete-apns-sandbox-channel"); 
$commands+=("delete-apns-voip-channel"); 
$commands+=("delete-apns-voip-sandbox-channel"); 
$commands+=("delete-app"); 
$commands+=("delete-baidu-channel"); 
$commands+=("delete-campaign"); 
$commands+=("delete-email-channel"); 
$commands+=("delete-email-template"); 
$commands+=("delete-endpoint"); 
$commands+=("delete-event-stream"); 
$commands+=("delete-gcm-channel"); 
$commands+=("delete-journey"); 
$commands+=("delete-push-template"); 
$commands+=("delete-recommender-configuration"); 
$commands+=("delete-segment"); 
$commands+=("delete-sms-channel"); 
$commands+=("delete-sms-template"); 
$commands+=("delete-user-endpoints"); 
$commands+=("delete-voice-channel"); 
$commands+=("delete-voice-template"); 
$commands+=("get-adm-channel"); 
$commands+=("get-apns-channel"); 
$commands+=("get-apns-sandbox-channel"); 
$commands+=("get-apns-voip-channel"); 
$commands+=("get-apns-voip-sandbox-channel"); 
$commands+=("get-app"); 
$commands+=("get-application-date-range-kpi"); 
$commands+=("get-application-settings"); 
$commands+=("get-apps"); 
$commands+=("get-baidu-channel"); 
$commands+=("get-campaign"); 
$commands+=("get-campaign-activities"); 
$commands+=("get-campaign-date-range-kpi"); 
$commands+=("get-campaign-version"); 
$commands+=("get-campaign-versions"); 
$commands+=("get-campaigns"); 
$commands+=("get-channels"); 
$commands+=("get-email-channel"); 
$commands+=("get-email-template"); 
$commands+=("get-endpoint"); 
$commands+=("get-event-stream"); 
$commands+=("get-export-job"); 
$commands+=("get-export-jobs"); 
$commands+=("get-gcm-channel"); 
$commands+=("get-import-job"); 
$commands+=("get-import-jobs"); 
$commands+=("get-journey"); 
$commands+=("get-journey-date-range-kpi"); 
$commands+=("get-journey-execution-activity-metrics"); 
$commands+=("get-journey-execution-metrics"); 
$commands+=("get-push-template"); 
$commands+=("get-recommender-configuration"); 
$commands+=("get-recommender-configurations"); 
$commands+=("get-segment"); 
$commands+=("get-segment-export-jobs"); 
$commands+=("get-segment-import-jobs"); 
$commands+=("get-segment-version"); 
$commands+=("get-segment-versions"); 
$commands+=("get-segments"); 
$commands+=("get-sms-channel"); 
$commands+=("get-sms-template"); 
$commands+=("get-user-endpoints"); 
$commands+=("get-voice-channel"); 
$commands+=("get-voice-template"); 
$commands+=("list-journeys"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-template-versions"); 
$commands+=("list-templates"); 
$commands+=("phone-number-validate"); 
$commands+=("put-event-stream"); 
$commands+=("put-events"); 
$commands+=("remove-attributes"); 
$commands+=("send-messages"); 
$commands+=("send-users-messages"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-adm-channel"); 
$commands+=("update-apns-channel"); 
$commands+=("update-apns-sandbox-channel"); 
$commands+=("update-apns-voip-channel"); 
$commands+=("update-apns-voip-sandbox-channel"); 
$commands+=("update-application-settings"); 
$commands+=("update-baidu-channel"); 
$commands+=("update-campaign"); 
$commands+=("update-email-channel"); 
$commands+=("update-email-template"); 
$commands+=("update-endpoint"); 
$commands+=("update-endpoints-batch"); 
$commands+=("update-gcm-channel"); 
$commands+=("update-journey"); 
$commands+=("update-journey-state"); 
$commands+=("update-push-template"); 
$commands+=("update-recommender-configuration"); 
$commands+=("update-segment"); 
$commands+=("update-sms-channel"); 
$commands+=("update-sms-template"); 
$commands+=("update-template-active-version"); 
$commands+=("update-voice-channel"); 
$commands+=("update-voice-template");

return $commands;
}

 function Get-pinpoint-create-app {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--create-application-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-create-campaign {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--write-campaign-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-create-email-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--email-template-request"); 
$flags+=("--template-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-create-export-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--export-job-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-create-import-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--import-job-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-create-journey {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--write-journey-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-create-push-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--push-notification-template-request"); 
$flags+=("--template-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-create-recommender-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--create-recommender-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-create-segment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--write-segment-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-create-sms-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sms-template-request"); 
$flags+=("--template-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-create-voice-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--voice-template-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-delete-adm-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-delete-apns-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-delete-apns-sandbox-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-delete-apns-voip-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-delete-apns-voip-sandbox-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-delete-app {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-delete-baidu-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-delete-campaign {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--campaign-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-delete-email-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-delete-email-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--template-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-delete-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--endpoint-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-delete-event-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-delete-gcm-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-delete-journey {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--journey-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-delete-push-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--template-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-delete-recommender-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--recommender-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-delete-segment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--segment-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-delete-sms-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-delete-sms-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--template-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-delete-user-endpoints {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--user-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-delete-voice-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-delete-voice-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--template-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-adm-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-apns-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-apns-sandbox-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-apns-voip-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-apns-voip-sandbox-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-app {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-application-date-range-kpi {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--end-time"); 
$flags+=("--kpi-name"); 
$flags+=("--next-token"); 
$flags+=("--page-size"); 
$flags+=("--start-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-application-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-apps {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--page-size"); 
$flags+=("--token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-baidu-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-campaign {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--campaign-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-campaign-activities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--campaign-id"); 
$flags+=("--page-size"); 
$flags+=("--token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-campaign-date-range-kpi {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--campaign-id"); 
$flags+=("--end-time"); 
$flags+=("--kpi-name"); 
$flags+=("--next-token"); 
$flags+=("--page-size"); 
$flags+=("--start-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-campaign-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--campaign-id"); 
$flags+=("--campaign-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-campaign-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--campaign-id"); 
$flags+=("--page-size"); 
$flags+=("--token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-campaigns {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--page-size"); 
$flags+=("--token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-channels {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-email-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-email-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--template-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--endpoint-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-event-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-export-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-export-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--page-size"); 
$flags+=("--token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-gcm-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-import-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-import-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--page-size"); 
$flags+=("--token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-journey {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--journey-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-journey-date-range-kpi {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--end-time"); 
$flags+=("--journey-id"); 
$flags+=("--kpi-name"); 
$flags+=("--next-token"); 
$flags+=("--page-size"); 
$flags+=("--start-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-journey-execution-activity-metrics {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--journey-activity-id"); 
$flags+=("--journey-id"); 
$flags+=("--next-token"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-journey-execution-metrics {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--journey-id"); 
$flags+=("--next-token"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-push-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--template-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-recommender-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--recommender-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-recommender-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--page-size"); 
$flags+=("--token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-segment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--segment-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-segment-export-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--page-size"); 
$flags+=("--segment-id"); 
$flags+=("--token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-segment-import-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--page-size"); 
$flags+=("--segment-id"); 
$flags+=("--token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-segment-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--segment-id"); 
$flags+=("--segment-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-segment-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--page-size"); 
$flags+=("--segment-id"); 
$flags+=("--token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-segments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--page-size"); 
$flags+=("--token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-sms-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-sms-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--template-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-user-endpoints {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--user-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-voice-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-get-voice-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--template-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-list-journeys {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--page-size"); 
$flags+=("--token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-list-template-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--page-size"); 
$flags+=("--template-name"); 
$flags+=("--template-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-list-templates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--page-size"); 
$flags+=("--prefix"); 
$flags+=("--template-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-phone-number-validate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--number-validate-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-put-event-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--write-event-stream"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-put-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--events-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-remove-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--attribute-type"); 
$flags+=("--update-attributes-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-send-messages {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--message-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-send-users-messages {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--send-users-message-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags-model"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-update-adm-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--adm-channel-request"); 
$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-update-apns-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--apns-channel-request"); 
$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-update-apns-sandbox-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--apns-sandbox-channel-request"); 
$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-update-apns-voip-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--apns-voip-channel-request"); 
$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-update-apns-voip-sandbox-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--apns-voip-sandbox-channel-request"); 
$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-update-application-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--write-application-settings-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-update-baidu-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--baidu-channel-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-update-campaign {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--campaign-id"); 
$flags+=("--write-campaign-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-update-email-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--email-channel-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-update-email-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--create-new-version"); 
$flags+=("--no-create-new-version"); 
$flags+=("--email-template-request"); 
$flags+=("--template-name"); 
$flags+=("--template-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-update-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--endpoint-id"); 
$flags+=("--endpoint-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-update-endpoints-batch {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--endpoint-batch-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-update-gcm-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--gcm-channel-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-update-journey {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--journey-id"); 
$flags+=("--write-journey-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-update-journey-state {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--journey-id"); 
$flags+=("--journey-state-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-update-push-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--create-new-version"); 
$flags+=("--no-create-new-version"); 
$flags+=("--push-notification-template-request"); 
$flags+=("--template-name"); 
$flags+=("--template-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-update-recommender-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--recommender-id"); 
$flags+=("--update-recommender-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-update-segment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--segment-id"); 
$flags+=("--write-segment-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-update-sms-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--sms-channel-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-update-sms-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--create-new-version"); 
$flags+=("--no-create-new-version"); 
$flags+=("--sms-template-request"); 
$flags+=("--template-name"); 
$flags+=("--template-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-update-template-active-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-active-version-request"); 
$flags+=("--template-name"); 
$flags+=("--template-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-update-voice-channel {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--voice-channel-request"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-update-voice-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--create-new-version"); 
$flags+=("--no-create-new-version"); 
$flags+=("--template-name"); 
$flags+=("--voice-template-request"); 
$flags+=("--template-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-configuration-set"); 
$commands+=("create-configuration-set-event-destination"); 
$commands+=("create-dedicated-ip-pool"); 
$commands+=("create-deliverability-test-report"); 
$commands+=("create-email-identity"); 
$commands+=("delete-configuration-set"); 
$commands+=("delete-configuration-set-event-destination"); 
$commands+=("delete-dedicated-ip-pool"); 
$commands+=("delete-email-identity"); 
$commands+=("get-account"); 
$commands+=("get-blacklist-reports"); 
$commands+=("get-configuration-set"); 
$commands+=("get-configuration-set-event-destinations"); 
$commands+=("get-dedicated-ip"); 
$commands+=("get-dedicated-ips"); 
$commands+=("get-deliverability-dashboard-options"); 
$commands+=("get-deliverability-test-report"); 
$commands+=("get-domain-deliverability-campaign"); 
$commands+=("get-domain-statistics-report"); 
$commands+=("get-email-identity"); 
$commands+=("list-configuration-sets"); 
$commands+=("list-dedicated-ip-pools"); 
$commands+=("list-deliverability-test-reports"); 
$commands+=("list-domain-deliverability-campaigns"); 
$commands+=("list-email-identities"); 
$commands+=("list-tags-for-resource"); 
$commands+=("put-account-dedicated-ip-warmup-attributes"); 
$commands+=("put-account-sending-attributes"); 
$commands+=("put-configuration-set-delivery-options"); 
$commands+=("put-configuration-set-reputation-options"); 
$commands+=("put-configuration-set-sending-options"); 
$commands+=("put-configuration-set-tracking-options"); 
$commands+=("put-dedicated-ip-in-pool"); 
$commands+=("put-dedicated-ip-warmup-attributes"); 
$commands+=("put-deliverability-dashboard-option"); 
$commands+=("put-email-identity-dkim-attributes"); 
$commands+=("put-email-identity-feedback-attributes"); 
$commands+=("put-email-identity-mail-from-attributes"); 
$commands+=("send-email"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-configuration-set-event-destination");

return $commands;
}

 function Get-pinpoint-email-create-configuration-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--tracking-options"); 
$flags+=("--delivery-options"); 
$flags+=("--reputation-options"); 
$flags+=("--sending-options"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-create-configuration-set-event-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--event-destination-name"); 
$flags+=("--event-destination"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-create-dedicated-ip-pool {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pool-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-create-deliverability-test-report {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--report-name"); 
$flags+=("--from-email-address"); 
$flags+=("--content"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-create-email-identity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--email-identity"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-delete-configuration-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-delete-configuration-set-event-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--event-destination-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-delete-dedicated-ip-pool {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pool-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-delete-email-identity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--email-identity"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-get-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-get-blacklist-reports {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--blacklist-item-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-get-configuration-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-get-configuration-set-event-destinations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-get-dedicated-ip {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ip"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-get-dedicated-ips {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pool-name"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-get-deliverability-dashboard-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-get-deliverability-test-report {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--report-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-get-domain-deliverability-campaign {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--campaign-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-get-domain-statistics-report {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--start-date"); 
$flags+=("--end-date"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-get-email-identity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--email-identity"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-list-configuration-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-list-dedicated-ip-pools {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-list-deliverability-test-reports {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-list-domain-deliverability-campaigns {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--start-date"); 
$flags+=("--end-date"); 
$flags+=("--subscribed-domain"); 
$flags+=("--next-token"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-list-email-identities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-put-account-dedicated-ip-warmup-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-warmup-enabled"); 
$flags+=("--no-auto-warmup-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-put-account-sending-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sending-enabled"); 
$flags+=("--no-sending-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-put-configuration-set-delivery-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--tls-policy"); 
$flags+=("--sending-pool-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-put-configuration-set-reputation-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--reputation-metrics-enabled"); 
$flags+=("--no-reputation-metrics-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-put-configuration-set-sending-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--sending-enabled"); 
$flags+=("--no-sending-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-put-configuration-set-tracking-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--custom-redirect-domain"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-put-dedicated-ip-in-pool {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ip"); 
$flags+=("--destination-pool-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-put-dedicated-ip-warmup-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ip"); 
$flags+=("--warmup-percentage"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-put-deliverability-dashboard-option {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dashboard-enabled"); 
$flags+=("--no-dashboard-enabled"); 
$flags+=("--subscribed-domains"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-put-email-identity-dkim-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--email-identity"); 
$flags+=("--signing-enabled"); 
$flags+=("--no-signing-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-put-email-identity-feedback-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--email-identity"); 
$flags+=("--email-forwarding-enabled"); 
$flags+=("--no-email-forwarding-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-put-email-identity-mail-from-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--email-identity"); 
$flags+=("--mail-from-domain"); 
$flags+=("--behavior-on-mx-failure"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-send-email {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--from-email-address"); 
$flags+=("--destination"); 
$flags+=("--reply-to-addresses"); 
$flags+=("--feedback-forwarding-email-address"); 
$flags+=("--content"); 
$flags+=("--email-tags"); 
$flags+=("--configuration-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-email-update-configuration-set-event-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--event-destination-name"); 
$flags+=("--event-destination"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-sms-voice {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-configuration-set"); 
$commands+=("create-configuration-set-event-destination"); 
$commands+=("delete-configuration-set"); 
$commands+=("delete-configuration-set-event-destination"); 
$commands+=("get-configuration-set-event-destinations"); 
$commands+=("send-voice-message"); 
$commands+=("update-configuration-set-event-destination");

return $commands;
}

 function Get-pinpoint-sms-voice-create-configuration-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-sms-voice-create-configuration-set-event-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--event-destination"); 
$flags+=("--event-destination-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-sms-voice-delete-configuration-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-sms-voice-delete-configuration-set-event-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--event-destination-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-sms-voice-get-configuration-set-event-destinations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-sms-voice-send-voice-message {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--caller-id"); 
$flags+=("--configuration-set-name"); 
$flags+=("--content"); 
$flags+=("--destination-phone-number"); 
$flags+=("--origination-phone-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pinpoint-sms-voice-update-configuration-set-event-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--event-destination"); 
$flags+=("--event-destination-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-polly {
    $commands = [System.Collections.ArrayList]@();

$commands+=("delete-lexicon"); 
$commands+=("describe-voices"); 
$commands+=("get-lexicon"); 
$commands+=("get-speech-synthesis-task"); 
$commands+=("list-lexicons"); 
$commands+=("list-speech-synthesis-tasks"); 
$commands+=("put-lexicon"); 
$commands+=("start-speech-synthesis-task"); 
$commands+=("synthesize-speech");

return $commands;
}

 function Get-polly-delete-lexicon {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-polly-describe-voices {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--engine"); 
$flags+=("--language-code"); 
$flags+=("--include-additional-language-codes"); 
$flags+=("--no-include-additional-language-codes"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-polly-get-lexicon {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-polly-get-speech-synthesis-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-polly-list-lexicons {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-polly-list-speech-synthesis-tasks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-polly-put-lexicon {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--content"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-polly-start-speech-synthesis-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--engine"); 
$flags+=("--language-code"); 
$flags+=("--lexicon-names"); 
$flags+=("--output-format"); 
$flags+=("--output-s"); 
$flags+=("--output-s"); 
$flags+=("--sample-rate"); 
$flags+=("--sns-topic-arn"); 
$flags+=("--speech-mark-types"); 
$flags+=("--text"); 
$flags+=("--text-type"); 
$flags+=("--voice-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-polly-synthesize-speech {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--engine"); 
$flags+=("--language-code"); 
$flags+=("--lexicon-names"); 
$flags+=("--output-format"); 
$flags+=("--sample-rate"); 
$flags+=("--speech-mark-types"); 
$flags+=("--text"); 
$flags+=("--text-type"); 
$flags+=("--voice-id");

return $flags;
}

 function Get-pricing {
    $commands = [System.Collections.ArrayList]@();

$commands+=("describe-services"); 
$commands+=("get-attribute-values"); 
$commands+=("get-products");

return $commands;
}

 function Get-pricing-describe-services {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-code"); 
$flags+=("--format-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pricing-get-attribute-values {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-code"); 
$flags+=("--attribute-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-pricing-get-products {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-code"); 
$flags+=("--filters"); 
$flags+=("--format-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-qldb {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-ledger"); 
$commands+=("delete-ledger"); 
$commands+=("describe-journal-s3-export"); 
$commands+=("describe-ledger"); 
$commands+=("export-journal-to-s3"); 
$commands+=("get-block"); 
$commands+=("get-digest"); 
$commands+=("get-revision"); 
$commands+=("list-journal-s3-exports"); 
$commands+=("list-journal-s3-exports-for-ledger"); 
$commands+=("list-ledgers"); 
$commands+=("list-tags-for-resource"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-ledger");

return $commands;
}

 function Get-qldb-create-ledger {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--tags"); 
$flags+=("--permissions-mode"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-qldb-delete-ledger {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-qldb-describe-journal-s3-export {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--export-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-qldb-describe-ledger {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-qldb-export-journal-to-s3 {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--inclusive-start-time"); 
$flags+=("--exclusive-end-time"); 
$flags+=("--s"); 
$flags+=("--role-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-qldb-get-block {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--block-address"); 
$flags+=("--digest-tip-address"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-qldb-get-digest {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-qldb-get-revision {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--block-address"); 
$flags+=("--document-id"); 
$flags+=("--digest-tip-address"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-qldb-list-journal-s3-exports {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-qldb-list-journal-s3-exports-for-ledger {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-qldb-list-ledgers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-qldb-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-qldb-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-qldb-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-qldb-update-ledger {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-qldb-session {
    $commands = [System.Collections.ArrayList]@();

$commands+=("send-command");

return $commands;
}

 function Get-qldb-session-send-command {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--session-token"); 
$flags+=("--start-session"); 
$flags+=("--start-transaction"); 
$flags+=("--end-session"); 
$flags+=("--commit-transaction"); 
$flags+=("--abort-transaction"); 
$flags+=("--execute-statement"); 
$flags+=("--fetch-page"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight {
    $commands = [System.Collections.ArrayList]@();

$commands+=("cancel-ingestion"); 
$commands+=("create-dashboard"); 
$commands+=("create-data-set"); 
$commands+=("create-data-source"); 
$commands+=("create-group"); 
$commands+=("create-group-membership"); 
$commands+=("create-iam-policy-assignment"); 
$commands+=("create-ingestion"); 
$commands+=("create-template"); 
$commands+=("create-template-alias"); 
$commands+=("delete-dashboard"); 
$commands+=("delete-data-set"); 
$commands+=("delete-data-source"); 
$commands+=("delete-group"); 
$commands+=("delete-group-membership"); 
$commands+=("delete-iam-policy-assignment"); 
$commands+=("delete-template"); 
$commands+=("delete-template-alias"); 
$commands+=("delete-user"); 
$commands+=("delete-user-by-principal-id"); 
$commands+=("describe-dashboard"); 
$commands+=("describe-dashboard-permissions"); 
$commands+=("describe-data-set"); 
$commands+=("describe-data-set-permissions"); 
$commands+=("describe-data-source"); 
$commands+=("describe-data-source-permissions"); 
$commands+=("describe-group"); 
$commands+=("describe-iam-policy-assignment"); 
$commands+=("describe-ingestion"); 
$commands+=("describe-template"); 
$commands+=("describe-template-alias"); 
$commands+=("describe-template-permissions"); 
$commands+=("describe-user"); 
$commands+=("get-dashboard-embed-url"); 
$commands+=("list-dashboard-versions"); 
$commands+=("list-dashboards"); 
$commands+=("list-data-sets"); 
$commands+=("list-data-sources"); 
$commands+=("list-group-memberships"); 
$commands+=("list-groups"); 
$commands+=("list-iam-policy-assignments"); 
$commands+=("list-iam-policy-assignments-for-user"); 
$commands+=("list-ingestions"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-template-aliases"); 
$commands+=("list-template-versions"); 
$commands+=("list-templates"); 
$commands+=("list-user-groups"); 
$commands+=("list-users"); 
$commands+=("register-user"); 
$commands+=("search-dashboards"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-dashboard"); 
$commands+=("update-dashboard-permissions"); 
$commands+=("update-dashboard-published-version"); 
$commands+=("update-data-set"); 
$commands+=("update-data-set-permissions"); 
$commands+=("update-data-source"); 
$commands+=("update-data-source-permissions"); 
$commands+=("update-group"); 
$commands+=("update-iam-policy-assignment"); 
$commands+=("update-template"); 
$commands+=("update-template-alias"); 
$commands+=("update-template-permissions"); 
$commands+=("update-user");

return $commands;
}

 function Get-quicksight-cancel-ingestion {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--data-set-id"); 
$flags+=("--ingestion-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-create-dashboard {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--dashboard-id"); 
$flags+=("--name"); 
$flags+=("--parameters"); 
$flags+=("--permissions"); 
$flags+=("--source-entity"); 
$flags+=("--tags"); 
$flags+=("--version-description"); 
$flags+=("--dashboard-publish-options"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-create-data-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--data-set-id"); 
$flags+=("--name"); 
$flags+=("--physical-table-map"); 
$flags+=("--logical-table-map"); 
$flags+=("--import-mode"); 
$flags+=("--column-groups"); 
$flags+=("--permissions"); 
$flags+=("--row-level-permission-data-set"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-create-data-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--data-source-id"); 
$flags+=("--name"); 
$flags+=("--type"); 
$flags+=("--data-source-parameters"); 
$flags+=("--credentials"); 
$flags+=("--permissions"); 
$flags+=("--vpc-connection-properties"); 
$flags+=("--ssl-properties"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-create-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--description"); 
$flags+=("--aws-account-id"); 
$flags+=("--namespace"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-create-group-membership {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--member-name"); 
$flags+=("--group-name"); 
$flags+=("--aws-account-id"); 
$flags+=("--namespace"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-create-iam-policy-assignment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--assignment-name"); 
$flags+=("--assignment-status"); 
$flags+=("--policy-arn"); 
$flags+=("--identities"); 
$flags+=("--namespace"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-create-ingestion {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--data-set-id"); 
$flags+=("--ingestion-id"); 
$flags+=("--aws-account-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-create-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--template-id"); 
$flags+=("--name"); 
$flags+=("--permissions"); 
$flags+=("--source-entity"); 
$flags+=("--tags"); 
$flags+=("--version-description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-create-template-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--template-id"); 
$flags+=("--alias-name"); 
$flags+=("--template-version-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-delete-dashboard {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--dashboard-id"); 
$flags+=("--version-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-delete-data-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--data-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-delete-data-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--data-source-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-delete-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--aws-account-id"); 
$flags+=("--namespace"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-delete-group-membership {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--member-name"); 
$flags+=("--group-name"); 
$flags+=("--aws-account-id"); 
$flags+=("--namespace"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-delete-iam-policy-assignment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--assignment-name"); 
$flags+=("--namespace"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-delete-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--template-id"); 
$flags+=("--version-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-delete-template-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--template-id"); 
$flags+=("--alias-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-delete-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--aws-account-id"); 
$flags+=("--namespace"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-delete-user-by-principal-id {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--principal-id"); 
$flags+=("--aws-account-id"); 
$flags+=("--namespace"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-describe-dashboard {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--dashboard-id"); 
$flags+=("--version-number"); 
$flags+=("--alias-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-describe-dashboard-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--dashboard-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-describe-data-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--data-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-describe-data-set-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--data-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-describe-data-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--data-source-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-describe-data-source-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--data-source-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-describe-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--aws-account-id"); 
$flags+=("--namespace"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-describe-iam-policy-assignment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--assignment-name"); 
$flags+=("--namespace"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-describe-ingestion {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--data-set-id"); 
$flags+=("--ingestion-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-describe-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--template-id"); 
$flags+=("--version-number"); 
$flags+=("--alias-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-describe-template-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--template-id"); 
$flags+=("--alias-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-describe-template-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--template-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-describe-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--aws-account-id"); 
$flags+=("--namespace"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-get-dashboard-embed-url {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--dashboard-id"); 
$flags+=("--identity-type"); 
$flags+=("--session-lifetime-in-minutes"); 
$flags+=("--undo-redo-disabled"); 
$flags+=("--no-undo-redo-disabled"); 
$flags+=("--reset-disabled"); 
$flags+=("--no-reset-disabled"); 
$flags+=("--user-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-list-dashboard-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--dashboard-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-list-dashboards {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-list-data-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-list-data-sources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-list-group-memberships {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--aws-account-id"); 
$flags+=("--namespace"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-list-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--namespace"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-list-iam-policy-assignments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--assignment-status"); 
$flags+=("--namespace"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-list-iam-policy-assignments-for-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--user-name"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--namespace"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-list-ingestions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--data-set-id"); 
$flags+=("--next-token"); 
$flags+=("--aws-account-id"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-list-template-aliases {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--template-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-list-template-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--template-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-list-templates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-list-user-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--aws-account-id"); 
$flags+=("--namespace"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-list-users {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--namespace"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-register-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-type"); 
$flags+=("--email"); 
$flags+=("--user-role"); 
$flags+=("--iam-arn"); 
$flags+=("--session-name"); 
$flags+=("--aws-account-id"); 
$flags+=("--namespace"); 
$flags+=("--user-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-search-dashboards {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--filters"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-update-dashboard {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--dashboard-id"); 
$flags+=("--name"); 
$flags+=("--source-entity"); 
$flags+=("--parameters"); 
$flags+=("--version-description"); 
$flags+=("--dashboard-publish-options"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-update-dashboard-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--dashboard-id"); 
$flags+=("--grant-permissions"); 
$flags+=("--revoke-permissions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-update-dashboard-published-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--dashboard-id"); 
$flags+=("--version-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-update-data-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--data-set-id"); 
$flags+=("--name"); 
$flags+=("--physical-table-map"); 
$flags+=("--logical-table-map"); 
$flags+=("--import-mode"); 
$flags+=("--column-groups"); 
$flags+=("--row-level-permission-data-set"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-update-data-set-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--data-set-id"); 
$flags+=("--grant-permissions"); 
$flags+=("--revoke-permissions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-update-data-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--data-source-id"); 
$flags+=("--name"); 
$flags+=("--data-source-parameters"); 
$flags+=("--credentials"); 
$flags+=("--vpc-connection-properties"); 
$flags+=("--ssl-properties"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-update-data-source-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--data-source-id"); 
$flags+=("--grant-permissions"); 
$flags+=("--revoke-permissions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-update-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--description"); 
$flags+=("--aws-account-id"); 
$flags+=("--namespace"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-update-iam-policy-assignment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--assignment-name"); 
$flags+=("--namespace"); 
$flags+=("--assignment-status"); 
$flags+=("--policy-arn"); 
$flags+=("--identities"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-update-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--template-id"); 
$flags+=("--source-entity"); 
$flags+=("--version-description"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-update-template-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--template-id"); 
$flags+=("--alias-name"); 
$flags+=("--template-version-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-update-template-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--aws-account-id"); 
$flags+=("--template-id"); 
$flags+=("--grant-permissions"); 
$flags+=("--revoke-permissions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-quicksight-update-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-name"); 
$flags+=("--aws-account-id"); 
$flags+=("--namespace"); 
$flags+=("--email"); 
$flags+=("--role"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ram {
    $commands = [System.Collections.ArrayList]@();

$commands+=("accept-resource-share-invitation"); 
$commands+=("associate-resource-share"); 
$commands+=("associate-resource-share-permission"); 
$commands+=("create-resource-share"); 
$commands+=("delete-resource-share"); 
$commands+=("disassociate-resource-share"); 
$commands+=("disassociate-resource-share-permission"); 
$commands+=("enable-sharing-with-aws-organization"); 
$commands+=("get-permission"); 
$commands+=("get-resource-policies"); 
$commands+=("get-resource-share-associations"); 
$commands+=("get-resource-share-invitations"); 
$commands+=("get-resource-shares"); 
$commands+=("list-pending-invitation-resources"); 
$commands+=("list-permissions"); 
$commands+=("list-principals"); 
$commands+=("list-resource-share-permissions"); 
$commands+=("list-resource-types"); 
$commands+=("list-resources"); 
$commands+=("promote-resource-share-created-from-policy"); 
$commands+=("reject-resource-share-invitation"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-resource-share");

return $commands;
}

 function Get-ram-accept-resource-share-invitation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-share-invitation-arn"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ram-associate-resource-share {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-share-arn"); 
$flags+=("--resource-arns"); 
$flags+=("--principals"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ram-associate-resource-share-permission {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-share-arn"); 
$flags+=("--permission-arn"); 
$flags+=("--replace"); 
$flags+=("--no-replace"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ram-create-resource-share {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--resource-arns"); 
$flags+=("--principals"); 
$flags+=("--tags"); 
$flags+=("--allow-external-principals"); 
$flags+=("--no-allow-external-principals"); 
$flags+=("--client-token"); 
$flags+=("--permission-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ram-delete-resource-share {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-share-arn"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ram-disassociate-resource-share {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-share-arn"); 
$flags+=("--resource-arns"); 
$flags+=("--principals"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ram-disassociate-resource-share-permission {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-share-arn"); 
$flags+=("--permission-arn"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ram-enable-sharing-with-aws-organization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ram-get-permission {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--permission-arn"); 
$flags+=("--permission-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ram-get-resource-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arns"); 
$flags+=("--principal"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ram-get-resource-share-associations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arns"); 
$flags+=("--principal"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ram-get-resource-share-invitations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-share-invitation-arns"); 
$flags+=("--resource-share-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ram-get-resource-shares {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-share-arns"); 
$flags+=("--resource-share-status"); 
$flags+=("--resource-owner"); 
$flags+=("--name"); 
$flags+=("--tag-filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ram-list-pending-invitation-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-share-invitation-arn"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ram-list-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-type"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ram-list-principals {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-owner"); 
$flags+=("--resource-arn"); 
$flags+=("--principals"); 
$flags+=("--resource-type"); 
$flags+=("--resource-share-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ram-list-resource-share-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-share-arn"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ram-list-resource-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ram-list-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-owner"); 
$flags+=("--principal"); 
$flags+=("--resource-type"); 
$flags+=("--resource-arns"); 
$flags+=("--resource-share-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ram-promote-resource-share-created-from-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-share-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ram-reject-resource-share-invitation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-share-invitation-arn"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ram-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-share-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ram-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-share-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ram-update-resource-share {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-share-arn"); 
$flags+=("--name"); 
$flags+=("--allow-external-principals"); 
$flags+=("--no-allow-external-principals"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-option-to-option-group"); 
$commands+=("add-role-to-db-cluster"); 
$commands+=("add-role-to-db-instance"); 
$commands+=("add-source-identifier-to-subscription"); 
$commands+=("add-tags-to-resource"); 
$commands+=("apply-pending-maintenance-action"); 
$commands+=("authorize-db-security-group-ingress"); 
$commands+=("backtrack-db-cluster"); 
$commands+=("cancel-export-task"); 
$commands+=("copy-db-cluster-parameter-group"); 
$commands+=("copy-db-cluster-snapshot"); 
$commands+=("copy-db-parameter-group"); 
$commands+=("copy-db-snapshot"); 
$commands+=("copy-option-group"); 
$commands+=("create-custom-availability-zone"); 
$commands+=("create-db-cluster"); 
$commands+=("create-db-cluster-endpoint"); 
$commands+=("create-db-cluster-parameter-group"); 
$commands+=("create-db-cluster-snapshot"); 
$commands+=("create-db-instance"); 
$commands+=("create-db-instance-read-replica"); 
$commands+=("create-db-parameter-group"); 
$commands+=("create-db-proxy"); 
$commands+=("create-db-security-group"); 
$commands+=("create-db-snapshot"); 
$commands+=("create-db-subnet-group"); 
$commands+=("create-event-subscription"); 
$commands+=("create-global-cluster"); 
$commands+=("create-option-group"); 
$commands+=("delete-custom-availability-zone"); 
$commands+=("delete-db-cluster"); 
$commands+=("delete-db-cluster-endpoint"); 
$commands+=("delete-db-cluster-parameter-group"); 
$commands+=("delete-db-cluster-snapshot"); 
$commands+=("delete-db-instance"); 
$commands+=("delete-db-instance-automated-backup"); 
$commands+=("delete-db-parameter-group"); 
$commands+=("delete-db-proxy"); 
$commands+=("delete-db-security-group"); 
$commands+=("delete-db-snapshot"); 
$commands+=("delete-db-subnet-group"); 
$commands+=("delete-event-subscription"); 
$commands+=("delete-global-cluster"); 
$commands+=("delete-installation-media"); 
$commands+=("delete-option-group"); 
$commands+=("deregister-db-proxy-targets"); 
$commands+=("describe-account-attributes"); 
$commands+=("describe-certificates"); 
$commands+=("describe-custom-availability-zones"); 
$commands+=("describe-db-cluster-backtracks"); 
$commands+=("describe-db-cluster-endpoints"); 
$commands+=("describe-db-cluster-parameter-groups"); 
$commands+=("describe-db-cluster-parameters"); 
$commands+=("describe-db-cluster-snapshot-attributes"); 
$commands+=("describe-db-cluster-snapshots"); 
$commands+=("describe-db-clusters"); 
$commands+=("describe-db-engine-versions"); 
$commands+=("describe-db-instance-automated-backups"); 
$commands+=("describe-db-instances"); 
$commands+=("describe-db-log-files"); 
$commands+=("describe-db-parameter-groups"); 
$commands+=("describe-db-parameters"); 
$commands+=("describe-db-proxies"); 
$commands+=("describe-db-proxy-target-groups"); 
$commands+=("describe-db-proxy-targets"); 
$commands+=("describe-db-security-groups"); 
$commands+=("describe-db-snapshot-attributes"); 
$commands+=("describe-db-snapshots"); 
$commands+=("describe-db-subnet-groups"); 
$commands+=("describe-engine-default-cluster-parameters"); 
$commands+=("describe-engine-default-parameters"); 
$commands+=("describe-event-categories"); 
$commands+=("describe-event-subscriptions"); 
$commands+=("describe-events"); 
$commands+=("describe-export-tasks"); 
$commands+=("describe-global-clusters"); 
$commands+=("describe-installation-media"); 
$commands+=("describe-option-group-options"); 
$commands+=("describe-option-groups"); 
$commands+=("describe-orderable-db-instance-options"); 
$commands+=("describe-pending-maintenance-actions"); 
$commands+=("describe-reserved-db-instances"); 
$commands+=("describe-reserved-db-instances-offerings"); 
$commands+=("describe-source-regions"); 
$commands+=("describe-valid-db-instance-modifications"); 
$commands+=("download-db-log-file-portion"); 
$commands+=("failover-db-cluster"); 
$commands+=("generate-db-auth-token"); 
$commands+=("import-installation-media"); 
$commands+=("list-tags-for-resource"); 
$commands+=("modify-certificates"); 
$commands+=("modify-current-db-cluster-capacity"); 
$commands+=("modify-db-cluster"); 
$commands+=("modify-db-cluster-endpoint"); 
$commands+=("modify-db-cluster-parameter-group"); 
$commands+=("modify-db-cluster-snapshot-attribute"); 
$commands+=("modify-db-instance"); 
$commands+=("modify-db-parameter-group"); 
$commands+=("modify-db-proxy"); 
$commands+=("modify-db-proxy-target-group"); 
$commands+=("modify-db-snapshot"); 
$commands+=("modify-db-snapshot-attribute"); 
$commands+=("modify-db-subnet-group"); 
$commands+=("modify-event-subscription"); 
$commands+=("modify-global-cluster"); 
$commands+=("promote-read-replica"); 
$commands+=("promote-read-replica-db-cluster"); 
$commands+=("purchase-reserved-db-instances-offering"); 
$commands+=("reboot-db-instance"); 
$commands+=("register-db-proxy-targets"); 
$commands+=("remove-from-global-cluster"); 
$commands+=("remove-option-from-option-group"); 
$commands+=("remove-role-from-db-cluster"); 
$commands+=("remove-role-from-db-instance"); 
$commands+=("remove-source-identifier-from-subscription"); 
$commands+=("remove-tags-from-resource"); 
$commands+=("reset-db-cluster-parameter-group"); 
$commands+=("reset-db-parameter-group"); 
$commands+=("restore-db-cluster-from-s3"); 
$commands+=("restore-db-cluster-from-snapshot"); 
$commands+=("restore-db-cluster-to-point-in-time"); 
$commands+=("restore-db-instance-from-db-snapshot"); 
$commands+=("restore-db-instance-from-s3"); 
$commands+=("restore-db-instance-to-point-in-time"); 
$commands+=("revoke-db-security-group-ingress"); 
$commands+=("start-activity-stream"); 
$commands+=("start-db-cluster"); 
$commands+=("start-db-instance"); 
$commands+=("start-export-task"); 
$commands+=("stop-activity-stream"); 
$commands+=("stop-db-cluster"); 
$commands+=("stop-db-instance"); 
$commands+=("wait");

return $commands;
}

 function Get-rds-add-option-to-option-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--option-group-name"); 
$flags+=("--apply-immediately"); 
$flags+=("--no-apply-immediately"); 
$flags+=("--options"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-add-role-to-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--role-arn"); 
$flags+=("--feature-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-add-role-to-db-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--role-arn"); 
$flags+=("--feature-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-add-source-identifier-to-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-name"); 
$flags+=("--source-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-add-tags-to-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-apply-pending-maintenance-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-identifier"); 
$flags+=("--apply-action"); 
$flags+=("--opt-in-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-authorize-db-security-group-ingress {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-security-group-name"); 
$flags+=("--cidrip"); 
$flags+=("--ec"); 
$flags+=("--ec"); 
$flags+=("--ec"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-backtrack-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--backtrack-to"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--use-earliest-time-on-point-in-time-unavailable"); 
$flags+=("--no-use-earliest-time-on-point-in-time-unavailable"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-cancel-export-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--export-task-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-copy-db-cluster-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-db-cluster-parameter-group-identifier"); 
$flags+=("--target-db-cluster-parameter-group-identifier"); 
$flags+=("--target-db-cluster-parameter-group-description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-copy-db-cluster-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-db-cluster-snapshot-identifier"); 
$flags+=("--target-db-cluster-snapshot-identifier"); 
$flags+=("--kms-key-id"); 
$flags+=("--pre-signed-url"); 
$flags+=("--copy-tags"); 
$flags+=("--no-copy-tags"); 
$flags+=("--tags"); 
$flags+=("--source-region"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-copy-db-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-db-parameter-group-identifier"); 
$flags+=("--target-db-parameter-group-identifier"); 
$flags+=("--target-db-parameter-group-description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-copy-db-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-db-snapshot-identifier"); 
$flags+=("--target-db-snapshot-identifier"); 
$flags+=("--kms-key-id"); 
$flags+=("--tags"); 
$flags+=("--copy-tags"); 
$flags+=("--no-copy-tags"); 
$flags+=("--pre-signed-url"); 
$flags+=("--option-group-name"); 
$flags+=("--source-region"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-copy-option-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-option-group-identifier"); 
$flags+=("--target-option-group-identifier"); 
$flags+=("--target-option-group-description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-create-custom-availability-zone {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--custom-availability-zone-name"); 
$flags+=("--existing-vpn-id"); 
$flags+=("--new-vpn-tunnel-name"); 
$flags+=("--vpn-tunnel-originator-ip"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-create-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--availability-zones"); 
$flags+=("--backup-retention-period"); 
$flags+=("--character-set-name"); 
$flags+=("--database-name"); 
$flags+=("--db-cluster-identifier"); 
$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--db-subnet-group-name"); 
$flags+=("--engine"); 
$flags+=("--engine-version"); 
$flags+=("--port"); 
$flags+=("--master-username"); 
$flags+=("--master-user-password"); 
$flags+=("--option-group-name"); 
$flags+=("--preferred-backup-window"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--replication-source-identifier"); 
$flags+=("--tags"); 
$flags+=("--storage-encrypted"); 
$flags+=("--no-storage-encrypted"); 
$flags+=("--kms-key-id"); 
$flags+=("--pre-signed-url"); 
$flags+=("--enable-iam-database-authentication"); 
$flags+=("--no-enable-iam-database-authentication"); 
$flags+=("--backtrack-window"); 
$flags+=("--enable-cloudwatch-logs-exports"); 
$flags+=("--engine-mode"); 
$flags+=("--scaling-configuration"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--global-cluster-identifier"); 
$flags+=("--enable-http-endpoint"); 
$flags+=("--no-enable-http-endpoint"); 
$flags+=("--copy-tags-to-snapshot"); 
$flags+=("--no-copy-tags-to-snapshot"); 
$flags+=("--domain"); 
$flags+=("--domain-iam-role-name"); 
$flags+=("--source-region"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-create-db-cluster-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--db-cluster-endpoint-identifier"); 
$flags+=("--endpoint-type"); 
$flags+=("--static-members"); 
$flags+=("--excluded-members"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-create-db-cluster-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--db-parameter-group-family"); 
$flags+=("--description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-create-db-cluster-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-snapshot-identifier"); 
$flags+=("--db-cluster-identifier"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-create-db-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-name"); 
$flags+=("--db-instance-identifier"); 
$flags+=("--allocated-storage"); 
$flags+=("--db-instance-class"); 
$flags+=("--engine"); 
$flags+=("--master-username"); 
$flags+=("--master-user-password"); 
$flags+=("--db-security-groups"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--availability-zone"); 
$flags+=("--db-subnet-group-name"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--db-parameter-group-name"); 
$flags+=("--backup-retention-period"); 
$flags+=("--preferred-backup-window"); 
$flags+=("--port"); 
$flags+=("--multi-az"); 
$flags+=("--no-multi-az"); 
$flags+=("--engine-version"); 
$flags+=("--auto-minor-version-upgrade"); 
$flags+=("--no-auto-minor-version-upgrade"); 
$flags+=("--license-model"); 
$flags+=("--iops"); 
$flags+=("--option-group-name"); 
$flags+=("--character-set-name"); 
$flags+=("--publicly-accessible"); 
$flags+=("--no-publicly-accessible"); 
$flags+=("--tags"); 
$flags+=("--db-cluster-identifier"); 
$flags+=("--storage-type"); 
$flags+=("--tde-credential-arn"); 
$flags+=("--tde-credential-password"); 
$flags+=("--storage-encrypted"); 
$flags+=("--no-storage-encrypted"); 
$flags+=("--kms-key-id"); 
$flags+=("--domain"); 
$flags+=("--copy-tags-to-snapshot"); 
$flags+=("--no-copy-tags-to-snapshot"); 
$flags+=("--monitoring-interval"); 
$flags+=("--monitoring-role-arn"); 
$flags+=("--domain-iam-role-name"); 
$flags+=("--promotion-tier"); 
$flags+=("--timezone"); 
$flags+=("--enable-iam-database-authentication"); 
$flags+=("--no-enable-iam-database-authentication"); 
$flags+=("--enable-performance-insights"); 
$flags+=("--no-enable-performance-insights"); 
$flags+=("--performance-insights-kms-key-id"); 
$flags+=("--performance-insights-retention-period"); 
$flags+=("--enable-cloudwatch-logs-exports"); 
$flags+=("--processor-features"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--max-allocated-storage"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-create-db-instance-read-replica {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--source-db-instance-identifier"); 
$flags+=("--db-instance-class"); 
$flags+=("--availability-zone"); 
$flags+=("--port"); 
$flags+=("--multi-az"); 
$flags+=("--no-multi-az"); 
$flags+=("--auto-minor-version-upgrade"); 
$flags+=("--no-auto-minor-version-upgrade"); 
$flags+=("--iops"); 
$flags+=("--option-group-name"); 
$flags+=("--db-parameter-group-name"); 
$flags+=("--publicly-accessible"); 
$flags+=("--no-publicly-accessible"); 
$flags+=("--tags"); 
$flags+=("--db-subnet-group-name"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--storage-type"); 
$flags+=("--copy-tags-to-snapshot"); 
$flags+=("--no-copy-tags-to-snapshot"); 
$flags+=("--monitoring-interval"); 
$flags+=("--monitoring-role-arn"); 
$flags+=("--kms-key-id"); 
$flags+=("--pre-signed-url"); 
$flags+=("--enable-iam-database-authentication"); 
$flags+=("--no-enable-iam-database-authentication"); 
$flags+=("--enable-performance-insights"); 
$flags+=("--no-enable-performance-insights"); 
$flags+=("--performance-insights-kms-key-id"); 
$flags+=("--performance-insights-retention-period"); 
$flags+=("--enable-cloudwatch-logs-exports"); 
$flags+=("--processor-features"); 
$flags+=("--use-default-processor-features"); 
$flags+=("--no-use-default-processor-features"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--domain"); 
$flags+=("--domain-iam-role-name"); 
$flags+=("--source-region"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-create-db-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-parameter-group-name"); 
$flags+=("--db-parameter-group-family"); 
$flags+=("--description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-create-db-proxy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-proxy-name"); 
$flags+=("--engine-family"); 
$flags+=("--auth"); 
$flags+=("--role-arn"); 
$flags+=("--vpc-subnet-ids"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--require-tls"); 
$flags+=("--no-require-tls"); 
$flags+=("--idle-client-timeout"); 
$flags+=("--debug-logging"); 
$flags+=("--no-debug-logging"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-create-db-security-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-security-group-name"); 
$flags+=("--db-security-group-description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-create-db-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-snapshot-identifier"); 
$flags+=("--db-instance-identifier"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-create-db-subnet-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-subnet-group-name"); 
$flags+=("--db-subnet-group-description"); 
$flags+=("--subnet-ids"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-create-event-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-name"); 
$flags+=("--sns-topic-arn"); 
$flags+=("--source-type"); 
$flags+=("--event-categories"); 
$flags+=("--source-ids"); 
$flags+=("--enabled"); 
$flags+=("--no-enabled"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-create-global-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-cluster-identifier"); 
$flags+=("--source-db-cluster-identifier"); 
$flags+=("--engine"); 
$flags+=("--engine-version"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--database-name"); 
$flags+=("--storage-encrypted"); 
$flags+=("--no-storage-encrypted"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-create-option-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--option-group-name"); 
$flags+=("--engine-name"); 
$flags+=("--major-engine-version"); 
$flags+=("--option-group-description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-delete-custom-availability-zone {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--custom-availability-zone-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-delete-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--skip-final-snapshot"); 
$flags+=("--no-skip-final-snapshot"); 
$flags+=("--final-db-snapshot-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-delete-db-cluster-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-endpoint-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-delete-db-cluster-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-delete-db-cluster-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-snapshot-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-delete-db-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--skip-final-snapshot"); 
$flags+=("--no-skip-final-snapshot"); 
$flags+=("--final-db-snapshot-identifier"); 
$flags+=("--delete-automated-backups"); 
$flags+=("--no-delete-automated-backups"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-delete-db-instance-automated-backup {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dbi-resource-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-delete-db-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-parameter-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-delete-db-proxy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-proxy-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-delete-db-security-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-security-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-delete-db-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-snapshot-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-delete-db-subnet-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-subnet-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-delete-event-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-delete-global-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-cluster-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-delete-installation-media {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--installation-media-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-delete-option-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--option-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-deregister-db-proxy-targets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-proxy-name"); 
$flags+=("--target-group-name"); 
$flags+=("--db-instance-identifiers"); 
$flags+=("--db-cluster-identifiers"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-account-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-certificates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-identifier"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-custom-availability-zones {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--custom-availability-zone-id"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-db-cluster-backtracks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--backtrack-identifier"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-db-cluster-endpoints {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--db-cluster-endpoint-identifier"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-db-cluster-parameter-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-db-cluster-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--source"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-db-cluster-snapshot-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-snapshot-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-db-cluster-snapshots {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--db-cluster-snapshot-identifier"); 
$flags+=("--snapshot-type"); 
$flags+=("--filters"); 
$flags+=("--include-shared"); 
$flags+=("--no-include-shared"); 
$flags+=("--include-public"); 
$flags+=("--no-include-public"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-db-clusters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--filters"); 
$flags+=("--include-shared"); 
$flags+=("--no-include-shared"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-db-engine-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--engine"); 
$flags+=("--engine-version"); 
$flags+=("--db-parameter-group-family"); 
$flags+=("--filters"); 
$flags+=("--default-only"); 
$flags+=("--no-default-only"); 
$flags+=("--list-supported-character-sets"); 
$flags+=("--no-list-supported-character-sets"); 
$flags+=("--list-supported-timezones"); 
$flags+=("--no-list-supported-timezones"); 
$flags+=("--include-all"); 
$flags+=("--no-include-all"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-db-instance-automated-backups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dbi-resource-id"); 
$flags+=("--db-instance-identifier"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-db-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-db-log-files {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--filename-contains"); 
$flags+=("--file-last-written"); 
$flags+=("--file-size"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-db-parameter-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-parameter-group-name"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-db-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-parameter-group-name"); 
$flags+=("--source"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-db-proxies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-proxy-name"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-db-proxy-target-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-proxy-name"); 
$flags+=("--target-group-name"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-db-proxy-targets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-proxy-name"); 
$flags+=("--target-group-name"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-db-security-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-security-group-name"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-db-snapshot-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-snapshot-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-db-snapshots {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--db-snapshot-identifier"); 
$flags+=("--snapshot-type"); 
$flags+=("--filters"); 
$flags+=("--include-shared"); 
$flags+=("--no-include-shared"); 
$flags+=("--include-public"); 
$flags+=("--no-include-public"); 
$flags+=("--dbi-resource-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-db-subnet-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-subnet-group-name"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-engine-default-cluster-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-parameter-group-family"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-engine-default-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-parameter-group-family"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-event-categories {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-type"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-event-subscriptions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-name"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-identifier"); 
$flags+=("--source-type"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--duration"); 
$flags+=("--event-categories"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-export-tasks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--export-task-identifier"); 
$flags+=("--source-arn"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-global-clusters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-cluster-identifier"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-installation-media {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--installation-media-id"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-option-group-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--engine-name"); 
$flags+=("--major-engine-version"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-option-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--option-group-name"); 
$flags+=("--filters"); 
$flags+=("--engine-name"); 
$flags+=("--major-engine-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-orderable-db-instance-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--engine"); 
$flags+=("--engine-version"); 
$flags+=("--db-instance-class"); 
$flags+=("--license-model"); 
$flags+=("--availability-zone-group"); 
$flags+=("--vpc"); 
$flags+=("--no-vpc"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-pending-maintenance-actions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-identifier"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-reserved-db-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--reserved-db-instance-id"); 
$flags+=("--reserved-db-instances-offering-id"); 
$flags+=("--db-instance-class"); 
$flags+=("--duration"); 
$flags+=("--product-description"); 
$flags+=("--offering-type"); 
$flags+=("--multi-az"); 
$flags+=("--no-multi-az"); 
$flags+=("--lease-id"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-reserved-db-instances-offerings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--reserved-db-instances-offering-id"); 
$flags+=("--db-instance-class"); 
$flags+=("--duration"); 
$flags+=("--product-description"); 
$flags+=("--offering-type"); 
$flags+=("--multi-az"); 
$flags+=("--no-multi-az"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-source-regions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--region-name"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-describe-valid-db-instance-modifications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-download-db-log-file-portion {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--log-file-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-failover-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--target-db-instance-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-generate-db-auth-token {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hostname"); 
$flags+=("--port"); 
$flags+=("--username");

return $flags;
}

 function Get-rds-import-installation-media {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--custom-availability-zone-id"); 
$flags+=("--engine"); 
$flags+=("--engine-version"); 
$flags+=("--engine-installation-media-path"); 
$flags+=("--os-installation-media-path"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-modify-certificates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate-identifier"); 
$flags+=("--remove-customer-override"); 
$flags+=("--no-remove-customer-override"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-modify-current-db-cluster-capacity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--capacity"); 
$flags+=("--seconds-before-timeout"); 
$flags+=("--timeout-action"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-modify-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--new-db-cluster-identifier"); 
$flags+=("--apply-immediately"); 
$flags+=("--no-apply-immediately"); 
$flags+=("--backup-retention-period"); 
$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--port"); 
$flags+=("--master-user-password"); 
$flags+=("--option-group-name"); 
$flags+=("--preferred-backup-window"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--enable-iam-database-authentication"); 
$flags+=("--no-enable-iam-database-authentication"); 
$flags+=("--backtrack-window"); 
$flags+=("--cloudwatch-logs-export-configuration"); 
$flags+=("--engine-version"); 
$flags+=("--allow-major-version-upgrade"); 
$flags+=("--no-allow-major-version-upgrade"); 
$flags+=("--db-instance-parameter-group-name"); 
$flags+=("--domain"); 
$flags+=("--domain-iam-role-name"); 
$flags+=("--scaling-configuration"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--enable-http-endpoint"); 
$flags+=("--no-enable-http-endpoint"); 
$flags+=("--copy-tags-to-snapshot"); 
$flags+=("--no-copy-tags-to-snapshot"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-modify-db-cluster-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-endpoint-identifier"); 
$flags+=("--endpoint-type"); 
$flags+=("--static-members"); 
$flags+=("--excluded-members"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-modify-db-cluster-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-modify-db-cluster-snapshot-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-snapshot-identifier"); 
$flags+=("--attribute-name"); 
$flags+=("--values-to-add"); 
$flags+=("--values-to-remove"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-modify-db-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--allocated-storage"); 
$flags+=("--db-instance-class"); 
$flags+=("--db-subnet-group-name"); 
$flags+=("--db-security-groups"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--apply-immediately"); 
$flags+=("--no-apply-immediately"); 
$flags+=("--master-user-password"); 
$flags+=("--db-parameter-group-name"); 
$flags+=("--backup-retention-period"); 
$flags+=("--preferred-backup-window"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--multi-az"); 
$flags+=("--no-multi-az"); 
$flags+=("--engine-version"); 
$flags+=("--allow-major-version-upgrade"); 
$flags+=("--no-allow-major-version-upgrade"); 
$flags+=("--auto-minor-version-upgrade"); 
$flags+=("--no-auto-minor-version-upgrade"); 
$flags+=("--license-model"); 
$flags+=("--iops"); 
$flags+=("--option-group-name"); 
$flags+=("--new-db-instance-identifier"); 
$flags+=("--storage-type"); 
$flags+=("--tde-credential-arn"); 
$flags+=("--tde-credential-password"); 
$flags+=("--ca-certificate-identifier"); 
$flags+=("--domain"); 
$flags+=("--copy-tags-to-snapshot"); 
$flags+=("--no-copy-tags-to-snapshot"); 
$flags+=("--monitoring-interval"); 
$flags+=("--db-port-number"); 
$flags+=("--publicly-accessible"); 
$flags+=("--no-publicly-accessible"); 
$flags+=("--monitoring-role-arn"); 
$flags+=("--domain-iam-role-name"); 
$flags+=("--promotion-tier"); 
$flags+=("--enable-iam-database-authentication"); 
$flags+=("--no-enable-iam-database-authentication"); 
$flags+=("--enable-performance-insights"); 
$flags+=("--no-enable-performance-insights"); 
$flags+=("--performance-insights-kms-key-id"); 
$flags+=("--performance-insights-retention-period"); 
$flags+=("--cloudwatch-logs-export-configuration"); 
$flags+=("--processor-features"); 
$flags+=("--use-default-processor-features"); 
$flags+=("--no-use-default-processor-features"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--max-allocated-storage"); 
$flags+=("--certificate-rotation-restart"); 
$flags+=("--no-certificate-rotation-restart"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-modify-db-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-parameter-group-name"); 
$flags+=("--parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-modify-db-proxy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-proxy-name"); 
$flags+=("--new-db-proxy-name"); 
$flags+=("--auth"); 
$flags+=("--require-tls"); 
$flags+=("--no-require-tls"); 
$flags+=("--idle-client-timeout"); 
$flags+=("--debug-logging"); 
$flags+=("--no-debug-logging"); 
$flags+=("--role-arn"); 
$flags+=("--security-groups"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-modify-db-proxy-target-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--target-group-name"); 
$flags+=("--db-proxy-name"); 
$flags+=("--connection-pool-config"); 
$flags+=("--new-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-modify-db-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-snapshot-identifier"); 
$flags+=("--engine-version"); 
$flags+=("--option-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-modify-db-snapshot-attribute {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-snapshot-identifier"); 
$flags+=("--attribute-name"); 
$flags+=("--values-to-add"); 
$flags+=("--values-to-remove"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-modify-db-subnet-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-subnet-group-name"); 
$flags+=("--db-subnet-group-description"); 
$flags+=("--subnet-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-modify-event-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-name"); 
$flags+=("--sns-topic-arn"); 
$flags+=("--source-type"); 
$flags+=("--event-categories"); 
$flags+=("--enabled"); 
$flags+=("--no-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-modify-global-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-cluster-identifier"); 
$flags+=("--new-global-cluster-identifier"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-promote-read-replica {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--backup-retention-period"); 
$flags+=("--preferred-backup-window"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-promote-read-replica-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-purchase-reserved-db-instances-offering {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--reserved-db-instances-offering-id"); 
$flags+=("--reserved-db-instance-id"); 
$flags+=("--db-instance-count"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-reboot-db-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--force-failover"); 
$flags+=("--no-force-failover"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-register-db-proxy-targets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-proxy-name"); 
$flags+=("--target-group-name"); 
$flags+=("--db-instance-identifiers"); 
$flags+=("--db-cluster-identifiers"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-remove-from-global-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--global-cluster-identifier"); 
$flags+=("--db-cluster-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-remove-option-from-option-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--option-group-name"); 
$flags+=("--apply-immediately"); 
$flags+=("--no-apply-immediately"); 
$flags+=("--options"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-remove-role-from-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--role-arn"); 
$flags+=("--feature-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-remove-role-from-db-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--role-arn"); 
$flags+=("--feature-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-remove-source-identifier-from-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-name"); 
$flags+=("--source-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-remove-tags-from-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-reset-db-cluster-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--reset-all-parameters"); 
$flags+=("--no-reset-all-parameters"); 
$flags+=("--parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-reset-db-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-parameter-group-name"); 
$flags+=("--reset-all-parameters"); 
$flags+=("--no-reset-all-parameters"); 
$flags+=("--parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-restore-db-cluster-from-s3 {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--availability-zones"); 
$flags+=("--backup-retention-period"); 
$flags+=("--character-set-name"); 
$flags+=("--database-name"); 
$flags+=("--db-cluster-identifier"); 
$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--db-subnet-group-name"); 
$flags+=("--engine"); 
$flags+=("--engine-version"); 
$flags+=("--port"); 
$flags+=("--master-username"); 
$flags+=("--master-user-password"); 
$flags+=("--option-group-name"); 
$flags+=("--preferred-backup-window"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--tags"); 
$flags+=("--storage-encrypted"); 
$flags+=("--no-storage-encrypted"); 
$flags+=("--kms-key-id"); 
$flags+=("--enable-iam-database-authentication"); 
$flags+=("--no-enable-iam-database-authentication"); 
$flags+=("--source-engine"); 
$flags+=("--source-engine-version"); 
$flags+=("--s"); 
$flags+=("--s"); 
$flags+=("--s"); 
$flags+=("--backtrack-window"); 
$flags+=("--enable-cloudwatch-logs-exports"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--copy-tags-to-snapshot"); 
$flags+=("--no-copy-tags-to-snapshot"); 
$flags+=("--domain"); 
$flags+=("--domain-iam-role-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-restore-db-cluster-from-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--availability-zones"); 
$flags+=("--db-cluster-identifier"); 
$flags+=("--snapshot-identifier"); 
$flags+=("--engine"); 
$flags+=("--engine-version"); 
$flags+=("--port"); 
$flags+=("--db-subnet-group-name"); 
$flags+=("--database-name"); 
$flags+=("--option-group-name"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--tags"); 
$flags+=("--kms-key-id"); 
$flags+=("--enable-iam-database-authentication"); 
$flags+=("--no-enable-iam-database-authentication"); 
$flags+=("--backtrack-window"); 
$flags+=("--enable-cloudwatch-logs-exports"); 
$flags+=("--engine-mode"); 
$flags+=("--scaling-configuration"); 
$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--copy-tags-to-snapshot"); 
$flags+=("--no-copy-tags-to-snapshot"); 
$flags+=("--domain"); 
$flags+=("--domain-iam-role-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-restore-db-cluster-to-point-in-time {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--restore-type"); 
$flags+=("--source-db-cluster-identifier"); 
$flags+=("--restore-to-time"); 
$flags+=("--use-latest-restorable-time"); 
$flags+=("--no-use-latest-restorable-time"); 
$flags+=("--port"); 
$flags+=("--db-subnet-group-name"); 
$flags+=("--option-group-name"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--tags"); 
$flags+=("--kms-key-id"); 
$flags+=("--enable-iam-database-authentication"); 
$flags+=("--no-enable-iam-database-authentication"); 
$flags+=("--backtrack-window"); 
$flags+=("--enable-cloudwatch-logs-exports"); 
$flags+=("--db-cluster-parameter-group-name"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--copy-tags-to-snapshot"); 
$flags+=("--no-copy-tags-to-snapshot"); 
$flags+=("--domain"); 
$flags+=("--domain-iam-role-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-restore-db-instance-from-db-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--db-snapshot-identifier"); 
$flags+=("--db-instance-class"); 
$flags+=("--port"); 
$flags+=("--availability-zone"); 
$flags+=("--db-subnet-group-name"); 
$flags+=("--multi-az"); 
$flags+=("--no-multi-az"); 
$flags+=("--publicly-accessible"); 
$flags+=("--no-publicly-accessible"); 
$flags+=("--auto-minor-version-upgrade"); 
$flags+=("--no-auto-minor-version-upgrade"); 
$flags+=("--license-model"); 
$flags+=("--db-name"); 
$flags+=("--engine"); 
$flags+=("--iops"); 
$flags+=("--option-group-name"); 
$flags+=("--tags"); 
$flags+=("--storage-type"); 
$flags+=("--tde-credential-arn"); 
$flags+=("--tde-credential-password"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--domain"); 
$flags+=("--copy-tags-to-snapshot"); 
$flags+=("--no-copy-tags-to-snapshot"); 
$flags+=("--domain-iam-role-name"); 
$flags+=("--enable-iam-database-authentication"); 
$flags+=("--no-enable-iam-database-authentication"); 
$flags+=("--enable-cloudwatch-logs-exports"); 
$flags+=("--processor-features"); 
$flags+=("--use-default-processor-features"); 
$flags+=("--no-use-default-processor-features"); 
$flags+=("--db-parameter-group-name"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-restore-db-instance-from-s3 {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-name"); 
$flags+=("--db-instance-identifier"); 
$flags+=("--allocated-storage"); 
$flags+=("--db-instance-class"); 
$flags+=("--engine"); 
$flags+=("--master-username"); 
$flags+=("--master-user-password"); 
$flags+=("--db-security-groups"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--availability-zone"); 
$flags+=("--db-subnet-group-name"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--db-parameter-group-name"); 
$flags+=("--backup-retention-period"); 
$flags+=("--preferred-backup-window"); 
$flags+=("--port"); 
$flags+=("--multi-az"); 
$flags+=("--no-multi-az"); 
$flags+=("--engine-version"); 
$flags+=("--auto-minor-version-upgrade"); 
$flags+=("--no-auto-minor-version-upgrade"); 
$flags+=("--license-model"); 
$flags+=("--iops"); 
$flags+=("--option-group-name"); 
$flags+=("--publicly-accessible"); 
$flags+=("--no-publicly-accessible"); 
$flags+=("--tags"); 
$flags+=("--storage-type"); 
$flags+=("--storage-encrypted"); 
$flags+=("--no-storage-encrypted"); 
$flags+=("--kms-key-id"); 
$flags+=("--copy-tags-to-snapshot"); 
$flags+=("--no-copy-tags-to-snapshot"); 
$flags+=("--monitoring-interval"); 
$flags+=("--monitoring-role-arn"); 
$flags+=("--enable-iam-database-authentication"); 
$flags+=("--no-enable-iam-database-authentication"); 
$flags+=("--source-engine"); 
$flags+=("--source-engine-version"); 
$flags+=("--s"); 
$flags+=("--s"); 
$flags+=("--s"); 
$flags+=("--enable-performance-insights"); 
$flags+=("--no-enable-performance-insights"); 
$flags+=("--performance-insights-kms-key-id"); 
$flags+=("--performance-insights-retention-period"); 
$flags+=("--enable-cloudwatch-logs-exports"); 
$flags+=("--processor-features"); 
$flags+=("--use-default-processor-features"); 
$flags+=("--no-use-default-processor-features"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-restore-db-instance-to-point-in-time {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-db-instance-identifier"); 
$flags+=("--target-db-instance-identifier"); 
$flags+=("--restore-time"); 
$flags+=("--use-latest-restorable-time"); 
$flags+=("--no-use-latest-restorable-time"); 
$flags+=("--db-instance-class"); 
$flags+=("--port"); 
$flags+=("--availability-zone"); 
$flags+=("--db-subnet-group-name"); 
$flags+=("--multi-az"); 
$flags+=("--no-multi-az"); 
$flags+=("--publicly-accessible"); 
$flags+=("--no-publicly-accessible"); 
$flags+=("--auto-minor-version-upgrade"); 
$flags+=("--no-auto-minor-version-upgrade"); 
$flags+=("--license-model"); 
$flags+=("--db-name"); 
$flags+=("--engine"); 
$flags+=("--iops"); 
$flags+=("--option-group-name"); 
$flags+=("--copy-tags-to-snapshot"); 
$flags+=("--no-copy-tags-to-snapshot"); 
$flags+=("--tags"); 
$flags+=("--storage-type"); 
$flags+=("--tde-credential-arn"); 
$flags+=("--tde-credential-password"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--domain"); 
$flags+=("--domain-iam-role-name"); 
$flags+=("--enable-iam-database-authentication"); 
$flags+=("--no-enable-iam-database-authentication"); 
$flags+=("--enable-cloudwatch-logs-exports"); 
$flags+=("--processor-features"); 
$flags+=("--use-default-processor-features"); 
$flags+=("--no-use-default-processor-features"); 
$flags+=("--db-parameter-group-name"); 
$flags+=("--deletion-protection"); 
$flags+=("--no-deletion-protection"); 
$flags+=("--source-dbi-resource-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-revoke-db-security-group-ingress {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-security-group-name"); 
$flags+=("--cidrip"); 
$flags+=("--ec"); 
$flags+=("--ec"); 
$flags+=("--ec"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-start-activity-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--mode"); 
$flags+=("--kms-key-id"); 
$flags+=("--apply-immediately"); 
$flags+=("--no-apply-immediately"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-start-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-start-db-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-start-export-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--export-task-identifier"); 
$flags+=("--source-arn"); 
$flags+=("--s"); 
$flags+=("--iam-role-arn"); 
$flags+=("--kms-key-id"); 
$flags+=("--s"); 
$flags+=("--export-only"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-stop-activity-stream {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--apply-immediately"); 
$flags+=("--no-apply-immediately"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-stop-db-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-cluster-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-stop-db-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-instance-identifier"); 
$flags+=("--db-snapshot-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-rds-data {
    $commands = [System.Collections.ArrayList]@();

$commands+=("batch-execute-statement"); 
$commands+=("begin-transaction"); 
$commands+=("commit-transaction"); 
$commands+=("execute-statement"); 
$commands+=("rollback-transaction");

return $commands;
}

 function Get-rds-data-batch-execute-statement {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--database"); 
$flags+=("--parameter-sets"); 
$flags+=("--resource-arn"); 
$flags+=("--schema"); 
$flags+=("--secret-arn"); 
$flags+=("--sql"); 
$flags+=("--transaction-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-data-begin-transaction {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--database"); 
$flags+=("--resource-arn"); 
$flags+=("--schema"); 
$flags+=("--secret-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-data-commit-transaction {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--secret-arn"); 
$flags+=("--transaction-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-data-execute-statement {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--continue-after-timeout"); 
$flags+=("--no-continue-after-timeout"); 
$flags+=("--database"); 
$flags+=("--include-result-metadata"); 
$flags+=("--no-include-result-metadata"); 
$flags+=("--parameters"); 
$flags+=("--resource-arn"); 
$flags+=("--result-set-options"); 
$flags+=("--schema"); 
$flags+=("--secret-arn"); 
$flags+=("--sql"); 
$flags+=("--transaction-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rds-data-rollback-transaction {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--secret-arn"); 
$flags+=("--transaction-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift {
    $commands = [System.Collections.ArrayList]@();

$commands+=("accept-reserved-node-exchange"); 
$commands+=("authorize-cluster-security-group-ingress"); 
$commands+=("authorize-snapshot-access"); 
$commands+=("batch-delete-cluster-snapshots"); 
$commands+=("batch-modify-cluster-snapshots"); 
$commands+=("cancel-resize"); 
$commands+=("copy-cluster-snapshot"); 
$commands+=("create-cluster"); 
$commands+=("create-cluster-parameter-group"); 
$commands+=("create-cluster-security-group"); 
$commands+=("create-cluster-snapshot"); 
$commands+=("create-cluster-subnet-group"); 
$commands+=("create-event-subscription"); 
$commands+=("create-hsm-client-certificate"); 
$commands+=("create-hsm-configuration"); 
$commands+=("create-scheduled-action"); 
$commands+=("create-snapshot-copy-grant"); 
$commands+=("create-snapshot-schedule"); 
$commands+=("create-tags"); 
$commands+=("create-usage-limit"); 
$commands+=("delete-cluster"); 
$commands+=("delete-cluster-parameter-group"); 
$commands+=("delete-cluster-security-group"); 
$commands+=("delete-cluster-snapshot"); 
$commands+=("delete-cluster-subnet-group"); 
$commands+=("delete-event-subscription"); 
$commands+=("delete-hsm-client-certificate"); 
$commands+=("delete-hsm-configuration"); 
$commands+=("delete-scheduled-action"); 
$commands+=("delete-snapshot-copy-grant"); 
$commands+=("delete-snapshot-schedule"); 
$commands+=("delete-tags"); 
$commands+=("delete-usage-limit"); 
$commands+=("describe-account-attributes"); 
$commands+=("describe-cluster-db-revisions"); 
$commands+=("describe-cluster-parameter-groups"); 
$commands+=("describe-cluster-parameters"); 
$commands+=("describe-cluster-security-groups"); 
$commands+=("describe-cluster-snapshots"); 
$commands+=("describe-cluster-subnet-groups"); 
$commands+=("describe-cluster-tracks"); 
$commands+=("describe-cluster-versions"); 
$commands+=("describe-clusters"); 
$commands+=("describe-default-cluster-parameters"); 
$commands+=("describe-event-categories"); 
$commands+=("describe-event-subscriptions"); 
$commands+=("describe-events"); 
$commands+=("describe-hsm-client-certificates"); 
$commands+=("describe-hsm-configurations"); 
$commands+=("describe-logging-status"); 
$commands+=("describe-node-configuration-options"); 
$commands+=("describe-orderable-cluster-options"); 
$commands+=("describe-reserved-node-offerings"); 
$commands+=("describe-reserved-nodes"); 
$commands+=("describe-resize"); 
$commands+=("describe-scheduled-actions"); 
$commands+=("describe-snapshot-copy-grants"); 
$commands+=("describe-snapshot-schedules"); 
$commands+=("describe-storage"); 
$commands+=("describe-table-restore-status"); 
$commands+=("describe-tags"); 
$commands+=("describe-usage-limits"); 
$commands+=("disable-logging"); 
$commands+=("disable-snapshot-copy"); 
$commands+=("enable-logging"); 
$commands+=("enable-snapshot-copy"); 
$commands+=("get-cluster-credentials"); 
$commands+=("get-reserved-node-exchange-offerings"); 
$commands+=("modify-cluster"); 
$commands+=("modify-cluster-db-revision"); 
$commands+=("modify-cluster-iam-roles"); 
$commands+=("modify-cluster-maintenance"); 
$commands+=("modify-cluster-parameter-group"); 
$commands+=("modify-cluster-snapshot"); 
$commands+=("modify-cluster-snapshot-schedule"); 
$commands+=("modify-cluster-subnet-group"); 
$commands+=("modify-event-subscription"); 
$commands+=("modify-scheduled-action"); 
$commands+=("modify-snapshot-copy-retention-period"); 
$commands+=("modify-snapshot-schedule"); 
$commands+=("modify-usage-limit"); 
$commands+=("pause-cluster"); 
$commands+=("purchase-reserved-node-offering"); 
$commands+=("reboot-cluster"); 
$commands+=("reset-cluster-parameter-group"); 
$commands+=("resize-cluster"); 
$commands+=("restore-from-cluster-snapshot"); 
$commands+=("restore-table-from-cluster-snapshot"); 
$commands+=("resume-cluster"); 
$commands+=("revoke-cluster-security-group-ingress"); 
$commands+=("revoke-snapshot-access"); 
$commands+=("rotate-encryption-key"); 
$commands+=("wait");

return $commands;
}

 function Get-redshift-accept-reserved-node-exchange {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--reserved-node-id"); 
$flags+=("--target-reserved-node-offering-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-authorize-cluster-security-group-ingress {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-security-group-name"); 
$flags+=("--cidrip"); 
$flags+=("--ec"); 
$flags+=("--ec"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-authorize-snapshot-access {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--snapshot-identifier"); 
$flags+=("--snapshot-cluster-identifier"); 
$flags+=("--account-with-restore-access"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-batch-delete-cluster-snapshots {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identifiers"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-batch-modify-cluster-snapshots {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--snapshot-identifier-list"); 
$flags+=("--manual-snapshot-retention-period"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-cancel-resize {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-copy-cluster-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-snapshot-identifier"); 
$flags+=("--source-snapshot-cluster-identifier"); 
$flags+=("--target-snapshot-identifier"); 
$flags+=("--manual-snapshot-retention-period"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-create-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-name"); 
$flags+=("--cluster-identifier"); 
$flags+=("--cluster-type"); 
$flags+=("--node-type"); 
$flags+=("--master-username"); 
$flags+=("--master-user-password"); 
$flags+=("--cluster-security-groups"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--cluster-subnet-group-name"); 
$flags+=("--availability-zone"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--cluster-parameter-group-name"); 
$flags+=("--automated-snapshot-retention-period"); 
$flags+=("--manual-snapshot-retention-period"); 
$flags+=("--port"); 
$flags+=("--cluster-version"); 
$flags+=("--allow-version-upgrade"); 
$flags+=("--no-allow-version-upgrade"); 
$flags+=("--number-of-nodes"); 
$flags+=("--publicly-accessible"); 
$flags+=("--no-publicly-accessible"); 
$flags+=("--encrypted"); 
$flags+=("--no-encrypted"); 
$flags+=("--hsm-client-certificate-identifier"); 
$flags+=("--hsm-configuration-identifier"); 
$flags+=("--elastic-ip"); 
$flags+=("--tags"); 
$flags+=("--kms-key-id"); 
$flags+=("--enhanced-vpc-routing"); 
$flags+=("--no-enhanced-vpc-routing"); 
$flags+=("--additional-info"); 
$flags+=("--iam-roles"); 
$flags+=("--maintenance-track-name"); 
$flags+=("--snapshot-schedule-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-create-cluster-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--parameter-group-name"); 
$flags+=("--parameter-group-family"); 
$flags+=("--description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-create-cluster-security-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-security-group-name"); 
$flags+=("--description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-create-cluster-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--snapshot-identifier"); 
$flags+=("--cluster-identifier"); 
$flags+=("--manual-snapshot-retention-period"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-create-cluster-subnet-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-subnet-group-name"); 
$flags+=("--description"); 
$flags+=("--subnet-ids"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-create-event-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-name"); 
$flags+=("--sns-topic-arn"); 
$flags+=("--source-type"); 
$flags+=("--source-ids"); 
$flags+=("--event-categories"); 
$flags+=("--severity"); 
$flags+=("--enabled"); 
$flags+=("--no-enabled"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-create-hsm-client-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hsm-client-certificate-identifier"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-create-hsm-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hsm-configuration-identifier"); 
$flags+=("--description"); 
$flags+=("--hsm-ip-address"); 
$flags+=("--hsm-partition-name"); 
$flags+=("--hsm-partition-password"); 
$flags+=("--hsm-server-public-certificate"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-create-scheduled-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--scheduled-action-name"); 
$flags+=("--target-action"); 
$flags+=("--schedule"); 
$flags+=("--iam-role"); 
$flags+=("--scheduled-action-description"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--enable"); 
$flags+=("--no-enable"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-create-snapshot-copy-grant {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--snapshot-copy-grant-name"); 
$flags+=("--kms-key-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-create-snapshot-schedule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schedule-definitions"); 
$flags+=("--schedule-identifier"); 
$flags+=("--schedule-description"); 
$flags+=("--tags"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--next-invocations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-create-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-create-usage-limit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--feature-type"); 
$flags+=("--limit-type"); 
$flags+=("--amount"); 
$flags+=("--period"); 
$flags+=("--breach-action"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-delete-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--skip-final-cluster-snapshot"); 
$flags+=("--no-skip-final-cluster-snapshot"); 
$flags+=("--final-cluster-snapshot-identifier"); 
$flags+=("--final-cluster-snapshot-retention-period"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-delete-cluster-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--parameter-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-delete-cluster-security-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-security-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-delete-cluster-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--snapshot-identifier"); 
$flags+=("--snapshot-cluster-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-delete-cluster-subnet-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-subnet-group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-delete-event-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-delete-hsm-client-certificate {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hsm-client-certificate-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-delete-hsm-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hsm-configuration-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-delete-scheduled-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--scheduled-action-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-delete-snapshot-copy-grant {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--snapshot-copy-grant-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-delete-snapshot-schedule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schedule-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-delete-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-delete-usage-limit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--usage-limit-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-account-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--attribute-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-cluster-db-revisions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-cluster-parameter-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--parameter-group-name"); 
$flags+=("--tag-keys"); 
$flags+=("--tag-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-cluster-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--parameter-group-name"); 
$flags+=("--source"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-cluster-security-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-security-group-name"); 
$flags+=("--tag-keys"); 
$flags+=("--tag-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-cluster-snapshots {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--snapshot-identifier"); 
$flags+=("--snapshot-type"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--owner-account"); 
$flags+=("--tag-keys"); 
$flags+=("--tag-values"); 
$flags+=("--cluster-exists"); 
$flags+=("--no-cluster-exists"); 
$flags+=("--sorting-entities"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-cluster-subnet-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-subnet-group-name"); 
$flags+=("--tag-keys"); 
$flags+=("--tag-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-cluster-tracks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--maintenance-track-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-cluster-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-version"); 
$flags+=("--cluster-parameter-group-family"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-clusters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--tag-keys"); 
$flags+=("--tag-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-default-cluster-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--parameter-group-family"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-event-categories {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-event-subscriptions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-name"); 
$flags+=("--tag-keys"); 
$flags+=("--tag-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-events {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-identifier"); 
$flags+=("--source-type"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--duration"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-hsm-client-certificates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hsm-client-certificate-identifier"); 
$flags+=("--tag-keys"); 
$flags+=("--tag-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-hsm-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hsm-configuration-identifier"); 
$flags+=("--tag-keys"); 
$flags+=("--tag-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-logging-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-node-configuration-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--action-type"); 
$flags+=("--cluster-identifier"); 
$flags+=("--snapshot-identifier"); 
$flags+=("--owner-account"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-orderable-cluster-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-version"); 
$flags+=("--node-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-reserved-node-offerings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--reserved-node-offering-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-reserved-nodes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--reserved-node-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-resize {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-scheduled-actions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--scheduled-action-name"); 
$flags+=("--target-action-type"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--active"); 
$flags+=("--no-active"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-snapshot-copy-grants {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--snapshot-copy-grant-name"); 
$flags+=("--tag-keys"); 
$flags+=("--tag-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-snapshot-schedules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--schedule-identifier"); 
$flags+=("--tag-keys"); 
$flags+=("--tag-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-storage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-table-restore-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--table-restore-request-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-name"); 
$flags+=("--resource-type"); 
$flags+=("--tag-keys"); 
$flags+=("--tag-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-describe-usage-limits {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--usage-limit-id"); 
$flags+=("--cluster-identifier"); 
$flags+=("--feature-type"); 
$flags+=("--tag-keys"); 
$flags+=("--tag-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-disable-logging {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-disable-snapshot-copy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-enable-logging {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--bucket-name"); 
$flags+=("--s"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-enable-snapshot-copy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--destination-region"); 
$flags+=("--retention-period"); 
$flags+=("--snapshot-copy-grant-name"); 
$flags+=("--manual-snapshot-retention-period"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-get-cluster-credentials {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--db-user"); 
$flags+=("--db-name"); 
$flags+=("--cluster-identifier"); 
$flags+=("--duration-seconds"); 
$flags+=("--auto-create"); 
$flags+=("--no-auto-create"); 
$flags+=("--db-groups"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-get-reserved-node-exchange-offerings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--reserved-node-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-modify-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--cluster-type"); 
$flags+=("--node-type"); 
$flags+=("--number-of-nodes"); 
$flags+=("--cluster-security-groups"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--master-user-password"); 
$flags+=("--cluster-parameter-group-name"); 
$flags+=("--automated-snapshot-retention-period"); 
$flags+=("--manual-snapshot-retention-period"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--cluster-version"); 
$flags+=("--allow-version-upgrade"); 
$flags+=("--no-allow-version-upgrade"); 
$flags+=("--hsm-client-certificate-identifier"); 
$flags+=("--hsm-configuration-identifier"); 
$flags+=("--new-cluster-identifier"); 
$flags+=("--publicly-accessible"); 
$flags+=("--no-publicly-accessible"); 
$flags+=("--elastic-ip"); 
$flags+=("--enhanced-vpc-routing"); 
$flags+=("--no-enhanced-vpc-routing"); 
$flags+=("--maintenance-track-name"); 
$flags+=("--encrypted"); 
$flags+=("--no-encrypted"); 
$flags+=("--kms-key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-modify-cluster-db-revision {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--revision-target"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-modify-cluster-iam-roles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--add-iam-roles"); 
$flags+=("--remove-iam-roles"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-modify-cluster-maintenance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--defer-maintenance"); 
$flags+=("--no-defer-maintenance"); 
$flags+=("--defer-maintenance-identifier"); 
$flags+=("--defer-maintenance-start-time"); 
$flags+=("--defer-maintenance-end-time"); 
$flags+=("--defer-maintenance-duration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-modify-cluster-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--parameter-group-name"); 
$flags+=("--parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-modify-cluster-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--snapshot-identifier"); 
$flags+=("--manual-snapshot-retention-period"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-modify-cluster-snapshot-schedule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--schedule-identifier"); 
$flags+=("--disassociate-schedule"); 
$flags+=("--no-disassociate-schedule"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-modify-cluster-subnet-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-subnet-group-name"); 
$flags+=("--description"); 
$flags+=("--subnet-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-modify-event-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-name"); 
$flags+=("--sns-topic-arn"); 
$flags+=("--source-type"); 
$flags+=("--source-ids"); 
$flags+=("--event-categories"); 
$flags+=("--severity"); 
$flags+=("--enabled"); 
$flags+=("--no-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-modify-scheduled-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--scheduled-action-name"); 
$flags+=("--target-action"); 
$flags+=("--schedule"); 
$flags+=("--iam-role"); 
$flags+=("--scheduled-action-description"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--enable"); 
$flags+=("--no-enable"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-modify-snapshot-copy-retention-period {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--retention-period"); 
$flags+=("--manual"); 
$flags+=("--no-manual"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-modify-snapshot-schedule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--schedule-identifier"); 
$flags+=("--schedule-definitions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-modify-usage-limit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--usage-limit-id"); 
$flags+=("--amount"); 
$flags+=("--breach-action"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-pause-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-purchase-reserved-node-offering {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--reserved-node-offering-id"); 
$flags+=("--node-count"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-reboot-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-reset-cluster-parameter-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--parameter-group-name"); 
$flags+=("--reset-all-parameters"); 
$flags+=("--no-reset-all-parameters"); 
$flags+=("--parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-resize-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--cluster-type"); 
$flags+=("--node-type"); 
$flags+=("--number-of-nodes"); 
$flags+=("--classic"); 
$flags+=("--no-classic"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-restore-from-cluster-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--snapshot-identifier"); 
$flags+=("--snapshot-cluster-identifier"); 
$flags+=("--port"); 
$flags+=("--availability-zone"); 
$flags+=("--allow-version-upgrade"); 
$flags+=("--no-allow-version-upgrade"); 
$flags+=("--cluster-subnet-group-name"); 
$flags+=("--publicly-accessible"); 
$flags+=("--no-publicly-accessible"); 
$flags+=("--owner-account"); 
$flags+=("--hsm-client-certificate-identifier"); 
$flags+=("--hsm-configuration-identifier"); 
$flags+=("--elastic-ip"); 
$flags+=("--cluster-parameter-group-name"); 
$flags+=("--cluster-security-groups"); 
$flags+=("--vpc-security-group-ids"); 
$flags+=("--preferred-maintenance-window"); 
$flags+=("--automated-snapshot-retention-period"); 
$flags+=("--manual-snapshot-retention-period"); 
$flags+=("--kms-key-id"); 
$flags+=("--node-type"); 
$flags+=("--enhanced-vpc-routing"); 
$flags+=("--no-enhanced-vpc-routing"); 
$flags+=("--additional-info"); 
$flags+=("--iam-roles"); 
$flags+=("--maintenance-track-name"); 
$flags+=("--snapshot-schedule-identifier"); 
$flags+=("--number-of-nodes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-restore-table-from-cluster-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--snapshot-identifier"); 
$flags+=("--source-database-name"); 
$flags+=("--source-schema-name"); 
$flags+=("--source-table-name"); 
$flags+=("--target-database-name"); 
$flags+=("--target-schema-name"); 
$flags+=("--new-table-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-resume-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-revoke-cluster-security-group-ingress {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-security-group-name"); 
$flags+=("--cidrip"); 
$flags+=("--ec"); 
$flags+=("--ec"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-revoke-snapshot-access {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--snapshot-identifier"); 
$flags+=("--snapshot-cluster-identifier"); 
$flags+=("--account-with-restore-access"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-rotate-encryption-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-identifier"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-redshift-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-rekognition {
    $commands = [System.Collections.ArrayList]@();

$commands+=("compare-faces"); 
$commands+=("create-collection"); 
$commands+=("create-project"); 
$commands+=("create-project-version"); 
$commands+=("create-stream-processor"); 
$commands+=("delete-collection"); 
$commands+=("delete-faces"); 
$commands+=("delete-project"); 
$commands+=("delete-project-version"); 
$commands+=("delete-stream-processor"); 
$commands+=("describe-collection"); 
$commands+=("describe-project-versions"); 
$commands+=("describe-projects"); 
$commands+=("describe-stream-processor"); 
$commands+=("detect-custom-labels"); 
$commands+=("detect-faces"); 
$commands+=("detect-labels"); 
$commands+=("detect-moderation-labels"); 
$commands+=("detect-text"); 
$commands+=("get-celebrity-info"); 
$commands+=("get-celebrity-recognition"); 
$commands+=("get-content-moderation"); 
$commands+=("get-face-detection"); 
$commands+=("get-face-search"); 
$commands+=("get-label-detection"); 
$commands+=("get-person-tracking"); 
$commands+=("get-text-detection"); 
$commands+=("index-faces"); 
$commands+=("list-collections"); 
$commands+=("list-faces"); 
$commands+=("list-stream-processors"); 
$commands+=("recognize-celebrities"); 
$commands+=("search-faces"); 
$commands+=("search-faces-by-image"); 
$commands+=("start-celebrity-recognition"); 
$commands+=("start-content-moderation"); 
$commands+=("start-face-detection"); 
$commands+=("start-face-search"); 
$commands+=("start-label-detection"); 
$commands+=("start-person-tracking"); 
$commands+=("start-project-version"); 
$commands+=("start-stream-processor"); 
$commands+=("start-text-detection"); 
$commands+=("stop-project-version"); 
$commands+=("stop-stream-processor"); 
$commands+=("wait");

return $commands;
}

 function Get-rekognition-compare-faces {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-image"); 
$flags+=("--target-image"); 
$flags+=("--similarity-threshold"); 
$flags+=("--quality-filter"); 
$flags+=("--target-image-bytes"); 
$flags+=("--source-image-bytes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-create-collection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--collection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-create-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-create-project-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-arn"); 
$flags+=("--version-name"); 
$flags+=("--output-config"); 
$flags+=("--training-data"); 
$flags+=("--testing-data"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-create-stream-processor {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--input"); 
$flags+=("--name"); 
$flags+=("--settings"); 
$flags+=("--role-arn"); 
$flags+=("--stream-processor-output"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-delete-collection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--collection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-delete-faces {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--collection-id"); 
$flags+=("--face-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-delete-project {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-delete-project-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-version-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-delete-stream-processor {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-describe-collection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--collection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-describe-project-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-arn"); 
$flags+=("--version-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-describe-projects {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-describe-stream-processor {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-detect-custom-labels {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-version-arn"); 
$flags+=("--image"); 
$flags+=("--max-results"); 
$flags+=("--min-confidence"); 
$flags+=("--image-bytes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-detect-faces {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image"); 
$flags+=("--attributes"); 
$flags+=("--image-bytes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-detect-labels {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image"); 
$flags+=("--max-labels"); 
$flags+=("--min-confidence"); 
$flags+=("--image-bytes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-detect-moderation-labels {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image"); 
$flags+=("--min-confidence"); 
$flags+=("--human-loop-config"); 
$flags+=("--image-bytes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-detect-text {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image"); 
$flags+=("--filters"); 
$flags+=("--image-bytes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-get-celebrity-info {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-get-celebrity-recognition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--sort-by"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-get-content-moderation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--sort-by"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-get-face-detection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-get-face-search {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--sort-by"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-get-label-detection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--sort-by"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-get-person-tracking {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--sort-by"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-get-text-detection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-index-faces {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--collection-id"); 
$flags+=("--image"); 
$flags+=("--external-image-id"); 
$flags+=("--detection-attributes"); 
$flags+=("--max-faces"); 
$flags+=("--quality-filter"); 
$flags+=("--image-bytes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-list-collections {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-list-faces {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--collection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-list-stream-processors {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-recognize-celebrities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image"); 
$flags+=("--image-bytes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-search-faces {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--collection-id"); 
$flags+=("--face-id"); 
$flags+=("--max-faces"); 
$flags+=("--face-match-threshold"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-search-faces-by-image {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--collection-id"); 
$flags+=("--image"); 
$flags+=("--max-faces"); 
$flags+=("--face-match-threshold"); 
$flags+=("--quality-filter"); 
$flags+=("--image-bytes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-start-celebrity-recognition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--video"); 
$flags+=("--client-request-token"); 
$flags+=("--notification-channel"); 
$flags+=("--job-tag"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-start-content-moderation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--video"); 
$flags+=("--min-confidence"); 
$flags+=("--client-request-token"); 
$flags+=("--notification-channel"); 
$flags+=("--job-tag"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-start-face-detection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--video"); 
$flags+=("--client-request-token"); 
$flags+=("--notification-channel"); 
$flags+=("--face-attributes"); 
$flags+=("--job-tag"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-start-face-search {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--video"); 
$flags+=("--client-request-token"); 
$flags+=("--face-match-threshold"); 
$flags+=("--collection-id"); 
$flags+=("--notification-channel"); 
$flags+=("--job-tag"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-start-label-detection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--video"); 
$flags+=("--client-request-token"); 
$flags+=("--min-confidence"); 
$flags+=("--notification-channel"); 
$flags+=("--job-tag"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-start-person-tracking {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--video"); 
$flags+=("--client-request-token"); 
$flags+=("--notification-channel"); 
$flags+=("--job-tag"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-start-project-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-version-arn"); 
$flags+=("--min-inference-units"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-start-stream-processor {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-start-text-detection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--video"); 
$flags+=("--client-request-token"); 
$flags+=("--notification-channel"); 
$flags+=("--job-tag"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-stop-project-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--project-version-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-stop-stream-processor {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-rekognition-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-resource-groups {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-group"); 
$commands+=("delete-group"); 
$commands+=("get-group"); 
$commands+=("get-group-query"); 
$commands+=("get-tags"); 
$commands+=("list-group-resources"); 
$commands+=("list-groups"); 
$commands+=("search-resources"); 
$commands+=("tag"); 
$commands+=("untag"); 
$commands+=("update-group"); 
$commands+=("update-group-query");

return $commands;
}

 function Get-resource-groups-create-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--resource-query"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-resource-groups-delete-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-resource-groups-get-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-resource-groups-get-group-query {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-resource-groups-get-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-resource-groups-list-group-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-resource-groups-list-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-resource-groups-search-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-query"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-resource-groups-tag {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-resource-groups-untag {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-resource-groups-update-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-resource-groups-update-group-query {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--resource-query"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-resourcegroupstaggingapi {
    $commands = [System.Collections.ArrayList]@();

$commands+=("describe-report-creation"); 
$commands+=("get-compliance-summary"); 
$commands+=("get-resources"); 
$commands+=("get-tag-keys"); 
$commands+=("get-tag-values"); 
$commands+=("start-report-creation"); 
$commands+=("tag-resources"); 
$commands+=("untag-resources");

return $commands;
}

 function Get-resourcegroupstaggingapi-describe-report-creation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-resourcegroupstaggingapi-get-compliance-summary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--target-id-filters"); 
$flags+=("--region-filters"); 
$flags+=("--resource-type-filters"); 
$flags+=("--tag-key-filters"); 
$flags+=("--group-by"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-resourcegroupstaggingapi-get-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--tag-filters"); 
$flags+=("--tags-per-page"); 
$flags+=("--resource-type-filters"); 
$flags+=("--include-compliance-details"); 
$flags+=("--no-include-compliance-details"); 
$flags+=("--exclude-compliant-resources"); 
$flags+=("--no-exclude-compliant-resources"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-resourcegroupstaggingapi-get-tag-keys {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-resourcegroupstaggingapi-get-tag-values {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-resourcegroupstaggingapi-start-report-creation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--s"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-resourcegroupstaggingapi-tag-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn-list"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-resourcegroupstaggingapi-untag-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn-list"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker {
    $commands = [System.Collections.ArrayList]@();

$commands+=("batch-describe-simulation-job"); 
$commands+=("cancel-deployment-job"); 
$commands+=("cancel-simulation-job"); 
$commands+=("cancel-simulation-job-batch"); 
$commands+=("create-deployment-job"); 
$commands+=("create-fleet"); 
$commands+=("create-robot"); 
$commands+=("create-robot-application"); 
$commands+=("create-robot-application-version"); 
$commands+=("create-simulation-application"); 
$commands+=("create-simulation-application-version"); 
$commands+=("create-simulation-job"); 
$commands+=("delete-fleet"); 
$commands+=("delete-robot"); 
$commands+=("delete-robot-application"); 
$commands+=("delete-simulation-application"); 
$commands+=("deregister-robot"); 
$commands+=("describe-deployment-job"); 
$commands+=("describe-fleet"); 
$commands+=("describe-robot"); 
$commands+=("describe-robot-application"); 
$commands+=("describe-simulation-application"); 
$commands+=("describe-simulation-job"); 
$commands+=("describe-simulation-job-batch"); 
$commands+=("list-deployment-jobs"); 
$commands+=("list-fleets"); 
$commands+=("list-robot-applications"); 
$commands+=("list-robots"); 
$commands+=("list-simulation-applications"); 
$commands+=("list-simulation-job-batches"); 
$commands+=("list-simulation-jobs"); 
$commands+=("list-tags-for-resource"); 
$commands+=("register-robot"); 
$commands+=("restart-simulation-job"); 
$commands+=("start-simulation-job-batch"); 
$commands+=("sync-deployment-job"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-robot-application"); 
$commands+=("update-simulation-application");

return $commands;
}

 function Get-robomaker-batch-describe-simulation-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--jobs"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-cancel-deployment-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-cancel-simulation-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-cancel-simulation-job-batch {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--batch"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-create-deployment-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--deployment-config"); 
$flags+=("--client-request-token"); 
$flags+=("--fleet"); 
$flags+=("--deployment-application-configs"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-create-fleet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-create-robot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--architecture"); 
$flags+=("--greengrass-group-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-create-robot-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--sources"); 
$flags+=("--robot-software-suite"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-create-robot-application-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application"); 
$flags+=("--current-revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-create-simulation-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--sources"); 
$flags+=("--simulation-software-suite"); 
$flags+=("--robot-software-suite"); 
$flags+=("--rendering-engine"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-create-simulation-application-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application"); 
$flags+=("--current-revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-create-simulation-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-request-token"); 
$flags+=("--output-location"); 
$flags+=("--logging-config"); 
$flags+=("--max-job-duration-in-seconds"); 
$flags+=("--iam-role"); 
$flags+=("--failure-behavior"); 
$flags+=("--robot-applications"); 
$flags+=("--simulation-applications"); 
$flags+=("--data-sources"); 
$flags+=("--tags"); 
$flags+=("--vpc-config"); 
$flags+=("--compute"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-delete-fleet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-delete-robot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--robot"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-delete-robot-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application"); 
$flags+=("--application-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-delete-simulation-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application"); 
$flags+=("--application-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-deregister-robot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet"); 
$flags+=("--robot"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-describe-deployment-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-describe-fleet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-describe-robot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--robot"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-describe-robot-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application"); 
$flags+=("--application-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-describe-simulation-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application"); 
$flags+=("--application-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-describe-simulation-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-describe-simulation-job-batch {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--batch"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-list-deployment-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-list-fleets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-list-robot-applications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--version-qualifier"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-list-robots {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-list-simulation-applications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--version-qualifier"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-list-simulation-job-batches {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-list-simulation-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-register-robot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet"); 
$flags+=("--robot"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-restart-simulation-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-start-simulation-job-batch {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-request-token"); 
$flags+=("--batch-policy"); 
$flags+=("--create-simulation-job-requests"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-sync-deployment-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-request-token"); 
$flags+=("--fleet"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-update-robot-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application"); 
$flags+=("--sources"); 
$flags+=("--robot-software-suite"); 
$flags+=("--current-revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-robomaker-update-simulation-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application"); 
$flags+=("--sources"); 
$flags+=("--simulation-software-suite"); 
$flags+=("--robot-software-suite"); 
$flags+=("--rendering-engine"); 
$flags+=("--current-revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53 {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-vpc-with-hosted-zone"); 
$commands+=("change-resource-record-sets"); 
$commands+=("change-tags-for-resource"); 
$commands+=("create-health-check"); 
$commands+=("create-hosted-zone"); 
$commands+=("create-query-logging-config"); 
$commands+=("create-reusable-delegation-set"); 
$commands+=("create-traffic-policy"); 
$commands+=("create-traffic-policy-instance"); 
$commands+=("create-traffic-policy-version"); 
$commands+=("create-vpc-association-authorization"); 
$commands+=("delete-health-check"); 
$commands+=("delete-hosted-zone"); 
$commands+=("delete-query-logging-config"); 
$commands+=("delete-reusable-delegation-set"); 
$commands+=("delete-traffic-policy"); 
$commands+=("delete-traffic-policy-instance"); 
$commands+=("delete-vpc-association-authorization"); 
$commands+=("disassociate-vpc-from-hosted-zone"); 
$commands+=("get-account-limit"); 
$commands+=("get-change"); 
$commands+=("get-checker-ip-ranges"); 
$commands+=("get-geo-location"); 
$commands+=("get-health-check"); 
$commands+=("get-health-check-count"); 
$commands+=("get-health-check-last-failure-reason"); 
$commands+=("get-health-check-status"); 
$commands+=("get-hosted-zone"); 
$commands+=("get-hosted-zone-count"); 
$commands+=("get-hosted-zone-limit"); 
$commands+=("get-query-logging-config"); 
$commands+=("get-reusable-delegation-set"); 
$commands+=("get-reusable-delegation-set-limit"); 
$commands+=("get-traffic-policy"); 
$commands+=("get-traffic-policy-instance"); 
$commands+=("get-traffic-policy-instance-count"); 
$commands+=("list-geo-locations"); 
$commands+=("list-health-checks"); 
$commands+=("list-hosted-zones"); 
$commands+=("list-hosted-zones-by-name"); 
$commands+=("list-query-logging-configs"); 
$commands+=("list-resource-record-sets"); 
$commands+=("list-reusable-delegation-sets"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-tags-for-resources"); 
$commands+=("list-traffic-policies"); 
$commands+=("list-traffic-policy-instances"); 
$commands+=("list-traffic-policy-instances-by-hosted-zone"); 
$commands+=("list-traffic-policy-instances-by-policy"); 
$commands+=("list-traffic-policy-versions"); 
$commands+=("list-vpc-association-authorizations"); 
$commands+=("test-dns-answer"); 
$commands+=("update-health-check"); 
$commands+=("update-hosted-zone-comment"); 
$commands+=("update-traffic-policy-comment"); 
$commands+=("update-traffic-policy-instance"); 
$commands+=("wait");

return $commands;
}

 function Get-route53-associate-vpc-with-hosted-zone {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hosted-zone-id"); 
$flags+=("--vpc"); 
$flags+=("--comment"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-change-resource-record-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hosted-zone-id"); 
$flags+=("--change-batch"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-change-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-type"); 
$flags+=("--resource-id"); 
$flags+=("--add-tags"); 
$flags+=("--remove-tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-create-health-check {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--caller-reference"); 
$flags+=("--health-check-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-create-hosted-zone {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--vpc"); 
$flags+=("--caller-reference"); 
$flags+=("--hosted-zone-config"); 
$flags+=("--delegation-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-create-query-logging-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hosted-zone-id"); 
$flags+=("--cloud-watch-logs-log-group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-create-reusable-delegation-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--caller-reference"); 
$flags+=("--hosted-zone-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-create-traffic-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--document"); 
$flags+=("--comment"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-create-traffic-policy-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hosted-zone-id"); 
$flags+=("--name"); 
$flags+=("--ttl"); 
$flags+=("--traffic-policy-id"); 
$flags+=("--traffic-policy-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-create-traffic-policy-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--document"); 
$flags+=("--comment"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-create-vpc-association-authorization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hosted-zone-id"); 
$flags+=("--vpc"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-delete-health-check {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--health-check-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-delete-hosted-zone {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-delete-query-logging-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-delete-reusable-delegation-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-delete-traffic-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--traffic-policy-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-delete-traffic-policy-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-delete-vpc-association-authorization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hosted-zone-id"); 
$flags+=("--vpc"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-disassociate-vpc-from-hosted-zone {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hosted-zone-id"); 
$flags+=("--vpc"); 
$flags+=("--comment"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-get-account-limit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-get-change {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-get-checker-ip-ranges {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-get-geo-location {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--continent-code"); 
$flags+=("--country-code"); 
$flags+=("--subdivision-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-get-health-check {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--health-check-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-get-health-check-count {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-get-health-check-last-failure-reason {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--health-check-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-get-health-check-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--health-check-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-get-hosted-zone {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-get-hosted-zone-count {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-get-hosted-zone-limit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--type"); 
$flags+=("--hosted-zone-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-get-query-logging-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-get-reusable-delegation-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-get-reusable-delegation-set-limit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--type"); 
$flags+=("--delegation-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-get-traffic-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--traffic-policy-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-get-traffic-policy-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-get-traffic-policy-instance-count {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-list-geo-locations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--start-continent-code"); 
$flags+=("--start-country-code"); 
$flags+=("--start-subdivision-code"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-list-health-checks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-list-hosted-zones {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-items"); 
$flags+=("--delegation-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-list-hosted-zones-by-name {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dns-name"); 
$flags+=("--hosted-zone-id"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-list-query-logging-configs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hosted-zone-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-list-resource-record-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hosted-zone-id"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-list-reusable-delegation-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--marker"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-type"); 
$flags+=("--resource-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-list-tags-for-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-type"); 
$flags+=("--resource-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-list-traffic-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--traffic-policy-id-marker"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-list-traffic-policy-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hosted-zone-id-marker"); 
$flags+=("--traffic-policy-instance-name-marker"); 
$flags+=("--traffic-policy-instance-type-marker"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-list-traffic-policy-instances-by-hosted-zone {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hosted-zone-id"); 
$flags+=("--traffic-policy-instance-name-marker"); 
$flags+=("--traffic-policy-instance-type-marker"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-list-traffic-policy-instances-by-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--traffic-policy-id"); 
$flags+=("--traffic-policy-version"); 
$flags+=("--hosted-zone-id-marker"); 
$flags+=("--traffic-policy-instance-name-marker"); 
$flags+=("--traffic-policy-instance-type-marker"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-list-traffic-policy-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--traffic-policy-version-marker"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-list-vpc-association-authorizations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hosted-zone-id"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-test-dns-answer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hosted-zone-id"); 
$flags+=("--record-name"); 
$flags+=("--record-type"); 
$flags+=("--resolver-ip"); 
$flags+=("--edns"); 
$flags+=("--edns"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-update-health-check {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--health-check-id"); 
$flags+=("--health-check-version"); 
$flags+=("--ip-address"); 
$flags+=("--port"); 
$flags+=("--resource-path"); 
$flags+=("--fully-qualified-domain-name"); 
$flags+=("--search-string"); 
$flags+=("--failure-threshold"); 
$flags+=("--inverted"); 
$flags+=("--no-inverted"); 
$flags+=("--disabled"); 
$flags+=("--no-disabled"); 
$flags+=("--health-threshold"); 
$flags+=("--child-health-checks"); 
$flags+=("--enable-sni"); 
$flags+=("--no-enable-sni"); 
$flags+=("--regions"); 
$flags+=("--alarm-identifier"); 
$flags+=("--insufficient-data-health-status"); 
$flags+=("--reset-elements"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-update-hosted-zone-comment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--comment"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-update-traffic-policy-comment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--comment"); 
$flags+=("--traffic-policy-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-update-traffic-policy-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--ttl"); 
$flags+=("--traffic-policy-id"); 
$flags+=("--traffic-policy-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-route53domains {
    $commands = [System.Collections.ArrayList]@();

$commands+=("accept-domain-transfer-from-another-aws-account"); 
$commands+=("cancel-domain-transfer-to-another-aws-account"); 
$commands+=("check-domain-availability"); 
$commands+=("check-domain-transferability"); 
$commands+=("delete-tags-for-domain"); 
$commands+=("disable-domain-auto-renew"); 
$commands+=("disable-domain-transfer-lock"); 
$commands+=("enable-domain-auto-renew"); 
$commands+=("enable-domain-transfer-lock"); 
$commands+=("get-contact-reachability-status"); 
$commands+=("get-domain-detail"); 
$commands+=("get-domain-suggestions"); 
$commands+=("get-operation-detail"); 
$commands+=("list-domains"); 
$commands+=("list-operations"); 
$commands+=("list-tags-for-domain"); 
$commands+=("register-domain"); 
$commands+=("reject-domain-transfer-from-another-aws-account"); 
$commands+=("renew-domain"); 
$commands+=("resend-contact-reachability-email"); 
$commands+=("retrieve-domain-auth-code"); 
$commands+=("transfer-domain"); 
$commands+=("transfer-domain-to-another-aws-account"); 
$commands+=("update-domain-contact"); 
$commands+=("update-domain-contact-privacy"); 
$commands+=("update-domain-nameservers"); 
$commands+=("update-tags-for-domain"); 
$commands+=("view-billing");

return $commands;
}

 function Get-route53domains-accept-domain-transfer-from-another-aws-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--password"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-cancel-domain-transfer-to-another-aws-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-check-domain-availability {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--idn-lang-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-check-domain-transferability {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--auth-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-delete-tags-for-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--tags-to-delete"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-disable-domain-auto-renew {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-disable-domain-transfer-lock {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-enable-domain-auto-renew {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-enable-domain-transfer-lock {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-get-contact-reachability-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-get-domain-detail {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-get-domain-suggestions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--suggestion-count"); 
$flags+=("--only-available"); 
$flags+=("--no-only-available"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-get-operation-detail {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--operation-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-list-domains {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-list-operations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--submitted-since"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-list-tags-for-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-register-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--idn-lang-code"); 
$flags+=("--duration-in-years"); 
$flags+=("--auto-renew"); 
$flags+=("--no-auto-renew"); 
$flags+=("--admin-contact"); 
$flags+=("--registrant-contact"); 
$flags+=("--tech-contact"); 
$flags+=("--privacy-protect-admin-contact"); 
$flags+=("--no-privacy-protect-admin-contact"); 
$flags+=("--privacy-protect-registrant-contact"); 
$flags+=("--no-privacy-protect-registrant-contact"); 
$flags+=("--privacy-protect-tech-contact"); 
$flags+=("--no-privacy-protect-tech-contact"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-reject-domain-transfer-from-another-aws-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-renew-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--duration-in-years"); 
$flags+=("--current-expiry-year"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-resend-contact-reachability-email {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-retrieve-domain-auth-code {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-transfer-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--idn-lang-code"); 
$flags+=("--duration-in-years"); 
$flags+=("--nameservers"); 
$flags+=("--auth-code"); 
$flags+=("--auto-renew"); 
$flags+=("--no-auto-renew"); 
$flags+=("--admin-contact"); 
$flags+=("--registrant-contact"); 
$flags+=("--tech-contact"); 
$flags+=("--privacy-protect-admin-contact"); 
$flags+=("--no-privacy-protect-admin-contact"); 
$flags+=("--privacy-protect-registrant-contact"); 
$flags+=("--no-privacy-protect-registrant-contact"); 
$flags+=("--privacy-protect-tech-contact"); 
$flags+=("--no-privacy-protect-tech-contact"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-transfer-domain-to-another-aws-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--account-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-update-domain-contact {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--admin-contact"); 
$flags+=("--registrant-contact"); 
$flags+=("--tech-contact"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-update-domain-contact-privacy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--admin-privacy"); 
$flags+=("--no-admin-privacy"); 
$flags+=("--registrant-privacy"); 
$flags+=("--no-registrant-privacy"); 
$flags+=("--tech-privacy"); 
$flags+=("--no-tech-privacy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-update-domain-nameservers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--fi-auth-key"); 
$flags+=("--nameservers"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-update-tags-for-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--tags-to-update"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53domains-view-billing {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-items"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53resolver {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-resolver-endpoint-ip-address"); 
$commands+=("associate-resolver-rule"); 
$commands+=("create-resolver-endpoint"); 
$commands+=("create-resolver-rule"); 
$commands+=("delete-resolver-endpoint"); 
$commands+=("delete-resolver-rule"); 
$commands+=("disassociate-resolver-endpoint-ip-address"); 
$commands+=("disassociate-resolver-rule"); 
$commands+=("get-resolver-endpoint"); 
$commands+=("get-resolver-rule"); 
$commands+=("get-resolver-rule-association"); 
$commands+=("get-resolver-rule-policy"); 
$commands+=("list-resolver-endpoint-ip-addresses"); 
$commands+=("list-resolver-endpoints"); 
$commands+=("list-resolver-rule-associations"); 
$commands+=("list-resolver-rules"); 
$commands+=("list-tags-for-resource"); 
$commands+=("put-resolver-rule-policy"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-resolver-endpoint"); 
$commands+=("update-resolver-rule");

return $commands;
}

 function Get-route53resolver-associate-resolver-endpoint-ip-address {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resolver-endpoint-id"); 
$flags+=("--ip-address"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53resolver-associate-resolver-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resolver-rule-id"); 
$flags+=("--name"); 
$flags+=("--vpc-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53resolver-create-resolver-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--creator-request-id"); 
$flags+=("--name"); 
$flags+=("--security-group-ids"); 
$flags+=("--direction"); 
$flags+=("--ip-addresses"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53resolver-create-resolver-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--creator-request-id"); 
$flags+=("--name"); 
$flags+=("--rule-type"); 
$flags+=("--domain-name"); 
$flags+=("--target-ips"); 
$flags+=("--resolver-endpoint-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53resolver-delete-resolver-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resolver-endpoint-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53resolver-delete-resolver-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resolver-rule-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53resolver-disassociate-resolver-endpoint-ip-address {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resolver-endpoint-id"); 
$flags+=("--ip-address"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53resolver-disassociate-resolver-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vpc-id"); 
$flags+=("--resolver-rule-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53resolver-get-resolver-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resolver-endpoint-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53resolver-get-resolver-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resolver-rule-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53resolver-get-resolver-rule-association {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resolver-rule-association-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53resolver-get-resolver-rule-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53resolver-list-resolver-endpoint-ip-addresses {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resolver-endpoint-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53resolver-list-resolver-endpoints {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53resolver-list-resolver-rule-associations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53resolver-list-resolver-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53resolver-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53resolver-put-resolver-rule-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--resolver-rule-policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53resolver-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53resolver-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53resolver-update-resolver-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resolver-endpoint-id"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-route53resolver-update-resolver-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resolver-rule-id"); 
$flags+=("--config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3 {
    $commands = [System.Collections.ArrayList]@();

$commands+=("cp"); 
$commands+=("ls"); 
$commands+=("mb"); 
$commands+=("mv"); 
$commands+=("presign"); 
$commands+=("rb"); 
$commands+=("rm"); 
$commands+=("sync"); 
$commands+=("website");

return $commands;
}

 function Get-s3-cp {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dryrun"); 
$flags+=("--quiet"); 
$flags+=("--include"); 
$flags+=("--exclude"); 
$flags+=("--acl"); 
$flags+=("--follow-symlinks"); 
$flags+=("--no-follow-symlinks"); 
$flags+=("--no-guess-mime-type"); 
$flags+=("--sse"); 
$flags+=("--sse-c"); 
$flags+=("--sse-c-key"); 
$flags+=("--sse-kms-key-id"); 
$flags+=("--sse-c-copy-source"); 
$flags+=("--sse-c-copy-source-key"); 
$flags+=("--storage-class"); 
$flags+=("--grants"); 
$flags+=("--website-redirect"); 
$flags+=("--content-type"); 
$flags+=("--cache-control"); 
$flags+=("--content-disposition"); 
$flags+=("--content-encoding"); 
$flags+=("--content-language"); 
$flags+=("--expires"); 
$flags+=("--source-region"); 
$flags+=("--only-show-errors"); 
$flags+=("--no-progress"); 
$flags+=("--page-size"); 
$flags+=("--ignore-glacier-warnings"); 
$flags+=("--force-glacier-transfer"); 
$flags+=("--request-payer"); 
$flags+=("--metadata"); 
$flags+=("--metadata-directive"); 
$flags+=("--expected-size"); 
$flags+=("--recursive");

return $flags;
}

 function Get-s3-ls {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--recursive"); 
$flags+=("--page-size"); 
$flags+=("--human-readable"); 
$flags+=("--summarize"); 
$flags+=("--request-payer");

return $flags;
}

 function Get-s3-mb {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-s3-mv {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dryrun"); 
$flags+=("--quiet"); 
$flags+=("--include"); 
$flags+=("--exclude"); 
$flags+=("--acl"); 
$flags+=("--follow-symlinks"); 
$flags+=("--no-follow-symlinks"); 
$flags+=("--no-guess-mime-type"); 
$flags+=("--sse"); 
$flags+=("--sse-c"); 
$flags+=("--sse-c-key"); 
$flags+=("--sse-kms-key-id"); 
$flags+=("--sse-c-copy-source"); 
$flags+=("--sse-c-copy-source-key"); 
$flags+=("--storage-class"); 
$flags+=("--grants"); 
$flags+=("--website-redirect"); 
$flags+=("--content-type"); 
$flags+=("--cache-control"); 
$flags+=("--content-disposition"); 
$flags+=("--content-encoding"); 
$flags+=("--content-language"); 
$flags+=("--expires"); 
$flags+=("--source-region"); 
$flags+=("--only-show-errors"); 
$flags+=("--no-progress"); 
$flags+=("--page-size"); 
$flags+=("--ignore-glacier-warnings"); 
$flags+=("--force-glacier-transfer"); 
$flags+=("--request-payer"); 
$flags+=("--metadata"); 
$flags+=("--metadata-directive"); 
$flags+=("--recursive");

return $flags;
}

 function Get-s3-presign {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--expires-in");

return $flags;
}

 function Get-s3-rb {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--force");

return $flags;
}

 function Get-s3-rm {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dryrun"); 
$flags+=("--quiet"); 
$flags+=("--recursive"); 
$flags+=("--request-payer"); 
$flags+=("--include"); 
$flags+=("--exclude"); 
$flags+=("--only-show-errors"); 
$flags+=("--page-size");

return $flags;
}

 function Get-s3-sync {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dryrun"); 
$flags+=("--quiet"); 
$flags+=("--include"); 
$flags+=("--exclude"); 
$flags+=("--acl"); 
$flags+=("--follow-symlinks"); 
$flags+=("--no-follow-symlinks"); 
$flags+=("--no-guess-mime-type"); 
$flags+=("--sse"); 
$flags+=("--sse-c"); 
$flags+=("--sse-c-key"); 
$flags+=("--sse-kms-key-id"); 
$flags+=("--sse-c-copy-source"); 
$flags+=("--sse-c-copy-source-key"); 
$flags+=("--storage-class"); 
$flags+=("--grants"); 
$flags+=("--website-redirect"); 
$flags+=("--content-type"); 
$flags+=("--cache-control"); 
$flags+=("--content-disposition"); 
$flags+=("--content-encoding"); 
$flags+=("--content-language"); 
$flags+=("--expires"); 
$flags+=("--source-region"); 
$flags+=("--only-show-errors"); 
$flags+=("--no-progress"); 
$flags+=("--page-size"); 
$flags+=("--ignore-glacier-warnings"); 
$flags+=("--force-glacier-transfer"); 
$flags+=("--request-payer"); 
$flags+=("--metadata"); 
$flags+=("--metadata-directive"); 
$flags+=("--size-only"); 
$flags+=("--exact-timestamps"); 
$flags+=("--delete");

return $flags;
}

 function Get-s3-website {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--index-document"); 
$flags+=("--error-document");

return $flags;
}

 function Get-s3api {
    $commands = [System.Collections.ArrayList]@();

$commands+=("abort-multipart-upload"); 
$commands+=("complete-multipart-upload"); 
$commands+=("copy-object"); 
$commands+=("create-bucket"); 
$commands+=("create-multipart-upload"); 
$commands+=("delete-bucket"); 
$commands+=("delete-bucket-analytics-configuration"); 
$commands+=("delete-bucket-cors"); 
$commands+=("delete-bucket-encryption"); 
$commands+=("delete-bucket-inventory-configuration"); 
$commands+=("delete-bucket-lifecycle"); 
$commands+=("delete-bucket-metrics-configuration"); 
$commands+=("delete-bucket-policy"); 
$commands+=("delete-bucket-replication"); 
$commands+=("delete-bucket-tagging"); 
$commands+=("delete-bucket-website"); 
$commands+=("delete-object"); 
$commands+=("delete-object-tagging"); 
$commands+=("delete-objects"); 
$commands+=("delete-public-access-block"); 
$commands+=("get-bucket-accelerate-configuration"); 
$commands+=("get-bucket-acl"); 
$commands+=("get-bucket-analytics-configuration"); 
$commands+=("get-bucket-cors"); 
$commands+=("get-bucket-encryption"); 
$commands+=("get-bucket-inventory-configuration"); 
$commands+=("get-bucket-lifecycle-configuration"); 
$commands+=("get-bucket-location"); 
$commands+=("get-bucket-logging"); 
$commands+=("get-bucket-metrics-configuration"); 
$commands+=("get-bucket-notification-configuration"); 
$commands+=("get-bucket-policy"); 
$commands+=("get-bucket-policy-status"); 
$commands+=("get-bucket-replication"); 
$commands+=("get-bucket-request-payment"); 
$commands+=("get-bucket-tagging"); 
$commands+=("get-bucket-versioning"); 
$commands+=("get-bucket-website"); 
$commands+=("get-object"); 
$commands+=("get-object-acl"); 
$commands+=("get-object-legal-hold"); 
$commands+=("get-object-lock-configuration"); 
$commands+=("get-object-retention"); 
$commands+=("get-object-tagging"); 
$commands+=("get-object-torrent"); 
$commands+=("get-public-access-block"); 
$commands+=("head-bucket"); 
$commands+=("head-object"); 
$commands+=("list-bucket-analytics-configurations"); 
$commands+=("list-bucket-inventory-configurations"); 
$commands+=("list-bucket-metrics-configurations"); 
$commands+=("list-buckets"); 
$commands+=("list-multipart-uploads"); 
$commands+=("list-object-versions"); 
$commands+=("list-objects"); 
$commands+=("list-objects-v2"); 
$commands+=("list-parts"); 
$commands+=("put-bucket-accelerate-configuration"); 
$commands+=("put-bucket-acl"); 
$commands+=("put-bucket-analytics-configuration"); 
$commands+=("put-bucket-cors"); 
$commands+=("put-bucket-encryption"); 
$commands+=("put-bucket-inventory-configuration"); 
$commands+=("put-bucket-lifecycle-configuration"); 
$commands+=("put-bucket-logging"); 
$commands+=("put-bucket-metrics-configuration"); 
$commands+=("put-bucket-notification-configuration"); 
$commands+=("put-bucket-policy"); 
$commands+=("put-bucket-replication"); 
$commands+=("put-bucket-request-payment"); 
$commands+=("put-bucket-tagging"); 
$commands+=("put-bucket-versioning"); 
$commands+=("put-bucket-website"); 
$commands+=("put-object"); 
$commands+=("put-object-acl"); 
$commands+=("put-object-legal-hold"); 
$commands+=("put-object-lock-configuration"); 
$commands+=("put-object-retention"); 
$commands+=("put-object-tagging"); 
$commands+=("put-public-access-block"); 
$commands+=("restore-object"); 
$commands+=("select-object-content"); 
$commands+=("upload-part"); 
$commands+=("upload-part-copy"); 
$commands+=("wait");

return $commands;
}

 function Get-s3api-abort-multipart-upload {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--key"); 
$flags+=("--upload-id"); 
$flags+=("--request-payer"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-complete-multipart-upload {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--key"); 
$flags+=("--multipart-upload"); 
$flags+=("--upload-id"); 
$flags+=("--request-payer"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-copy-object {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--acl"); 
$flags+=("--bucket"); 
$flags+=("--cache-control"); 
$flags+=("--content-disposition"); 
$flags+=("--content-encoding"); 
$flags+=("--content-language"); 
$flags+=("--content-type"); 
$flags+=("--copy-source"); 
$flags+=("--copy-source-if-match"); 
$flags+=("--copy-source-if-modified-since"); 
$flags+=("--copy-source-if-none-match"); 
$flags+=("--copy-source-if-unmodified-since"); 
$flags+=("--expires"); 
$flags+=("--grant-full-control"); 
$flags+=("--grant-read"); 
$flags+=("--grant-read-acp"); 
$flags+=("--grant-write-acp"); 
$flags+=("--key"); 
$flags+=("--metadata"); 
$flags+=("--metadata-directive"); 
$flags+=("--tagging-directive"); 
$flags+=("--server-side-encryption"); 
$flags+=("--storage-class"); 
$flags+=("--website-redirect-location"); 
$flags+=("--sse-customer-algorithm"); 
$flags+=("--sse-customer-key"); 
$flags+=("--sse-customer-key-md"); 
$flags+=("--ssekms-key-id"); 
$flags+=("--ssekms-encryption-context"); 
$flags+=("--copy-source-sse-customer-algorithm"); 
$flags+=("--copy-source-sse-customer-key"); 
$flags+=("--copy-source-sse-customer-key-md"); 
$flags+=("--request-payer"); 
$flags+=("--tagging"); 
$flags+=("--object-lock-mode"); 
$flags+=("--object-lock-retain-until-date"); 
$flags+=("--object-lock-legal-hold-status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-create-bucket {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--acl"); 
$flags+=("--bucket"); 
$flags+=("--create-bucket-configuration"); 
$flags+=("--grant-full-control"); 
$flags+=("--grant-read"); 
$flags+=("--grant-read-acp"); 
$flags+=("--grant-write"); 
$flags+=("--grant-write-acp"); 
$flags+=("--object-lock-enabled-for-bucket"); 
$flags+=("--no-object-lock-enabled-for-bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-create-multipart-upload {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--acl"); 
$flags+=("--bucket"); 
$flags+=("--cache-control"); 
$flags+=("--content-disposition"); 
$flags+=("--content-encoding"); 
$flags+=("--content-language"); 
$flags+=("--content-type"); 
$flags+=("--expires"); 
$flags+=("--grant-full-control"); 
$flags+=("--grant-read"); 
$flags+=("--grant-read-acp"); 
$flags+=("--grant-write-acp"); 
$flags+=("--key"); 
$flags+=("--metadata"); 
$flags+=("--server-side-encryption"); 
$flags+=("--storage-class"); 
$flags+=("--website-redirect-location"); 
$flags+=("--sse-customer-algorithm"); 
$flags+=("--sse-customer-key"); 
$flags+=("--sse-customer-key-md"); 
$flags+=("--ssekms-key-id"); 
$flags+=("--ssekms-encryption-context"); 
$flags+=("--request-payer"); 
$flags+=("--tagging"); 
$flags+=("--object-lock-mode"); 
$flags+=("--object-lock-retain-until-date"); 
$flags+=("--object-lock-legal-hold-status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-delete-bucket {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-delete-bucket-analytics-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-delete-bucket-cors {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-delete-bucket-encryption {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-delete-bucket-inventory-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-delete-bucket-lifecycle {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-delete-bucket-metrics-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-delete-bucket-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-delete-bucket-replication {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-delete-bucket-tagging {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-delete-bucket-website {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-delete-object {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--key"); 
$flags+=("--mfa"); 
$flags+=("--version-id"); 
$flags+=("--request-payer"); 
$flags+=("--bypass-governance-retention"); 
$flags+=("--no-bypass-governance-retention"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-delete-object-tagging {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--key"); 
$flags+=("--version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-delete-objects {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--delete"); 
$flags+=("--mfa"); 
$flags+=("--request-payer"); 
$flags+=("--bypass-governance-retention"); 
$flags+=("--no-bypass-governance-retention"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-delete-public-access-block {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-get-bucket-accelerate-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-get-bucket-acl {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-get-bucket-analytics-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-get-bucket-cors {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-get-bucket-encryption {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-get-bucket-inventory-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-get-bucket-lifecycle-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-get-bucket-location {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-get-bucket-logging {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-get-bucket-metrics-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-get-bucket-notification-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-get-bucket-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-get-bucket-policy-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-get-bucket-replication {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-get-bucket-request-payment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-get-bucket-tagging {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-get-bucket-versioning {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-get-bucket-website {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-get-object {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--if-match"); 
$flags+=("--if-modified-since"); 
$flags+=("--if-none-match"); 
$flags+=("--if-unmodified-since"); 
$flags+=("--key"); 
$flags+=("--range"); 
$flags+=("--response-cache-control"); 
$flags+=("--response-content-disposition"); 
$flags+=("--response-content-encoding"); 
$flags+=("--response-content-language"); 
$flags+=("--response-content-type"); 
$flags+=("--response-expires"); 
$flags+=("--version-id"); 
$flags+=("--sse-customer-algorithm"); 
$flags+=("--sse-customer-key"); 
$flags+=("--sse-customer-key-md"); 
$flags+=("--request-payer"); 
$flags+=("--part-number");

return $flags;
}

 function Get-s3api-get-object-acl {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--key"); 
$flags+=("--version-id"); 
$flags+=("--request-payer"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-get-object-legal-hold {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--key"); 
$flags+=("--version-id"); 
$flags+=("--request-payer"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-get-object-lock-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-get-object-retention {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--key"); 
$flags+=("--version-id"); 
$flags+=("--request-payer"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-get-object-tagging {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--key"); 
$flags+=("--version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-get-object-torrent {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--key"); 
$flags+=("--request-payer");

return $flags;
}

 function Get-s3api-get-public-access-block {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-head-bucket {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-head-object {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--if-match"); 
$flags+=("--if-modified-since"); 
$flags+=("--if-none-match"); 
$flags+=("--if-unmodified-since"); 
$flags+=("--key"); 
$flags+=("--range"); 
$flags+=("--version-id"); 
$flags+=("--sse-customer-algorithm"); 
$flags+=("--sse-customer-key"); 
$flags+=("--sse-customer-key-md"); 
$flags+=("--request-payer"); 
$flags+=("--part-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-list-bucket-analytics-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--continuation-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-list-bucket-inventory-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--continuation-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-list-bucket-metrics-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--continuation-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-list-buckets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-list-multipart-uploads {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--delimiter"); 
$flags+=("--encoding-type"); 
$flags+=("--prefix"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-list-object-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--delimiter"); 
$flags+=("--encoding-type"); 
$flags+=("--prefix"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-list-objects {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--delimiter"); 
$flags+=("--encoding-type"); 
$flags+=("--prefix"); 
$flags+=("--request-payer"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-list-objects-v2 {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--delimiter"); 
$flags+=("--encoding-type"); 
$flags+=("--prefix"); 
$flags+=("--fetch-owner"); 
$flags+=("--no-fetch-owner"); 
$flags+=("--start-after"); 
$flags+=("--request-payer"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-list-parts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--key"); 
$flags+=("--upload-id"); 
$flags+=("--request-payer"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-put-bucket-accelerate-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--accelerate-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-put-bucket-acl {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--acl"); 
$flags+=("--access-control-policy"); 
$flags+=("--bucket"); 
$flags+=("--content-md"); 
$flags+=("--grant-full-control"); 
$flags+=("--grant-read"); 
$flags+=("--grant-read-acp"); 
$flags+=("--grant-write"); 
$flags+=("--grant-write-acp"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-put-bucket-analytics-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--id"); 
$flags+=("--analytics-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-put-bucket-cors {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--cors-configuration"); 
$flags+=("--content-md"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-put-bucket-encryption {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--content-md"); 
$flags+=("--server-side-encryption-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-put-bucket-inventory-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--id"); 
$flags+=("--inventory-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-put-bucket-lifecycle-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--lifecycle-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-put-bucket-logging {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--bucket-logging-status"); 
$flags+=("--content-md"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-put-bucket-metrics-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--id"); 
$flags+=("--metrics-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-put-bucket-notification-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--notification-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-put-bucket-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--content-md"); 
$flags+=("--confirm-remove-self-bucket-access"); 
$flags+=("--no-confirm-remove-self-bucket-access"); 
$flags+=("--policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-put-bucket-replication {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--content-md"); 
$flags+=("--replication-configuration"); 
$flags+=("--token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-put-bucket-request-payment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--content-md"); 
$flags+=("--request-payment-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-put-bucket-tagging {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--content-md"); 
$flags+=("--tagging"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-put-bucket-versioning {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--content-md"); 
$flags+=("--mfa"); 
$flags+=("--versioning-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-put-bucket-website {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--content-md"); 
$flags+=("--website-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-put-object {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--acl"); 
$flags+=("--body"); 
$flags+=("--bucket"); 
$flags+=("--cache-control"); 
$flags+=("--content-disposition"); 
$flags+=("--content-encoding"); 
$flags+=("--content-language"); 
$flags+=("--content-length"); 
$flags+=("--content-md"); 
$flags+=("--content-type"); 
$flags+=("--expires"); 
$flags+=("--grant-full-control"); 
$flags+=("--grant-read"); 
$flags+=("--grant-read-acp"); 
$flags+=("--grant-write-acp"); 
$flags+=("--key"); 
$flags+=("--metadata"); 
$flags+=("--server-side-encryption"); 
$flags+=("--storage-class"); 
$flags+=("--website-redirect-location"); 
$flags+=("--sse-customer-algorithm"); 
$flags+=("--sse-customer-key"); 
$flags+=("--sse-customer-key-md"); 
$flags+=("--ssekms-key-id"); 
$flags+=("--ssekms-encryption-context"); 
$flags+=("--request-payer"); 
$flags+=("--tagging"); 
$flags+=("--object-lock-mode"); 
$flags+=("--object-lock-retain-until-date"); 
$flags+=("--object-lock-legal-hold-status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-put-object-acl {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--acl"); 
$flags+=("--access-control-policy"); 
$flags+=("--bucket"); 
$flags+=("--content-md"); 
$flags+=("--grant-full-control"); 
$flags+=("--grant-read"); 
$flags+=("--grant-read-acp"); 
$flags+=("--grant-write"); 
$flags+=("--grant-write-acp"); 
$flags+=("--key"); 
$flags+=("--request-payer"); 
$flags+=("--version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-put-object-legal-hold {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--key"); 
$flags+=("--legal-hold"); 
$flags+=("--request-payer"); 
$flags+=("--version-id"); 
$flags+=("--content-md"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-put-object-lock-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--object-lock-configuration"); 
$flags+=("--request-payer"); 
$flags+=("--token"); 
$flags+=("--content-md"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-put-object-retention {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--key"); 
$flags+=("--retention"); 
$flags+=("--request-payer"); 
$flags+=("--version-id"); 
$flags+=("--bypass-governance-retention"); 
$flags+=("--no-bypass-governance-retention"); 
$flags+=("--content-md"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-put-object-tagging {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--key"); 
$flags+=("--version-id"); 
$flags+=("--content-md"); 
$flags+=("--tagging"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-put-public-access-block {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--content-md"); 
$flags+=("--public-access-block-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-restore-object {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--key"); 
$flags+=("--version-id"); 
$flags+=("--restore-request"); 
$flags+=("--request-payer"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-select-object-content {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--key"); 
$flags+=("--sse-customer-algorithm"); 
$flags+=("--sse-customer-key"); 
$flags+=("--sse-customer-key-md"); 
$flags+=("--expression"); 
$flags+=("--expression-type"); 
$flags+=("--request-progress"); 
$flags+=("--input-serialization"); 
$flags+=("--output-serialization"); 
$flags+=("--scan-range");

return $flags;
}

 function Get-s3api-upload-part {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--body"); 
$flags+=("--bucket"); 
$flags+=("--content-length"); 
$flags+=("--content-md"); 
$flags+=("--key"); 
$flags+=("--part-number"); 
$flags+=("--upload-id"); 
$flags+=("--sse-customer-algorithm"); 
$flags+=("--sse-customer-key"); 
$flags+=("--sse-customer-key-md"); 
$flags+=("--request-payer"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-upload-part-copy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bucket"); 
$flags+=("--copy-source"); 
$flags+=("--copy-source-if-match"); 
$flags+=("--copy-source-if-modified-since"); 
$flags+=("--copy-source-if-none-match"); 
$flags+=("--copy-source-if-unmodified-since"); 
$flags+=("--copy-source-range"); 
$flags+=("--key"); 
$flags+=("--part-number"); 
$flags+=("--upload-id"); 
$flags+=("--sse-customer-algorithm"); 
$flags+=("--sse-customer-key"); 
$flags+=("--sse-customer-key-md"); 
$flags+=("--copy-source-sse-customer-algorithm"); 
$flags+=("--copy-source-sse-customer-key"); 
$flags+=("--copy-source-sse-customer-key-md"); 
$flags+=("--request-payer"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3api-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-s3control {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-access-point"); 
$commands+=("create-job"); 
$commands+=("delete-access-point"); 
$commands+=("delete-access-point-policy"); 
$commands+=("delete-job-tagging"); 
$commands+=("delete-public-access-block"); 
$commands+=("describe-job"); 
$commands+=("get-access-point"); 
$commands+=("get-access-point-policy"); 
$commands+=("get-access-point-policy-status"); 
$commands+=("get-job-tagging"); 
$commands+=("get-public-access-block"); 
$commands+=("list-access-points"); 
$commands+=("list-jobs"); 
$commands+=("put-access-point-policy"); 
$commands+=("put-job-tagging"); 
$commands+=("put-public-access-block"); 
$commands+=("update-job-priority"); 
$commands+=("update-job-status");

return $commands;
}

 function Get-s3control-create-access-point {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--name"); 
$flags+=("--bucket"); 
$flags+=("--vpc-configuration"); 
$flags+=("--public-access-block-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3control-create-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--confirmation-required"); 
$flags+=("--no-confirmation-required"); 
$flags+=("--operation"); 
$flags+=("--report"); 
$flags+=("--client-request-token"); 
$flags+=("--manifest"); 
$flags+=("--description"); 
$flags+=("--priority"); 
$flags+=("--role-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3control-delete-access-point {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3control-delete-access-point-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3control-delete-job-tagging {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3control-delete-public-access-block {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3control-describe-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3control-get-access-point {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3control-get-access-point-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3control-get-access-point-policy-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3control-get-job-tagging {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3control-get-public-access-block {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3control-list-access-points {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--bucket"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3control-list-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--job-statuses"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3control-put-access-point-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--name"); 
$flags+=("--policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3control-put-job-tagging {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--job-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3control-put-public-access-block {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--public-access-block-configuration"); 
$flags+=("--account-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3control-update-job-priority {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--job-id"); 
$flags+=("--priority"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-s3control-update-job-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-id"); 
$flags+=("--job-id"); 
$flags+=("--requested-job-status"); 
$flags+=("--status-update-reason"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-tags"); 
$commands+=("associate-trial-component"); 
$commands+=("create-algorithm"); 
$commands+=("create-app"); 
$commands+=("create-auto-ml-job"); 
$commands+=("create-code-repository"); 
$commands+=("create-compilation-job"); 
$commands+=("create-domain"); 
$commands+=("create-endpoint"); 
$commands+=("create-endpoint-config"); 
$commands+=("create-experiment"); 
$commands+=("create-flow-definition"); 
$commands+=("create-human-task-ui"); 
$commands+=("create-hyper-parameter-tuning-job"); 
$commands+=("create-labeling-job"); 
$commands+=("create-model"); 
$commands+=("create-model-package"); 
$commands+=("create-monitoring-schedule"); 
$commands+=("create-notebook-instance"); 
$commands+=("create-notebook-instance-lifecycle-config"); 
$commands+=("create-presigned-domain-url"); 
$commands+=("create-presigned-notebook-instance-url"); 
$commands+=("create-processing-job"); 
$commands+=("create-training-job"); 
$commands+=("create-transform-job"); 
$commands+=("create-trial"); 
$commands+=("create-trial-component"); 
$commands+=("create-user-profile"); 
$commands+=("create-workteam"); 
$commands+=("delete-algorithm"); 
$commands+=("delete-app"); 
$commands+=("delete-code-repository"); 
$commands+=("delete-domain"); 
$commands+=("delete-endpoint"); 
$commands+=("delete-endpoint-config"); 
$commands+=("delete-experiment"); 
$commands+=("delete-flow-definition"); 
$commands+=("delete-model"); 
$commands+=("delete-model-package"); 
$commands+=("delete-monitoring-schedule"); 
$commands+=("delete-notebook-instance"); 
$commands+=("delete-notebook-instance-lifecycle-config"); 
$commands+=("delete-tags"); 
$commands+=("delete-trial"); 
$commands+=("delete-trial-component"); 
$commands+=("delete-user-profile"); 
$commands+=("delete-workteam"); 
$commands+=("describe-algorithm"); 
$commands+=("describe-app"); 
$commands+=("describe-auto-ml-job"); 
$commands+=("describe-code-repository"); 
$commands+=("describe-compilation-job"); 
$commands+=("describe-domain"); 
$commands+=("describe-endpoint"); 
$commands+=("describe-endpoint-config"); 
$commands+=("describe-experiment"); 
$commands+=("describe-flow-definition"); 
$commands+=("describe-human-task-ui"); 
$commands+=("describe-hyper-parameter-tuning-job"); 
$commands+=("describe-labeling-job"); 
$commands+=("describe-model"); 
$commands+=("describe-model-package"); 
$commands+=("describe-monitoring-schedule"); 
$commands+=("describe-notebook-instance"); 
$commands+=("describe-notebook-instance-lifecycle-config"); 
$commands+=("describe-processing-job"); 
$commands+=("describe-subscribed-workteam"); 
$commands+=("describe-training-job"); 
$commands+=("describe-transform-job"); 
$commands+=("describe-trial"); 
$commands+=("describe-trial-component"); 
$commands+=("describe-user-profile"); 
$commands+=("describe-workforce"); 
$commands+=("describe-workteam"); 
$commands+=("disassociate-trial-component"); 
$commands+=("get-search-suggestions"); 
$commands+=("list-algorithms"); 
$commands+=("list-apps"); 
$commands+=("list-auto-ml-jobs"); 
$commands+=("list-candidates-for-auto-ml-job"); 
$commands+=("list-code-repositories"); 
$commands+=("list-compilation-jobs"); 
$commands+=("list-domains"); 
$commands+=("list-endpoint-configs"); 
$commands+=("list-endpoints"); 
$commands+=("list-experiments"); 
$commands+=("list-flow-definitions"); 
$commands+=("list-human-task-uis"); 
$commands+=("list-hyper-parameter-tuning-jobs"); 
$commands+=("list-labeling-jobs"); 
$commands+=("list-labeling-jobs-for-workteam"); 
$commands+=("list-model-packages"); 
$commands+=("list-models"); 
$commands+=("list-monitoring-executions"); 
$commands+=("list-monitoring-schedules"); 
$commands+=("list-notebook-instance-lifecycle-configs"); 
$commands+=("list-notebook-instances"); 
$commands+=("list-processing-jobs"); 
$commands+=("list-subscribed-workteams"); 
$commands+=("list-tags"); 
$commands+=("list-training-jobs"); 
$commands+=("list-training-jobs-for-hyper-parameter-tuning-job"); 
$commands+=("list-transform-jobs"); 
$commands+=("list-trial-components"); 
$commands+=("list-trials"); 
$commands+=("list-user-profiles"); 
$commands+=("list-workteams"); 
$commands+=("render-ui-template"); 
$commands+=("search"); 
$commands+=("start-monitoring-schedule"); 
$commands+=("start-notebook-instance"); 
$commands+=("stop-auto-ml-job"); 
$commands+=("stop-compilation-job"); 
$commands+=("stop-hyper-parameter-tuning-job"); 
$commands+=("stop-labeling-job"); 
$commands+=("stop-monitoring-schedule"); 
$commands+=("stop-notebook-instance"); 
$commands+=("stop-processing-job"); 
$commands+=("stop-training-job"); 
$commands+=("stop-transform-job"); 
$commands+=("update-code-repository"); 
$commands+=("update-domain"); 
$commands+=("update-endpoint"); 
$commands+=("update-endpoint-weights-and-capacities"); 
$commands+=("update-experiment"); 
$commands+=("update-monitoring-schedule"); 
$commands+=("update-notebook-instance"); 
$commands+=("update-notebook-instance-lifecycle-config"); 
$commands+=("update-trial"); 
$commands+=("update-trial-component"); 
$commands+=("update-user-profile"); 
$commands+=("update-workforce"); 
$commands+=("update-workteam"); 
$commands+=("wait");

return $commands;
}

 function Get-sagemaker-add-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-associate-trial-component {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--trial-component-name"); 
$flags+=("--trial-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-algorithm {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--algorithm-name"); 
$flags+=("--algorithm-description"); 
$flags+=("--training-specification"); 
$flags+=("--inference-specification"); 
$flags+=("--validation-specification"); 
$flags+=("--certify-for-marketplace"); 
$flags+=("--no-certify-for-marketplace"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-app {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-id"); 
$flags+=("--user-profile-name"); 
$flags+=("--app-type"); 
$flags+=("--app-name"); 
$flags+=("--tags"); 
$flags+=("--resource-spec"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-auto-ml-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-ml-job-name"); 
$flags+=("--input-data-config"); 
$flags+=("--output-data-config"); 
$flags+=("--problem-type"); 
$flags+=("--auto-ml-job-objective"); 
$flags+=("--auto-ml-job-config"); 
$flags+=("--role-arn"); 
$flags+=("--generate-candidate-definitions-only"); 
$flags+=("--no-generate-candidate-definitions-only"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-code-repository {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--code-repository-name"); 
$flags+=("--git-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-compilation-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--compilation-job-name"); 
$flags+=("--role-arn"); 
$flags+=("--input-config"); 
$flags+=("--output-config"); 
$flags+=("--stopping-condition"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--auth-mode"); 
$flags+=("--default-user-settings"); 
$flags+=("--subnet-ids"); 
$flags+=("--vpc-id"); 
$flags+=("--tags"); 
$flags+=("--home-efs-file-system-kms-key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-name"); 
$flags+=("--endpoint-config-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-endpoint-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-config-name"); 
$flags+=("--production-variants"); 
$flags+=("--data-capture-config"); 
$flags+=("--tags"); 
$flags+=("--kms-key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-experiment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--experiment-name"); 
$flags+=("--display-name"); 
$flags+=("--description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-flow-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--flow-definition-name"); 
$flags+=("--human-loop-request-source"); 
$flags+=("--human-loop-activation-config"); 
$flags+=("--human-loop-config"); 
$flags+=("--output-config"); 
$flags+=("--role-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-human-task-ui {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--human-task-ui-name"); 
$flags+=("--ui-template"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-hyper-parameter-tuning-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hyper-parameter-tuning-job-name"); 
$flags+=("--hyper-parameter-tuning-job-config"); 
$flags+=("--training-job-definition"); 
$flags+=("--training-job-definitions"); 
$flags+=("--warm-start-config"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-labeling-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--labeling-job-name"); 
$flags+=("--label-attribute-name"); 
$flags+=("--input-config"); 
$flags+=("--output-config"); 
$flags+=("--role-arn"); 
$flags+=("--label-category-config-s"); 
$flags+=("--stopping-conditions"); 
$flags+=("--labeling-job-algorithms-config"); 
$flags+=("--human-task-config"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--model-name"); 
$flags+=("--primary-container"); 
$flags+=("--containers"); 
$flags+=("--execution-role-arn"); 
$flags+=("--tags"); 
$flags+=("--vpc-config"); 
$flags+=("--enable-network-isolation"); 
$flags+=("--no-enable-network-isolation"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-model-package {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--model-package-name"); 
$flags+=("--model-package-description"); 
$flags+=("--inference-specification"); 
$flags+=("--validation-specification"); 
$flags+=("--source-algorithm-specification"); 
$flags+=("--certify-for-marketplace"); 
$flags+=("--no-certify-for-marketplace"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-monitoring-schedule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--monitoring-schedule-name"); 
$flags+=("--monitoring-schedule-config"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-notebook-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--notebook-instance-name"); 
$flags+=("--instance-type"); 
$flags+=("--subnet-id"); 
$flags+=("--security-group-ids"); 
$flags+=("--role-arn"); 
$flags+=("--kms-key-id"); 
$flags+=("--tags"); 
$flags+=("--lifecycle-config-name"); 
$flags+=("--direct-internet-access"); 
$flags+=("--volume-size-in-gb"); 
$flags+=("--accelerator-types"); 
$flags+=("--default-code-repository"); 
$flags+=("--additional-code-repositories"); 
$flags+=("--root-access"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-notebook-instance-lifecycle-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--notebook-instance-lifecycle-config-name"); 
$flags+=("--on-create"); 
$flags+=("--on-start"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-presigned-domain-url {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-id"); 
$flags+=("--user-profile-name"); 
$flags+=("--session-expiration-duration-in-seconds"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-presigned-notebook-instance-url {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--notebook-instance-name"); 
$flags+=("--session-expiration-duration-in-seconds"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-processing-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--processing-inputs"); 
$flags+=("--processing-output-config"); 
$flags+=("--processing-job-name"); 
$flags+=("--processing-resources"); 
$flags+=("--stopping-condition"); 
$flags+=("--app-specification"); 
$flags+=("--environment"); 
$flags+=("--network-config"); 
$flags+=("--role-arn"); 
$flags+=("--tags"); 
$flags+=("--experiment-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-training-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--training-job-name"); 
$flags+=("--hyper-parameters"); 
$flags+=("--algorithm-specification"); 
$flags+=("--role-arn"); 
$flags+=("--input-data-config"); 
$flags+=("--output-data-config"); 
$flags+=("--resource-config"); 
$flags+=("--vpc-config"); 
$flags+=("--stopping-condition"); 
$flags+=("--tags"); 
$flags+=("--enable-network-isolation"); 
$flags+=("--no-enable-network-isolation"); 
$flags+=("--enable-inter-container-traffic-encryption"); 
$flags+=("--no-enable-inter-container-traffic-encryption"); 
$flags+=("--enable-managed-spot-training"); 
$flags+=("--no-enable-managed-spot-training"); 
$flags+=("--checkpoint-config"); 
$flags+=("--debug-hook-config"); 
$flags+=("--debug-rule-configurations"); 
$flags+=("--tensor-board-output-config"); 
$flags+=("--experiment-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-transform-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transform-job-name"); 
$flags+=("--model-name"); 
$flags+=("--max-concurrent-transforms"); 
$flags+=("--max-payload-in-mb"); 
$flags+=("--batch-strategy"); 
$flags+=("--environment"); 
$flags+=("--transform-input"); 
$flags+=("--transform-output"); 
$flags+=("--transform-resources"); 
$flags+=("--data-processing"); 
$flags+=("--tags"); 
$flags+=("--experiment-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-trial {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--trial-name"); 
$flags+=("--display-name"); 
$flags+=("--experiment-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-trial-component {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--trial-component-name"); 
$flags+=("--display-name"); 
$flags+=("--status"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--parameters"); 
$flags+=("--input-artifacts"); 
$flags+=("--output-artifacts"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-user-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-id"); 
$flags+=("--user-profile-name"); 
$flags+=("--single-sign-on-user-identifier"); 
$flags+=("--single-sign-on-user-value"); 
$flags+=("--tags"); 
$flags+=("--user-settings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-create-workteam {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--workteam-name"); 
$flags+=("--member-definitions"); 
$flags+=("--description"); 
$flags+=("--notification-configuration"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-delete-algorithm {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--algorithm-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-delete-app {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-id"); 
$flags+=("--user-profile-name"); 
$flags+=("--app-type"); 
$flags+=("--app-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-delete-code-repository {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--code-repository-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-delete-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-id"); 
$flags+=("--retention-policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-delete-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-delete-endpoint-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-config-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-delete-experiment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--experiment-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-delete-flow-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--flow-definition-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-delete-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--model-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-delete-model-package {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--model-package-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-delete-monitoring-schedule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--monitoring-schedule-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-delete-notebook-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--notebook-instance-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-delete-notebook-instance-lifecycle-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--notebook-instance-lifecycle-config-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-delete-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-delete-trial {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--trial-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-delete-trial-component {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--trial-component-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-delete-user-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-id"); 
$flags+=("--user-profile-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-delete-workteam {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--workteam-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-algorithm {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--algorithm-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-app {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-id"); 
$flags+=("--user-profile-name"); 
$flags+=("--app-type"); 
$flags+=("--app-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-auto-ml-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-ml-job-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-code-repository {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--code-repository-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-compilation-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--compilation-job-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-endpoint-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-config-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-experiment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--experiment-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-flow-definition {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--flow-definition-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-human-task-ui {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--human-task-ui-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-hyper-parameter-tuning-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hyper-parameter-tuning-job-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-labeling-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--labeling-job-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-model {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--model-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-model-package {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--model-package-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-monitoring-schedule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--monitoring-schedule-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-notebook-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--notebook-instance-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-notebook-instance-lifecycle-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--notebook-instance-lifecycle-config-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-processing-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--processing-job-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-subscribed-workteam {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--workteam-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-training-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--training-job-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-transform-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transform-job-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-trial {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--trial-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-trial-component {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--trial-component-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-user-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-id"); 
$flags+=("--user-profile-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-workforce {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--workforce-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-describe-workteam {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--workteam-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-disassociate-trial-component {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--trial-component-name"); 
$flags+=("--trial-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-get-search-suggestions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource"); 
$flags+=("--suggestion-query"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-algorithms {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--creation-time-after"); 
$flags+=("--creation-time-before"); 
$flags+=("--name-contains"); 
$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-apps {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sort-order"); 
$flags+=("--sort-by"); 
$flags+=("--domain-id-equals"); 
$flags+=("--user-profile-name-equals"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-auto-ml-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--creation-time-after"); 
$flags+=("--creation-time-before"); 
$flags+=("--last-modified-time-after"); 
$flags+=("--last-modified-time-before"); 
$flags+=("--name-contains"); 
$flags+=("--status-equals"); 
$flags+=("--sort-order"); 
$flags+=("--sort-by"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-candidates-for-auto-ml-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-ml-job-name"); 
$flags+=("--status-equals"); 
$flags+=("--candidate-name-equals"); 
$flags+=("--sort-order"); 
$flags+=("--sort-by"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-code-repositories {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--creation-time-after"); 
$flags+=("--creation-time-before"); 
$flags+=("--last-modified-time-after"); 
$flags+=("--last-modified-time-before"); 
$flags+=("--name-contains"); 
$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-compilation-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--creation-time-after"); 
$flags+=("--creation-time-before"); 
$flags+=("--last-modified-time-after"); 
$flags+=("--last-modified-time-before"); 
$flags+=("--name-contains"); 
$flags+=("--status-equals"); 
$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-domains {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-endpoint-configs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--name-contains"); 
$flags+=("--creation-time-before"); 
$flags+=("--creation-time-after"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-endpoints {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--name-contains"); 
$flags+=("--creation-time-before"); 
$flags+=("--creation-time-after"); 
$flags+=("--last-modified-time-before"); 
$flags+=("--last-modified-time-after"); 
$flags+=("--status-equals"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-experiments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--created-after"); 
$flags+=("--created-before"); 
$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-flow-definitions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--creation-time-after"); 
$flags+=("--creation-time-before"); 
$flags+=("--sort-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-human-task-uis {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--creation-time-after"); 
$flags+=("--creation-time-before"); 
$flags+=("--sort-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-hyper-parameter-tuning-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--name-contains"); 
$flags+=("--creation-time-after"); 
$flags+=("--creation-time-before"); 
$flags+=("--last-modified-time-after"); 
$flags+=("--last-modified-time-before"); 
$flags+=("--status-equals"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-labeling-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--creation-time-after"); 
$flags+=("--creation-time-before"); 
$flags+=("--last-modified-time-after"); 
$flags+=("--last-modified-time-before"); 
$flags+=("--name-contains"); 
$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--status-equals"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-labeling-jobs-for-workteam {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--workteam-arn"); 
$flags+=("--creation-time-after"); 
$flags+=("--creation-time-before"); 
$flags+=("--job-reference-code-contains"); 
$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-model-packages {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--creation-time-after"); 
$flags+=("--creation-time-before"); 
$flags+=("--name-contains"); 
$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-models {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--name-contains"); 
$flags+=("--creation-time-before"); 
$flags+=("--creation-time-after"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-monitoring-executions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--monitoring-schedule-name"); 
$flags+=("--endpoint-name"); 
$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--scheduled-time-before"); 
$flags+=("--scheduled-time-after"); 
$flags+=("--creation-time-before"); 
$flags+=("--creation-time-after"); 
$flags+=("--last-modified-time-before"); 
$flags+=("--last-modified-time-after"); 
$flags+=("--status-equals"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-monitoring-schedules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-name"); 
$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--name-contains"); 
$flags+=("--creation-time-before"); 
$flags+=("--creation-time-after"); 
$flags+=("--last-modified-time-before"); 
$flags+=("--last-modified-time-after"); 
$flags+=("--status-equals"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-notebook-instance-lifecycle-configs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--name-contains"); 
$flags+=("--creation-time-before"); 
$flags+=("--creation-time-after"); 
$flags+=("--last-modified-time-before"); 
$flags+=("--last-modified-time-after"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-notebook-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--name-contains"); 
$flags+=("--creation-time-before"); 
$flags+=("--creation-time-after"); 
$flags+=("--last-modified-time-before"); 
$flags+=("--last-modified-time-after"); 
$flags+=("--status-equals"); 
$flags+=("--notebook-instance-lifecycle-config-name-contains"); 
$flags+=("--default-code-repository-contains"); 
$flags+=("--additional-code-repository-equals"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-processing-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--creation-time-after"); 
$flags+=("--creation-time-before"); 
$flags+=("--last-modified-time-after"); 
$flags+=("--last-modified-time-before"); 
$flags+=("--name-contains"); 
$flags+=("--status-equals"); 
$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-subscribed-workteams {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name-contains"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-training-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--creation-time-after"); 
$flags+=("--creation-time-before"); 
$flags+=("--last-modified-time-after"); 
$flags+=("--last-modified-time-before"); 
$flags+=("--name-contains"); 
$flags+=("--status-equals"); 
$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-training-jobs-for-hyper-parameter-tuning-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hyper-parameter-tuning-job-name"); 
$flags+=("--status-equals"); 
$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-transform-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--creation-time-after"); 
$flags+=("--creation-time-before"); 
$flags+=("--last-modified-time-after"); 
$flags+=("--last-modified-time-before"); 
$flags+=("--name-contains"); 
$flags+=("--status-equals"); 
$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-trial-components {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--experiment-name"); 
$flags+=("--trial-name"); 
$flags+=("--source-arn"); 
$flags+=("--created-after"); 
$flags+=("--created-before"); 
$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-trials {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--experiment-name"); 
$flags+=("--trial-component-name"); 
$flags+=("--created-after"); 
$flags+=("--created-before"); 
$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-user-profiles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sort-order"); 
$flags+=("--sort-by"); 
$flags+=("--domain-id-equals"); 
$flags+=("--user-profile-name-contains"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-list-workteams {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--name-contains"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-render-ui-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ui-template"); 
$flags+=("--task"); 
$flags+=("--role-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-search {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource"); 
$flags+=("--search-expression"); 
$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-start-monitoring-schedule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--monitoring-schedule-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-start-notebook-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--notebook-instance-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-stop-auto-ml-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-ml-job-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-stop-compilation-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--compilation-job-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-stop-hyper-parameter-tuning-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hyper-parameter-tuning-job-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-stop-labeling-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--labeling-job-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-stop-monitoring-schedule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--monitoring-schedule-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-stop-notebook-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--notebook-instance-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-stop-processing-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--processing-job-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-stop-training-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--training-job-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-stop-transform-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transform-job-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-update-code-repository {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--code-repository-name"); 
$flags+=("--git-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-update-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-id"); 
$flags+=("--default-user-settings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-update-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-name"); 
$flags+=("--endpoint-config-name"); 
$flags+=("--retain-all-variant-properties"); 
$flags+=("--no-retain-all-variant-properties"); 
$flags+=("--exclude-retained-variant-properties"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-update-endpoint-weights-and-capacities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-name"); 
$flags+=("--desired-weights-and-capacities"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-update-experiment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--experiment-name"); 
$flags+=("--display-name"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-update-monitoring-schedule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--monitoring-schedule-name"); 
$flags+=("--monitoring-schedule-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-update-notebook-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--notebook-instance-name"); 
$flags+=("--instance-type"); 
$flags+=("--role-arn"); 
$flags+=("--lifecycle-config-name"); 
$flags+=("--disassociate-lifecycle-config"); 
$flags+=("--no-disassociate-lifecycle-config"); 
$flags+=("--volume-size-in-gb"); 
$flags+=("--default-code-repository"); 
$flags+=("--additional-code-repositories"); 
$flags+=("--accelerator-types"); 
$flags+=("--disassociate-accelerator-types"); 
$flags+=("--no-disassociate-accelerator-types"); 
$flags+=("--disassociate-default-code-repository"); 
$flags+=("--no-disassociate-default-code-repository"); 
$flags+=("--disassociate-additional-code-repositories"); 
$flags+=("--no-disassociate-additional-code-repositories"); 
$flags+=("--root-access"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-update-notebook-instance-lifecycle-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--notebook-instance-lifecycle-config-name"); 
$flags+=("--on-create"); 
$flags+=("--on-start"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-update-trial {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--trial-name"); 
$flags+=("--display-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-update-trial-component {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--trial-component-name"); 
$flags+=("--display-name"); 
$flags+=("--status"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--parameters"); 
$flags+=("--parameters-to-remove"); 
$flags+=("--input-artifacts"); 
$flags+=("--input-artifacts-to-remove"); 
$flags+=("--output-artifacts"); 
$flags+=("--output-artifacts-to-remove"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-update-user-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-id"); 
$flags+=("--user-profile-name"); 
$flags+=("--user-settings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-update-workforce {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--workforce-name"); 
$flags+=("--source-ip-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-update-workteam {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--workteam-name"); 
$flags+=("--member-definitions"); 
$flags+=("--description"); 
$flags+=("--notification-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-sagemaker-a2i-runtime {
    $commands = [System.Collections.ArrayList]@();

$commands+=("delete-human-loop"); 
$commands+=("describe-human-loop"); 
$commands+=("list-human-loops"); 
$commands+=("start-human-loop"); 
$commands+=("stop-human-loop");

return $commands;
}

 function Get-sagemaker-a2i-runtime-delete-human-loop {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--human-loop-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-a2i-runtime-describe-human-loop {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--human-loop-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-a2i-runtime-list-human-loops {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--creation-time-after"); 
$flags+=("--creation-time-before"); 
$flags+=("--flow-definition-arn"); 
$flags+=("--sort-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-a2i-runtime-start-human-loop {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--human-loop-name"); 
$flags+=("--flow-definition-arn"); 
$flags+=("--human-loop-input"); 
$flags+=("--data-attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-a2i-runtime-stop-human-loop {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--human-loop-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sagemaker-runtime {
    $commands = [System.Collections.ArrayList]@();

$commands+=("invoke-endpoint");

return $commands;
}

 function Get-sagemaker-runtime-invoke-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-name"); 
$flags+=("--body"); 
$flags+=("--content-type"); 
$flags+=("--accept"); 
$flags+=("--custom-attributes"); 
$flags+=("--target-model");

return $flags;
}

 function Get-savingsplans {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-savings-plan"); 
$commands+=("describe-savings-plan-rates"); 
$commands+=("describe-savings-plans"); 
$commands+=("describe-savings-plans-offering-rates"); 
$commands+=("describe-savings-plans-offerings"); 
$commands+=("list-tags-for-resource"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource");

return $commands;
}

 function Get-savingsplans-create-savings-plan {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--savings-plan-offering-id"); 
$flags+=("--commitment"); 
$flags+=("--upfront-payment-amount"); 
$flags+=("--client-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-savingsplans-describe-savings-plan-rates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--savings-plan-id"); 
$flags+=("--filters"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-savingsplans-describe-savings-plans {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--savings-plan-arns"); 
$flags+=("--savings-plan-ids"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--states"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-savingsplans-describe-savings-plans-offering-rates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--savings-plan-offering-ids"); 
$flags+=("--savings-plan-payment-options"); 
$flags+=("--savings-plan-types"); 
$flags+=("--products"); 
$flags+=("--service-codes"); 
$flags+=("--usage-types"); 
$flags+=("--operations"); 
$flags+=("--filters"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-savingsplans-describe-savings-plans-offerings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--offering-ids"); 
$flags+=("--payment-options"); 
$flags+=("--product-type"); 
$flags+=("--plan-types"); 
$flags+=("--durations"); 
$flags+=("--currencies"); 
$flags+=("--descriptions"); 
$flags+=("--service-codes"); 
$flags+=("--usage-types"); 
$flags+=("--operations"); 
$flags+=("--filters"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-savingsplans-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-savingsplans-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-savingsplans-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-discoverer"); 
$commands+=("create-registry"); 
$commands+=("create-schema"); 
$commands+=("delete-discoverer"); 
$commands+=("delete-registry"); 
$commands+=("delete-resource-policy"); 
$commands+=("delete-schema"); 
$commands+=("delete-schema-version"); 
$commands+=("describe-code-binding"); 
$commands+=("describe-discoverer"); 
$commands+=("describe-registry"); 
$commands+=("describe-schema"); 
$commands+=("get-code-binding-source"); 
$commands+=("get-discovered-schema"); 
$commands+=("get-resource-policy"); 
$commands+=("list-discoverers"); 
$commands+=("list-registries"); 
$commands+=("list-schema-versions"); 
$commands+=("list-schemas"); 
$commands+=("list-tags-for-resource"); 
$commands+=("put-code-binding"); 
$commands+=("put-resource-policy"); 
$commands+=("search-schemas"); 
$commands+=("start-discoverer"); 
$commands+=("stop-discoverer"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-discoverer"); 
$commands+=("update-registry"); 
$commands+=("update-schema"); 
$commands+=("wait");

return $commands;
}

 function Get-schemas-create-discoverer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--source-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-create-registry {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--registry-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-create-schema {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--content"); 
$flags+=("--description"); 
$flags+=("--registry-name"); 
$flags+=("--schema-name"); 
$flags+=("--tags"); 
$flags+=("--type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-delete-discoverer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--discoverer-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-delete-registry {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-delete-resource-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-delete-schema {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-name"); 
$flags+=("--schema-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-delete-schema-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-name"); 
$flags+=("--schema-name"); 
$flags+=("--schema-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-describe-code-binding {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--language"); 
$flags+=("--registry-name"); 
$flags+=("--schema-name"); 
$flags+=("--schema-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-describe-discoverer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--discoverer-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-describe-registry {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-describe-schema {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-name"); 
$flags+=("--schema-name"); 
$flags+=("--schema-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-get-code-binding-source {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--language"); 
$flags+=("--registry-name"); 
$flags+=("--schema-name"); 
$flags+=("--schema-version");

return $flags;
}

 function Get-schemas-get-discovered-schema {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--events"); 
$flags+=("--type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-get-resource-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-list-discoverers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--discoverer-id-prefix"); 
$flags+=("--source-arn-prefix"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-list-registries {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-name-prefix"); 
$flags+=("--scope"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-list-schema-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-name"); 
$flags+=("--schema-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-list-schemas {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registry-name"); 
$flags+=("--schema-name-prefix"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-put-code-binding {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--language"); 
$flags+=("--registry-name"); 
$flags+=("--schema-name"); 
$flags+=("--schema-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-put-resource-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--policy"); 
$flags+=("--registry-name"); 
$flags+=("--revision-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-search-schemas {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--keywords"); 
$flags+=("--registry-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-start-discoverer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--discoverer-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-stop-discoverer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--discoverer-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-update-discoverer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--discoverer-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-update-registry {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--registry-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-update-schema {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-token-id"); 
$flags+=("--content"); 
$flags+=("--description"); 
$flags+=("--registry-name"); 
$flags+=("--schema-name"); 
$flags+=("--type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-schemas-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-sdb {
    $commands = [System.Collections.ArrayList]@();

$commands+=("batch-delete-attributes"); 
$commands+=("batch-put-attributes"); 
$commands+=("create-domain"); 
$commands+=("delete-attributes"); 
$commands+=("delete-domain"); 
$commands+=("domain-metadata"); 
$commands+=("get-attributes"); 
$commands+=("list-domains"); 
$commands+=("put-attributes"); 
$commands+=("select");

return $commands;
}

 function Get-sdb-batch-delete-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--items"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sdb-batch-put-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--items"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sdb-create-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sdb-delete-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--item-name"); 
$flags+=("--attributes"); 
$flags+=("--expected"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sdb-delete-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sdb-domain-metadata {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sdb-get-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--item-name"); 
$flags+=("--attribute-names"); 
$flags+=("--consistent-read"); 
$flags+=("--no-consistent-read"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sdb-list-domains {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sdb-put-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain-name"); 
$flags+=("--item-name"); 
$flags+=("--attributes"); 
$flags+=("--expected"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sdb-select {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--select-expression"); 
$flags+=("--consistent-read"); 
$flags+=("--no-consistent-read"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-secretsmanager {
    $commands = [System.Collections.ArrayList]@();

$commands+=("cancel-rotate-secret"); 
$commands+=("create-secret"); 
$commands+=("delete-resource-policy"); 
$commands+=("delete-secret"); 
$commands+=("describe-secret"); 
$commands+=("get-random-password"); 
$commands+=("get-resource-policy"); 
$commands+=("get-secret-value"); 
$commands+=("list-secret-version-ids"); 
$commands+=("list-secrets"); 
$commands+=("put-resource-policy"); 
$commands+=("put-secret-value"); 
$commands+=("restore-secret"); 
$commands+=("rotate-secret"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-secret"); 
$commands+=("update-secret-version-stage");

return $commands;
}

 function Get-secretsmanager-cancel-rotate-secret {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--secret-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-secretsmanager-create-secret {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--client-request-token"); 
$flags+=("--description"); 
$flags+=("--kms-key-id"); 
$flags+=("--secret-binary"); 
$flags+=("--secret-string"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-secretsmanager-delete-resource-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--secret-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-secretsmanager-delete-secret {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--secret-id"); 
$flags+=("--recovery-window-in-days"); 
$flags+=("--force-delete-without-recovery"); 
$flags+=("--no-force-delete-without-recovery"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-secretsmanager-describe-secret {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--secret-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-secretsmanager-get-random-password {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--password-length"); 
$flags+=("--exclude-characters"); 
$flags+=("--exclude-numbers"); 
$flags+=("--no-exclude-numbers"); 
$flags+=("--exclude-punctuation"); 
$flags+=("--no-exclude-punctuation"); 
$flags+=("--exclude-uppercase"); 
$flags+=("--no-exclude-uppercase"); 
$flags+=("--exclude-lowercase"); 
$flags+=("--no-exclude-lowercase"); 
$flags+=("--include-space"); 
$flags+=("--no-include-space"); 
$flags+=("--require-each-included-type"); 
$flags+=("--no-require-each-included-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-secretsmanager-get-resource-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--secret-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-secretsmanager-get-secret-value {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--secret-id"); 
$flags+=("--version-id"); 
$flags+=("--version-stage"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-secretsmanager-list-secret-version-ids {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--secret-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--include-deprecated"); 
$flags+=("--no-include-deprecated"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-secretsmanager-list-secrets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-secretsmanager-put-resource-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--secret-id"); 
$flags+=("--resource-policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-secretsmanager-put-secret-value {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--secret-id"); 
$flags+=("--client-request-token"); 
$flags+=("--secret-binary"); 
$flags+=("--secret-string"); 
$flags+=("--version-stages"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-secretsmanager-restore-secret {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--secret-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-secretsmanager-rotate-secret {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--secret-id"); 
$flags+=("--client-request-token"); 
$flags+=("--rotation-lambda-arn"); 
$flags+=("--rotation-rules"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-secretsmanager-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--secret-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-secretsmanager-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--secret-id"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-secretsmanager-update-secret {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--secret-id"); 
$flags+=("--client-request-token"); 
$flags+=("--description"); 
$flags+=("--kms-key-id"); 
$flags+=("--secret-binary"); 
$flags+=("--secret-string"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-secretsmanager-update-secret-version-stage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--secret-id"); 
$flags+=("--version-stage"); 
$flags+=("--remove-from-version-id"); 
$flags+=("--move-to-version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub {
    $commands = [System.Collections.ArrayList]@();

$commands+=("accept-invitation"); 
$commands+=("batch-disable-standards"); 
$commands+=("batch-enable-standards"); 
$commands+=("batch-import-findings"); 
$commands+=("batch-update-findings"); 
$commands+=("create-action-target"); 
$commands+=("create-insight"); 
$commands+=("create-members"); 
$commands+=("decline-invitations"); 
$commands+=("delete-action-target"); 
$commands+=("delete-insight"); 
$commands+=("delete-invitations"); 
$commands+=("delete-members"); 
$commands+=("describe-action-targets"); 
$commands+=("describe-hub"); 
$commands+=("describe-products"); 
$commands+=("describe-standards"); 
$commands+=("describe-standards-controls"); 
$commands+=("disable-import-findings-for-product"); 
$commands+=("disable-security-hub"); 
$commands+=("disassociate-from-master-account"); 
$commands+=("disassociate-members"); 
$commands+=("enable-import-findings-for-product"); 
$commands+=("enable-security-hub"); 
$commands+=("get-enabled-standards"); 
$commands+=("get-findings"); 
$commands+=("get-insight-results"); 
$commands+=("get-insights"); 
$commands+=("get-invitations-count"); 
$commands+=("get-master-account"); 
$commands+=("get-members"); 
$commands+=("invite-members"); 
$commands+=("list-enabled-products-for-import"); 
$commands+=("list-invitations"); 
$commands+=("list-members"); 
$commands+=("list-tags-for-resource"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-action-target"); 
$commands+=("update-findings"); 
$commands+=("update-insight"); 
$commands+=("update-standards-control");

return $commands;
}

 function Get-securityhub-accept-invitation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--master-id"); 
$flags+=("--invitation-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-batch-disable-standards {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--standards-subscription-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-batch-enable-standards {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--standards-subscription-requests"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-batch-import-findings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--findings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-batch-update-findings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--finding-identifiers"); 
$flags+=("--note"); 
$flags+=("--severity"); 
$flags+=("--verification-state"); 
$flags+=("--confidence"); 
$flags+=("--criticality"); 
$flags+=("--types"); 
$flags+=("--user-defined-fields"); 
$flags+=("--workflow"); 
$flags+=("--related-findings"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-create-action-target {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-create-insight {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--filters"); 
$flags+=("--group-by-attribute"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-create-members {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-details"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-decline-invitations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-delete-action-target {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--action-target-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-delete-insight {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--insight-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-delete-invitations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-delete-members {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-describe-action-targets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--action-target-arns"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-describe-hub {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--hub-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-describe-products {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-describe-standards {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-describe-standards-controls {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--standards-subscription-arn"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-disable-import-findings-for-product {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--product-subscription-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-disable-security-hub {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-disassociate-from-master-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-disassociate-members {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-enable-import-findings-for-product {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--product-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-enable-security-hub {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--tags"); 
$flags+=("--enable-default-standards"); 
$flags+=("--no-enable-default-standards"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-get-enabled-standards {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--standards-subscription-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-get-findings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--sort-criteria"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-get-insight-results {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--insight-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-get-insights {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--insight-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-get-invitations-count {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-get-master-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-get-members {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-invite-members {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--account-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-list-enabled-products-for-import {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-list-invitations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-list-members {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--only-associated"); 
$flags+=("--no-only-associated"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-update-action-target {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--action-target-arn"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-update-findings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--note"); 
$flags+=("--record-state"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-update-insight {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--insight-arn"); 
$flags+=("--name"); 
$flags+=("--filters"); 
$flags+=("--group-by-attribute"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-securityhub-update-standards-control {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--standards-control-arn"); 
$flags+=("--control-status"); 
$flags+=("--disabled-reason"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-serverlessrepo {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-application"); 
$commands+=("create-application-version"); 
$commands+=("create-cloud-formation-change-set"); 
$commands+=("create-cloud-formation-template"); 
$commands+=("delete-application"); 
$commands+=("get-application"); 
$commands+=("get-application-policy"); 
$commands+=("get-cloud-formation-template"); 
$commands+=("list-application-dependencies"); 
$commands+=("list-application-versions"); 
$commands+=("list-applications"); 
$commands+=("put-application-policy"); 
$commands+=("unshare-application"); 
$commands+=("update-application");

return $commands;
}

 function Get-serverlessrepo-create-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--author"); 
$flags+=("--description"); 
$flags+=("--home-page-url"); 
$flags+=("--labels"); 
$flags+=("--license-body"); 
$flags+=("--license-url"); 
$flags+=("--name"); 
$flags+=("--readme-body"); 
$flags+=("--readme-url"); 
$flags+=("--semantic-version"); 
$flags+=("--source-code-archive-url"); 
$flags+=("--source-code-url"); 
$flags+=("--spdx-license-id"); 
$flags+=("--template-body"); 
$flags+=("--template-url"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-serverlessrepo-create-application-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--semantic-version"); 
$flags+=("--source-code-archive-url"); 
$flags+=("--source-code-url"); 
$flags+=("--template-body"); 
$flags+=("--template-url"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-serverlessrepo-create-cloud-formation-change-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--capabilities"); 
$flags+=("--change-set-name"); 
$flags+=("--client-token"); 
$flags+=("--description"); 
$flags+=("--notification-arns"); 
$flags+=("--parameter-overrides"); 
$flags+=("--resource-types"); 
$flags+=("--rollback-configuration"); 
$flags+=("--semantic-version"); 
$flags+=("--stack-name"); 
$flags+=("--tags"); 
$flags+=("--template-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-serverlessrepo-create-cloud-formation-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--semantic-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-serverlessrepo-delete-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-serverlessrepo-get-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--semantic-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-serverlessrepo-get-application-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-serverlessrepo-get-cloud-formation-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--template-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-serverlessrepo-list-application-dependencies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--max-items"); 
$flags+=("--semantic-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-serverlessrepo-list-application-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-serverlessrepo-list-applications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-serverlessrepo-put-application-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--statements"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-serverlessrepo-unshare-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--organization-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-serverlessrepo-update-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--application-id"); 
$flags+=("--author"); 
$flags+=("--description"); 
$flags+=("--home-page-url"); 
$flags+=("--labels"); 
$flags+=("--readme-body"); 
$flags+=("--readme-url"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-service-quotas {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-service-quota-template"); 
$commands+=("delete-service-quota-increase-request-from-template"); 
$commands+=("disassociate-service-quota-template"); 
$commands+=("get-association-for-service-quota-template"); 
$commands+=("get-aws-default-service-quota"); 
$commands+=("get-requested-service-quota-change"); 
$commands+=("get-service-quota"); 
$commands+=("get-service-quota-increase-request-from-template"); 
$commands+=("list-aws-default-service-quotas"); 
$commands+=("list-requested-service-quota-change-history"); 
$commands+=("list-requested-service-quota-change-history-by-quota"); 
$commands+=("list-service-quota-increase-requests-in-template"); 
$commands+=("list-service-quotas"); 
$commands+=("list-services"); 
$commands+=("put-service-quota-increase-request-into-template"); 
$commands+=("request-service-quota-increase");

return $commands;
}

 function Get-service-quotas-associate-service-quota-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-service-quotas-delete-service-quota-increase-request-from-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-code"); 
$flags+=("--quota-code"); 
$flags+=("--aws-region"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-service-quotas-disassociate-service-quota-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-service-quotas-get-association-for-service-quota-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-service-quotas-get-aws-default-service-quota {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-code"); 
$flags+=("--quota-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-service-quotas-get-requested-service-quota-change {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--request-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-service-quotas-get-service-quota {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-code"); 
$flags+=("--quota-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-service-quotas-get-service-quota-increase-request-from-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-code"); 
$flags+=("--quota-code"); 
$flags+=("--aws-region"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-service-quotas-list-aws-default-service-quotas {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-service-quotas-list-requested-service-quota-change-history {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-code"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-service-quotas-list-requested-service-quota-change-history-by-quota {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-code"); 
$flags+=("--quota-code"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-service-quotas-list-service-quota-increase-requests-in-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-code"); 
$flags+=("--aws-region"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-service-quotas-list-service-quotas {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-service-quotas-list-services {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-service-quotas-put-service-quota-increase-request-into-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--quota-code"); 
$flags+=("--service-code"); 
$flags+=("--aws-region"); 
$flags+=("--desired-value"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-service-quotas-request-service-quota-increase {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-code"); 
$flags+=("--quota-code"); 
$flags+=("--desired-value"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog {
    $commands = [System.Collections.ArrayList]@();

$commands+=("accept-portfolio-share"); 
$commands+=("associate-budget-with-resource"); 
$commands+=("associate-principal-with-portfolio"); 
$commands+=("associate-product-with-portfolio"); 
$commands+=("associate-service-action-with-provisioning-artifact"); 
$commands+=("associate-tag-option-with-resource"); 
$commands+=("batch-associate-service-action-with-provisioning-artifact"); 
$commands+=("batch-disassociate-service-action-from-provisioning-artifact"); 
$commands+=("copy-product"); 
$commands+=("create-constraint"); 
$commands+=("create-portfolio"); 
$commands+=("create-portfolio-share"); 
$commands+=("create-product"); 
$commands+=("create-provisioned-product-plan"); 
$commands+=("create-provisioning-artifact"); 
$commands+=("create-service-action"); 
$commands+=("create-tag-option"); 
$commands+=("delete-constraint"); 
$commands+=("delete-portfolio"); 
$commands+=("delete-portfolio-share"); 
$commands+=("delete-product"); 
$commands+=("delete-provisioned-product-plan"); 
$commands+=("delete-provisioning-artifact"); 
$commands+=("delete-service-action"); 
$commands+=("delete-tag-option"); 
$commands+=("describe-constraint"); 
$commands+=("describe-copy-product-status"); 
$commands+=("describe-portfolio"); 
$commands+=("describe-portfolio-share-status"); 
$commands+=("describe-product"); 
$commands+=("describe-product-as-admin"); 
$commands+=("describe-product-view"); 
$commands+=("describe-provisioned-product"); 
$commands+=("describe-provisioned-product-plan"); 
$commands+=("describe-provisioning-artifact"); 
$commands+=("describe-provisioning-parameters"); 
$commands+=("describe-record"); 
$commands+=("describe-service-action"); 
$commands+=("describe-service-action-execution-parameters"); 
$commands+=("describe-tag-option"); 
$commands+=("disable-aws-organizations-access"); 
$commands+=("disassociate-budget-from-resource"); 
$commands+=("disassociate-principal-from-portfolio"); 
$commands+=("disassociate-product-from-portfolio"); 
$commands+=("disassociate-service-action-from-provisioning-artifact"); 
$commands+=("disassociate-tag-option-from-resource"); 
$commands+=("enable-aws-organizations-access"); 
$commands+=("execute-provisioned-product-plan"); 
$commands+=("execute-provisioned-product-service-action"); 
$commands+=("generate/index"); 
$commands+=("get-aws-organizations-access-status"); 
$commands+=("list-accepted-portfolio-shares"); 
$commands+=("list-budgets-for-resource"); 
$commands+=("list-constraints-for-portfolio"); 
$commands+=("list-launch-paths"); 
$commands+=("list-organization-portfolio-access"); 
$commands+=("list-portfolio-access"); 
$commands+=("list-portfolios"); 
$commands+=("list-portfolios-for-product"); 
$commands+=("list-principals-for-portfolio"); 
$commands+=("list-provisioned-product-plans"); 
$commands+=("list-provisioning-artifacts"); 
$commands+=("list-provisioning-artifacts-for-service-action"); 
$commands+=("list-record-history"); 
$commands+=("list-resources-for-tag-option"); 
$commands+=("list-service-actions"); 
$commands+=("list-service-actions-for-provisioning-artifact"); 
$commands+=("list-stack-instances-for-provisioned-product"); 
$commands+=("list-tag-options"); 
$commands+=("provision-product"); 
$commands+=("reject-portfolio-share"); 
$commands+=("scan-provisioned-products"); 
$commands+=("search-products"); 
$commands+=("search-products-as-admin"); 
$commands+=("search-provisioned-products"); 
$commands+=("terminate-provisioned-product"); 
$commands+=("update-constraint"); 
$commands+=("update-portfolio"); 
$commands+=("update-product"); 
$commands+=("update-provisioned-product"); 
$commands+=("update-provisioned-product-properties"); 
$commands+=("update-provisioning-artifact"); 
$commands+=("update-service-action"); 
$commands+=("update-tag-option");

return $commands;
}

 function Get-servicecatalog-accept-portfolio-share {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--portfolio-id"); 
$flags+=("--portfolio-share-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-associate-budget-with-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--budget-name"); 
$flags+=("--resource-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-associate-principal-with-portfolio {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--portfolio-id"); 
$flags+=("--principal-arn"); 
$flags+=("--principal-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-associate-product-with-portfolio {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--product-id"); 
$flags+=("--portfolio-id"); 
$flags+=("--source-portfolio-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-associate-service-action-with-provisioning-artifact {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--product-id"); 
$flags+=("--provisioning-artifact-id"); 
$flags+=("--service-action-id"); 
$flags+=("--accept-language"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-associate-tag-option-with-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--tag-option-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-batch-associate-service-action-with-provisioning-artifact {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-action-associations"); 
$flags+=("--accept-language"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-batch-disassociate-service-action-from-provisioning-artifact {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-action-associations"); 
$flags+=("--accept-language"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-copy-product {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--source-product-arn"); 
$flags+=("--target-product-id"); 
$flags+=("--target-product-name"); 
$flags+=("--source-provisioning-artifact-identifiers"); 
$flags+=("--copy-options"); 
$flags+=("--idempotency-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-create-constraint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--portfolio-id"); 
$flags+=("--product-id"); 
$flags+=("--parameters"); 
$flags+=("--type"); 
$flags+=("--description"); 
$flags+=("--idempotency-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-create-portfolio {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--display-name"); 
$flags+=("--description"); 
$flags+=("--provider-name"); 
$flags+=("--tags"); 
$flags+=("--idempotency-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-create-portfolio-share {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--portfolio-id"); 
$flags+=("--account-id"); 
$flags+=("--organization-node"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-create-product {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--name"); 
$flags+=("--owner"); 
$flags+=("--description"); 
$flags+=("--distributor"); 
$flags+=("--support-description"); 
$flags+=("--support-email"); 
$flags+=("--support-url"); 
$flags+=("--product-type"); 
$flags+=("--tags"); 
$flags+=("--provisioning-artifact-parameters"); 
$flags+=("--idempotency-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-create-provisioned-product-plan {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--plan-name"); 
$flags+=("--plan-type"); 
$flags+=("--notification-arns"); 
$flags+=("--path-id"); 
$flags+=("--product-id"); 
$flags+=("--provisioned-product-name"); 
$flags+=("--provisioning-artifact-id"); 
$flags+=("--provisioning-parameters"); 
$flags+=("--idempotency-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-create-provisioning-artifact {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--product-id"); 
$flags+=("--parameters"); 
$flags+=("--idempotency-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-create-service-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--definition-type"); 
$flags+=("--definition"); 
$flags+=("--description"); 
$flags+=("--accept-language"); 
$flags+=("--idempotency-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-create-tag-option {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key"); 
$flags+=("--value"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-delete-constraint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-delete-portfolio {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-delete-portfolio-share {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--portfolio-id"); 
$flags+=("--account-id"); 
$flags+=("--organization-node"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-delete-product {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-delete-provisioned-product-plan {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--plan-id"); 
$flags+=("--ignore-errors"); 
$flags+=("--no-ignore-errors"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-delete-provisioning-artifact {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--product-id"); 
$flags+=("--provisioning-artifact-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-delete-service-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--accept-language"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-delete-tag-option {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-describe-constraint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-describe-copy-product-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--copy-product-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-describe-portfolio {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-describe-portfolio-share-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--portfolio-share-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-describe-product {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-describe-product-as-admin {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-describe-product-view {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-describe-provisioned-product {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-describe-provisioned-product-plan {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--plan-id"); 
$flags+=("--page-size"); 
$flags+=("--page-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-describe-provisioning-artifact {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--provisioning-artifact-id"); 
$flags+=("--product-id"); 
$flags+=("--verbose"); 
$flags+=("--no-verbose"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-describe-provisioning-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--product-id"); 
$flags+=("--provisioning-artifact-id"); 
$flags+=("--path-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-describe-record {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--id"); 
$flags+=("--page-token"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-describe-service-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--accept-language"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-describe-service-action-execution-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--provisioned-product-id"); 
$flags+=("--service-action-id"); 
$flags+=("--accept-language"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-describe-tag-option {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-disable-aws-organizations-access {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-disassociate-budget-from-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--budget-name"); 
$flags+=("--resource-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-disassociate-principal-from-portfolio {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--portfolio-id"); 
$flags+=("--principal-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-disassociate-product-from-portfolio {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--product-id"); 
$flags+=("--portfolio-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-disassociate-service-action-from-provisioning-artifact {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--product-id"); 
$flags+=("--provisioning-artifact-id"); 
$flags+=("--service-action-id"); 
$flags+=("--accept-language"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-disassociate-tag-option-from-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--tag-option-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-enable-aws-organizations-access {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-execute-provisioned-product-plan {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--plan-id"); 
$flags+=("--idempotency-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-execute-provisioned-product-service-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--provisioned-product-id"); 
$flags+=("--service-action-id"); 
$flags+=("--execute-token"); 
$flags+=("--accept-language"); 
$flags+=("--parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-generate/index {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-servicecatalog-get-aws-organizations-access-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-list-accepted-portfolio-shares {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--page-size"); 
$flags+=("--portfolio-share-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-list-budgets-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--resource-id"); 
$flags+=("--page-size"); 
$flags+=("--page-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-list-constraints-for-portfolio {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--portfolio-id"); 
$flags+=("--product-id"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-list-launch-paths {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--product-id"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-list-organization-portfolio-access {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--portfolio-id"); 
$flags+=("--organization-node-type"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-list-portfolio-access {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--portfolio-id"); 
$flags+=("--organization-parent-id"); 
$flags+=("--page-token"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-list-portfolios {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-list-portfolios-for-product {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--product-id"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-list-principals-for-portfolio {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--portfolio-id"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-list-provisioned-product-plans {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--provision-product-id"); 
$flags+=("--page-size"); 
$flags+=("--access-level-filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-list-provisioning-artifacts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--product-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-list-provisioning-artifacts-for-service-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-action-id"); 
$flags+=("--page-size"); 
$flags+=("--accept-language"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-list-record-history {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--access-level-filter"); 
$flags+=("--search-filter"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-list-resources-for-tag-option {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--tag-option-id"); 
$flags+=("--resource-type"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-list-service-actions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-list-service-actions-for-provisioning-artifact {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--product-id"); 
$flags+=("--provisioning-artifact-id"); 
$flags+=("--page-size"); 
$flags+=("--accept-language"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-list-stack-instances-for-provisioned-product {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--provisioned-product-id"); 
$flags+=("--page-token"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-list-tag-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-provision-product {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-reject-portfolio-share {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--portfolio-id"); 
$flags+=("--portfolio-share-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-scan-provisioned-products {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--access-level-filter"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-search-products {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--filters"); 
$flags+=("--page-size"); 
$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--page-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-search-products-as-admin {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--portfolio-id"); 
$flags+=("--filters"); 
$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--page-size"); 
$flags+=("--product-source"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-search-provisioned-products {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--access-level-filter"); 
$flags+=("--filters"); 
$flags+=("--sort-by"); 
$flags+=("--sort-order"); 
$flags+=("--page-size"); 
$flags+=("--page-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-terminate-provisioned-product {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--provisioned-product-name"); 
$flags+=("--provisioned-product-id"); 
$flags+=("--terminate-token"); 
$flags+=("--ignore-errors"); 
$flags+=("--no-ignore-errors"); 
$flags+=("--accept-language"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-update-constraint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--id"); 
$flags+=("--description"); 
$flags+=("--parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-update-portfolio {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--id"); 
$flags+=("--display-name"); 
$flags+=("--description"); 
$flags+=("--provider-name"); 
$flags+=("--add-tags"); 
$flags+=("--remove-tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-update-product {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--id"); 
$flags+=("--name"); 
$flags+=("--owner"); 
$flags+=("--description"); 
$flags+=("--distributor"); 
$flags+=("--support-description"); 
$flags+=("--support-email"); 
$flags+=("--support-url"); 
$flags+=("--add-tags"); 
$flags+=("--remove-tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-update-provisioned-product {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--provisioned-product-name"); 
$flags+=("--provisioned-product-id"); 
$flags+=("--product-id"); 
$flags+=("--provisioning-artifact-id"); 
$flags+=("--path-id"); 
$flags+=("--provisioning-parameters"); 
$flags+=("--provisioning-preferences"); 
$flags+=("--tags"); 
$flags+=("--update-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-update-provisioned-product-properties {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--provisioned-product-id"); 
$flags+=("--provisioned-product-properties"); 
$flags+=("--idempotency-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-update-provisioning-artifact {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--accept-language"); 
$flags+=("--product-id"); 
$flags+=("--provisioning-artifact-id"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--active"); 
$flags+=("--no-active"); 
$flags+=("--guidance"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-update-service-action {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--name"); 
$flags+=("--definition"); 
$flags+=("--description"); 
$flags+=("--accept-language"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicecatalog-update-tag-option {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--value"); 
$flags+=("--active"); 
$flags+=("--no-active"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicediscovery {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-http-namespace"); 
$commands+=("create-private-dns-namespace"); 
$commands+=("create-public-dns-namespace"); 
$commands+=("create-service"); 
$commands+=("delete-namespace"); 
$commands+=("delete-service"); 
$commands+=("deregister-instance"); 
$commands+=("discover-instances"); 
$commands+=("get-instance"); 
$commands+=("get-instances-health-status"); 
$commands+=("get-namespace"); 
$commands+=("get-operation"); 
$commands+=("get-service"); 
$commands+=("list-instances"); 
$commands+=("list-namespaces"); 
$commands+=("list-operations"); 
$commands+=("list-services"); 
$commands+=("register-instance"); 
$commands+=("update-instance-custom-health-status"); 
$commands+=("update-service");

return $commands;
}

 function Get-servicediscovery-create-http-namespace {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--creator-request-id"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicediscovery-create-private-dns-namespace {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--creator-request-id"); 
$flags+=("--description"); 
$flags+=("--vpc"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicediscovery-create-public-dns-namespace {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--creator-request-id"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicediscovery-create-service {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--namespace-id"); 
$flags+=("--creator-request-id"); 
$flags+=("--description"); 
$flags+=("--dns-config"); 
$flags+=("--health-check-config"); 
$flags+=("--health-check-custom-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicediscovery-delete-namespace {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicediscovery-delete-service {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicediscovery-deregister-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-id"); 
$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicediscovery-discover-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--namespace-name"); 
$flags+=("--service-name"); 
$flags+=("--max-results"); 
$flags+=("--query-parameters"); 
$flags+=("--health-status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicediscovery-get-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-id"); 
$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicediscovery-get-instances-health-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-id"); 
$flags+=("--instances"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicediscovery-get-namespace {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicediscovery-get-operation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--operation-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicediscovery-get-service {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicediscovery-list-instances {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicediscovery-list-namespaces {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicediscovery-list-operations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicediscovery-list-services {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicediscovery-register-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-id"); 
$flags+=("--instance-id"); 
$flags+=("--creator-request-id"); 
$flags+=("--attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicediscovery-update-instance-custom-health-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-id"); 
$flags+=("--instance-id"); 
$flags+=("--status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-servicediscovery-update-service {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--id"); 
$flags+=("--service"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses {
    $commands = [System.Collections.ArrayList]@();

$commands+=("clone-receipt-rule-set"); 
$commands+=("create-configuration-set"); 
$commands+=("create-configuration-set-event-destination"); 
$commands+=("create-configuration-set-tracking-options"); 
$commands+=("create-custom-verification-email-template"); 
$commands+=("create-receipt-filter"); 
$commands+=("create-receipt-rule"); 
$commands+=("create-receipt-rule-set"); 
$commands+=("create-template"); 
$commands+=("delete-configuration-set"); 
$commands+=("delete-configuration-set-event-destination"); 
$commands+=("delete-configuration-set-tracking-options"); 
$commands+=("delete-custom-verification-email-template"); 
$commands+=("delete-identity"); 
$commands+=("delete-identity-policy"); 
$commands+=("delete-receipt-filter"); 
$commands+=("delete-receipt-rule"); 
$commands+=("delete-receipt-rule-set"); 
$commands+=("delete-template"); 
$commands+=("describe-active-receipt-rule-set"); 
$commands+=("describe-configuration-set"); 
$commands+=("describe-receipt-rule"); 
$commands+=("describe-receipt-rule-set"); 
$commands+=("get-account-sending-enabled"); 
$commands+=("get-custom-verification-email-template"); 
$commands+=("get-identity-dkim-attributes"); 
$commands+=("get-identity-mail-from-domain-attributes"); 
$commands+=("get-identity-notification-attributes"); 
$commands+=("get-identity-policies"); 
$commands+=("get-identity-verification-attributes"); 
$commands+=("get-send-quota"); 
$commands+=("get-send-statistics"); 
$commands+=("get-template"); 
$commands+=("list-configuration-sets"); 
$commands+=("list-custom-verification-email-templates"); 
$commands+=("list-identities"); 
$commands+=("list-identity-policies"); 
$commands+=("list-receipt-filters"); 
$commands+=("list-receipt-rule-sets"); 
$commands+=("list-templates"); 
$commands+=("put-configuration-set-delivery-options"); 
$commands+=("put-identity-policy"); 
$commands+=("reorder-receipt-rule-set"); 
$commands+=("send-bounce"); 
$commands+=("send-bulk-templated-email"); 
$commands+=("send-custom-verification-email"); 
$commands+=("send-email"); 
$commands+=("send-raw-email"); 
$commands+=("send-templated-email"); 
$commands+=("set-active-receipt-rule-set"); 
$commands+=("set-identity-dkim-enabled"); 
$commands+=("set-identity-feedback-forwarding-enabled"); 
$commands+=("set-identity-headers-in-notifications-enabled"); 
$commands+=("set-identity-mail-from-domain"); 
$commands+=("set-identity-notification-topic"); 
$commands+=("set-receipt-rule-position"); 
$commands+=("test-render-template"); 
$commands+=("update-account-sending-enabled"); 
$commands+=("update-configuration-set-event-destination"); 
$commands+=("update-configuration-set-reputation-metrics-enabled"); 
$commands+=("update-configuration-set-sending-enabled"); 
$commands+=("update-configuration-set-tracking-options"); 
$commands+=("update-custom-verification-email-template"); 
$commands+=("update-receipt-rule"); 
$commands+=("update-template"); 
$commands+=("verify-domain-dkim"); 
$commands+=("verify-domain-identity"); 
$commands+=("verify-email-identity"); 
$commands+=("wait");

return $commands;
}

 function Get-ses-clone-receipt-rule-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-set-name"); 
$flags+=("--original-rule-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-create-configuration-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-create-configuration-set-event-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--event-destination"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-create-configuration-set-tracking-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--tracking-options"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-create-custom-verification-email-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--from-email-address"); 
$flags+=("--template-subject"); 
$flags+=("--template-content"); 
$flags+=("--success-redirection-url"); 
$flags+=("--failure-redirection-url"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-create-receipt-filter {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-create-receipt-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-set-name"); 
$flags+=("--after"); 
$flags+=("--rule"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-create-receipt-rule-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-create-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-delete-configuration-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-delete-configuration-set-event-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--event-destination-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-delete-configuration-set-tracking-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-delete-custom-verification-email-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-delete-identity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-delete-identity-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity"); 
$flags+=("--policy-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-delete-receipt-filter {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-delete-receipt-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-set-name"); 
$flags+=("--rule-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-delete-receipt-rule-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-delete-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-describe-active-receipt-rule-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-describe-configuration-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--configuration-set-attribute-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-describe-receipt-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-set-name"); 
$flags+=("--rule-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-describe-receipt-rule-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-get-account-sending-enabled {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-get-custom-verification-email-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-get-identity-dkim-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identities"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-get-identity-mail-from-domain-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identities"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-get-identity-notification-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identities"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-get-identity-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity"); 
$flags+=("--policy-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-get-identity-verification-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identities"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-get-send-quota {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-get-send-statistics {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-get-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-list-configuration-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-list-custom-verification-email-templates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-list-identities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity-type"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-list-identity-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-list-receipt-filters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-list-receipt-rule-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-list-templates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-put-configuration-set-delivery-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--delivery-options"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-put-identity-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity"); 
$flags+=("--policy-name"); 
$flags+=("--policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-reorder-receipt-rule-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-set-name"); 
$flags+=("--rule-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-send-bounce {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--original-message-id"); 
$flags+=("--bounce-sender"); 
$flags+=("--explanation"); 
$flags+=("--message-dsn"); 
$flags+=("--bounced-recipient-info-list"); 
$flags+=("--bounce-sender-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-send-bulk-templated-email {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source"); 
$flags+=("--source-arn"); 
$flags+=("--reply-to-addresses"); 
$flags+=("--return-path"); 
$flags+=("--return-path-arn"); 
$flags+=("--configuration-set-name"); 
$flags+=("--default-tags"); 
$flags+=("--template"); 
$flags+=("--template-arn"); 
$flags+=("--default-template-data"); 
$flags+=("--destinations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-send-custom-verification-email {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--email-address"); 
$flags+=("--template-name"); 
$flags+=("--configuration-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-send-email {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--destination"); 
$flags+=("--message"); 
$flags+=("--reply-to-addresses"); 
$flags+=("--return-path"); 
$flags+=("--source-arn"); 
$flags+=("--return-path-arn"); 
$flags+=("--tags"); 
$flags+=("--configuration-set-name"); 
$flags+=("--from"); 
$flags+=("--to"); 
$flags+=("--cc"); 
$flags+=("--bcc"); 
$flags+=("--subject"); 
$flags+=("--text"); 
$flags+=("--html"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-send-raw-email {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source"); 
$flags+=("--destinations"); 
$flags+=("--raw-message"); 
$flags+=("--from-arn"); 
$flags+=("--source-arn"); 
$flags+=("--return-path-arn"); 
$flags+=("--tags"); 
$flags+=("--configuration-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-send-templated-email {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source"); 
$flags+=("--destination"); 
$flags+=("--reply-to-addresses"); 
$flags+=("--return-path"); 
$flags+=("--source-arn"); 
$flags+=("--return-path-arn"); 
$flags+=("--tags"); 
$flags+=("--configuration-set-name"); 
$flags+=("--template"); 
$flags+=("--template-arn"); 
$flags+=("--template-data"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-set-active-receipt-rule-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-set-identity-dkim-enabled {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity"); 
$flags+=("--dkim-enabled"); 
$flags+=("--no-dkim-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-set-identity-feedback-forwarding-enabled {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity"); 
$flags+=("--forwarding-enabled"); 
$flags+=("--no-forwarding-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-set-identity-headers-in-notifications-enabled {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity"); 
$flags+=("--notification-type"); 
$flags+=("--enabled"); 
$flags+=("--no-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-set-identity-mail-from-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity"); 
$flags+=("--mail-from-domain"); 
$flags+=("--behavior-on-mx-failure"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-set-identity-notification-topic {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--identity"); 
$flags+=("--notification-type"); 
$flags+=("--sns-topic"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-set-receipt-rule-position {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-set-name"); 
$flags+=("--rule-name"); 
$flags+=("--after"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-test-render-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--template-data"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-update-account-sending-enabled {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--enabled"); 
$flags+=("--no-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-update-configuration-set-event-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--event-destination"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-update-configuration-set-reputation-metrics-enabled {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--enabled"); 
$flags+=("--no-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-update-configuration-set-sending-enabled {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--enabled"); 
$flags+=("--no-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-update-configuration-set-tracking-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--tracking-options"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-update-custom-verification-email-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template-name"); 
$flags+=("--from-email-address"); 
$flags+=("--template-subject"); 
$flags+=("--template-content"); 
$flags+=("--success-redirection-url"); 
$flags+=("--failure-redirection-url"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-update-receipt-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-set-name"); 
$flags+=("--rule"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-update-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--template"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-verify-domain-dkim {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-verify-domain-identity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-verify-email-identity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--email-address"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ses-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-sesv2 {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-configuration-set"); 
$commands+=("create-configuration-set-event-destination"); 
$commands+=("create-dedicated-ip-pool"); 
$commands+=("create-deliverability-test-report"); 
$commands+=("create-email-identity"); 
$commands+=("delete-configuration-set"); 
$commands+=("delete-configuration-set-event-destination"); 
$commands+=("delete-dedicated-ip-pool"); 
$commands+=("delete-email-identity"); 
$commands+=("delete-suppressed-destination"); 
$commands+=("get-account"); 
$commands+=("get-blacklist-reports"); 
$commands+=("get-configuration-set"); 
$commands+=("get-configuration-set-event-destinations"); 
$commands+=("get-dedicated-ip"); 
$commands+=("get-dedicated-ips"); 
$commands+=("get-deliverability-dashboard-options"); 
$commands+=("get-deliverability-test-report"); 
$commands+=("get-domain-deliverability-campaign"); 
$commands+=("get-domain-statistics-report"); 
$commands+=("get-email-identity"); 
$commands+=("get-suppressed-destination"); 
$commands+=("list-configuration-sets"); 
$commands+=("list-dedicated-ip-pools"); 
$commands+=("list-deliverability-test-reports"); 
$commands+=("list-domain-deliverability-campaigns"); 
$commands+=("list-email-identities"); 
$commands+=("list-suppressed-destinations"); 
$commands+=("list-tags-for-resource"); 
$commands+=("put-account-dedicated-ip-warmup-attributes"); 
$commands+=("put-account-sending-attributes"); 
$commands+=("put-account-suppression-attributes"); 
$commands+=("put-configuration-set-delivery-options"); 
$commands+=("put-configuration-set-reputation-options"); 
$commands+=("put-configuration-set-sending-options"); 
$commands+=("put-configuration-set-suppression-options"); 
$commands+=("put-configuration-set-tracking-options"); 
$commands+=("put-dedicated-ip-in-pool"); 
$commands+=("put-dedicated-ip-warmup-attributes"); 
$commands+=("put-deliverability-dashboard-option"); 
$commands+=("put-email-identity-dkim-attributes"); 
$commands+=("put-email-identity-dkim-signing-attributes"); 
$commands+=("put-email-identity-feedback-attributes"); 
$commands+=("put-email-identity-mail-from-attributes"); 
$commands+=("put-suppressed-destination"); 
$commands+=("send-email"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-configuration-set-event-destination");

return $commands;
}

 function Get-sesv2-create-configuration-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--tracking-options"); 
$flags+=("--delivery-options"); 
$flags+=("--reputation-options"); 
$flags+=("--sending-options"); 
$flags+=("--tags"); 
$flags+=("--suppression-options"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-create-configuration-set-event-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--event-destination-name"); 
$flags+=("--event-destination"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-create-dedicated-ip-pool {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pool-name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-create-deliverability-test-report {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--report-name"); 
$flags+=("--from-email-address"); 
$flags+=("--content"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-create-email-identity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--email-identity"); 
$flags+=("--tags"); 
$flags+=("--dkim-signing-attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-delete-configuration-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-delete-configuration-set-event-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--event-destination-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-delete-dedicated-ip-pool {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pool-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-delete-email-identity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--email-identity"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-delete-suppressed-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--email-address"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-get-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-get-blacklist-reports {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--blacklist-item-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-get-configuration-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-get-configuration-set-event-destinations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-get-dedicated-ip {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ip"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-get-dedicated-ips {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--pool-name"); 
$flags+=("--next-token"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-get-deliverability-dashboard-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-get-deliverability-test-report {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--report-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-get-domain-deliverability-campaign {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--campaign-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-get-domain-statistics-report {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--start-date"); 
$flags+=("--end-date"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-get-email-identity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--email-identity"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-get-suppressed-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--email-address"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-list-configuration-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-list-dedicated-ip-pools {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-list-deliverability-test-reports {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-list-domain-deliverability-campaigns {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--start-date"); 
$flags+=("--end-date"); 
$flags+=("--subscribed-domain"); 
$flags+=("--next-token"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-list-email-identities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-list-suppressed-destinations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--reasons"); 
$flags+=("--start-date"); 
$flags+=("--end-date"); 
$flags+=("--next-token"); 
$flags+=("--page-size"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-put-account-dedicated-ip-warmup-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-warmup-enabled"); 
$flags+=("--no-auto-warmup-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-put-account-sending-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sending-enabled"); 
$flags+=("--no-sending-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-put-account-suppression-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--suppressed-reasons"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-put-configuration-set-delivery-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--tls-policy"); 
$flags+=("--sending-pool-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-put-configuration-set-reputation-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--reputation-metrics-enabled"); 
$flags+=("--no-reputation-metrics-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-put-configuration-set-sending-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--sending-enabled"); 
$flags+=("--no-sending-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-put-configuration-set-suppression-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--suppressed-reasons"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-put-configuration-set-tracking-options {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--custom-redirect-domain"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-put-dedicated-ip-in-pool {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ip"); 
$flags+=("--destination-pool-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-put-dedicated-ip-warmup-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ip"); 
$flags+=("--warmup-percentage"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-put-deliverability-dashboard-option {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dashboard-enabled"); 
$flags+=("--no-dashboard-enabled"); 
$flags+=("--subscribed-domains"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-put-email-identity-dkim-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--email-identity"); 
$flags+=("--signing-enabled"); 
$flags+=("--no-signing-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-put-email-identity-dkim-signing-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--email-identity"); 
$flags+=("--signing-attributes-origin"); 
$flags+=("--signing-attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-put-email-identity-feedback-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--email-identity"); 
$flags+=("--email-forwarding-enabled"); 
$flags+=("--no-email-forwarding-enabled"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-put-email-identity-mail-from-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--email-identity"); 
$flags+=("--mail-from-domain"); 
$flags+=("--behavior-on-mx-failure"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-put-suppressed-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--email-address"); 
$flags+=("--reason"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-send-email {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--from-email-address"); 
$flags+=("--destination"); 
$flags+=("--reply-to-addresses"); 
$flags+=("--feedback-forwarding-email-address"); 
$flags+=("--content"); 
$flags+=("--email-tags"); 
$flags+=("--configuration-set-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sesv2-update-configuration-set-event-destination {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--configuration-set-name"); 
$flags+=("--event-destination-name"); 
$flags+=("--event-destination"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-shield {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-drt-log-bucket"); 
$commands+=("associate-drt-role"); 
$commands+=("associate-health-check"); 
$commands+=("create-protection"); 
$commands+=("create-subscription"); 
$commands+=("delete-protection"); 
$commands+=("describe-attack"); 
$commands+=("describe-drt-access"); 
$commands+=("describe-emergency-contact-settings"); 
$commands+=("describe-protection"); 
$commands+=("describe-subscription"); 
$commands+=("disassociate-drt-log-bucket"); 
$commands+=("disassociate-drt-role"); 
$commands+=("disassociate-health-check"); 
$commands+=("get-subscription-state"); 
$commands+=("list-attacks"); 
$commands+=("list-protections"); 
$commands+=("update-emergency-contact-settings"); 
$commands+=("update-subscription");

return $commands;
}

 function Get-shield-associate-drt-log-bucket {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-shield-associate-drt-role {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-shield-associate-health-check {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--protection-id"); 
$flags+=("--health-check-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-shield-create-protection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-shield-create-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-shield-delete-protection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--protection-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-shield-describe-attack {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--attack-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-shield-describe-drt-access {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-shield-describe-emergency-contact-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-shield-describe-protection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--protection-id"); 
$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-shield-describe-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-shield-disassociate-drt-log-bucket {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--log-bucket"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-shield-disassociate-drt-role {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-shield-disassociate-health-check {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--protection-id"); 
$flags+=("--health-check-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-shield-get-subscription-state {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-shield-list-attacks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arns"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-shield-list-protections {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-shield-update-emergency-contact-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--emergency-contact-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-shield-update-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--auto-renew"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-signer {
    $commands = [System.Collections.ArrayList]@();

$commands+=("cancel-signing-profile"); 
$commands+=("describe-signing-job"); 
$commands+=("get-signing-platform"); 
$commands+=("get-signing-profile"); 
$commands+=("list-signing-jobs"); 
$commands+=("list-signing-platforms"); 
$commands+=("list-signing-profiles"); 
$commands+=("list-tags-for-resource"); 
$commands+=("put-signing-profile"); 
$commands+=("start-signing-job"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("wait");

return $commands;
}

 function Get-signer-cancel-signing-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--profile-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-signer-describe-signing-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-signer-get-signing-platform {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--platform-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-signer-get-signing-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--profile-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-signer-list-signing-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--status"); 
$flags+=("--platform-id"); 
$flags+=("--requested-by"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-signer-list-signing-platforms {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--category"); 
$flags+=("--partner"); 
$flags+=("--target"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-signer-list-signing-profiles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--include-canceled"); 
$flags+=("--no-include-canceled"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-signer-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-signer-put-signing-profile {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--profile-name"); 
$flags+=("--signing-material"); 
$flags+=("--platform-id"); 
$flags+=("--overrides"); 
$flags+=("--signing-parameters"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-signer-start-signing-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source"); 
$flags+=("--destination"); 
$flags+=("--profile-name"); 
$flags+=("--client-request-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-signer-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-signer-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-signer-wait {
        $flags = [System.Collections.ArrayList]@();

$flags+=("");

return $flags;
}

 function Get-sms {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-app"); 
$commands+=("create-replication-job"); 
$commands+=("delete-app"); 
$commands+=("delete-app-launch-configuration"); 
$commands+=("delete-app-replication-configuration"); 
$commands+=("delete-replication-job"); 
$commands+=("delete-server-catalog"); 
$commands+=("disassociate-connector"); 
$commands+=("generate-change-set"); 
$commands+=("generate-template"); 
$commands+=("get-app"); 
$commands+=("get-app-launch-configuration"); 
$commands+=("get-app-replication-configuration"); 
$commands+=("get-connectors"); 
$commands+=("get-replication-jobs"); 
$commands+=("get-replication-runs"); 
$commands+=("get-servers"); 
$commands+=("import-server-catalog"); 
$commands+=("launch-app"); 
$commands+=("list-apps"); 
$commands+=("put-app-launch-configuration"); 
$commands+=("put-app-replication-configuration"); 
$commands+=("start-app-replication"); 
$commands+=("start-on-demand-replication-run"); 
$commands+=("stop-app-replication"); 
$commands+=("terminate-app"); 
$commands+=("update-app"); 
$commands+=("update-replication-job");

return $commands;
}

 function Get-sms-create-app {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--role-name"); 
$flags+=("--client-token"); 
$flags+=("--server-groups"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-create-replication-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--server-id"); 
$flags+=("--seed-replication-time"); 
$flags+=("--frequency"); 
$flags+=("--run-once"); 
$flags+=("--no-run-once"); 
$flags+=("--license-type"); 
$flags+=("--role-name"); 
$flags+=("--description"); 
$flags+=("--number-of-recent-amis-to-keep"); 
$flags+=("--encrypted"); 
$flags+=("--no-encrypted"); 
$flags+=("--kms-key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-delete-app {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--force-stop-app-replication"); 
$flags+=("--no-force-stop-app-replication"); 
$flags+=("--force-terminate-app"); 
$flags+=("--no-force-terminate-app"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-delete-app-launch-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-delete-app-replication-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-delete-replication-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-delete-server-catalog {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-disassociate-connector {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--connector-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-generate-change-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--changeset-format"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-generate-template {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--template-format"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-get-app {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-get-app-launch-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-get-app-replication-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-get-connectors {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-get-replication-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-get-replication-runs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-get-servers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vm-server-address-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-import-server-catalog {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-launch-app {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-list-apps {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-put-app-launch-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--role-name"); 
$flags+=("--server-group-launch-configurations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-put-app-replication-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--server-group-replication-configurations"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-start-app-replication {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-start-on-demand-replication-run {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-job-id"); 
$flags+=("--description"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-stop-app-replication {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-terminate-app {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-update-app {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--app-id"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--role-name"); 
$flags+=("--server-groups"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sms-update-replication-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--replication-job-id"); 
$flags+=("--frequency"); 
$flags+=("--next-replication-run-start-time"); 
$flags+=("--license-type"); 
$flags+=("--role-name"); 
$flags+=("--description"); 
$flags+=("--number-of-recent-amis-to-keep"); 
$flags+=("--encrypted"); 
$flags+=("--no-encrypted"); 
$flags+=("--kms-key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-snowball {
    $commands = [System.Collections.ArrayList]@();

$commands+=("cancel-cluster"); 
$commands+=("cancel-job"); 
$commands+=("create-address"); 
$commands+=("create-cluster"); 
$commands+=("create-job"); 
$commands+=("describe-address"); 
$commands+=("describe-addresses"); 
$commands+=("describe-cluster"); 
$commands+=("describe-job"); 
$commands+=("get-job-manifest"); 
$commands+=("get-job-unlock-code"); 
$commands+=("get-snowball-usage"); 
$commands+=("get-software-updates"); 
$commands+=("list-cluster-jobs"); 
$commands+=("list-clusters"); 
$commands+=("list-compatible-images"); 
$commands+=("list-jobs"); 
$commands+=("update-cluster"); 
$commands+=("update-job");

return $commands;
}

 function Get-snowball-cancel-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-snowball-cancel-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-snowball-create-address {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--address"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-snowball-create-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-type"); 
$flags+=("--resources"); 
$flags+=("--description"); 
$flags+=("--address-id"); 
$flags+=("--kms-key-arn"); 
$flags+=("--role-arn"); 
$flags+=("--snowball-type"); 
$flags+=("--shipping-option"); 
$flags+=("--notification"); 
$flags+=("--forwarding-address-id"); 
$flags+=("--tax-documents"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-snowball-create-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-type"); 
$flags+=("--resources"); 
$flags+=("--description"); 
$flags+=("--address-id"); 
$flags+=("--kms-key-arn"); 
$flags+=("--role-arn"); 
$flags+=("--snowball-capacity-preference"); 
$flags+=("--shipping-option"); 
$flags+=("--notification"); 
$flags+=("--cluster-id"); 
$flags+=("--snowball-type"); 
$flags+=("--forwarding-address-id"); 
$flags+=("--tax-documents"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-snowball-describe-address {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--address-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-snowball-describe-addresses {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-snowball-describe-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-snowball-describe-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-snowball-get-job-manifest {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-snowball-get-job-unlock-code {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-snowball-get-snowball-usage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-snowball-get-software-updates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-snowball-list-cluster-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-snowball-list-clusters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-snowball-list-compatible-images {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-snowball-list-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-snowball-update-cluster {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cluster-id"); 
$flags+=("--role-arn"); 
$flags+=("--description"); 
$flags+=("--resources"); 
$flags+=("--address-id"); 
$flags+=("--shipping-option"); 
$flags+=("--notification"); 
$flags+=("--forwarding-address-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-snowball-update-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--role-arn"); 
$flags+=("--notification"); 
$flags+=("--resources"); 
$flags+=("--address-id"); 
$flags+=("--shipping-option"); 
$flags+=("--description"); 
$flags+=("--snowball-capacity-preference"); 
$flags+=("--forwarding-address-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-permission"); 
$commands+=("check-if-phone-number-is-opted-out"); 
$commands+=("confirm-subscription"); 
$commands+=("create-platform-application"); 
$commands+=("create-platform-endpoint"); 
$commands+=("create-topic"); 
$commands+=("delete-endpoint"); 
$commands+=("delete-platform-application"); 
$commands+=("delete-topic"); 
$commands+=("get-endpoint-attributes"); 
$commands+=("get-platform-application-attributes"); 
$commands+=("get-sms-attributes"); 
$commands+=("get-subscription-attributes"); 
$commands+=("get-topic-attributes"); 
$commands+=("list-endpoints-by-platform-application"); 
$commands+=("list-phone-numbers-opted-out"); 
$commands+=("list-platform-applications"); 
$commands+=("list-subscriptions"); 
$commands+=("list-subscriptions-by-topic"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-topics"); 
$commands+=("opt-in-phone-number"); 
$commands+=("publish"); 
$commands+=("remove-permission"); 
$commands+=("set-endpoint-attributes"); 
$commands+=("set-platform-application-attributes"); 
$commands+=("set-sms-attributes"); 
$commands+=("set-subscription-attributes"); 
$commands+=("set-topic-attributes"); 
$commands+=("subscribe"); 
$commands+=("tag-resource"); 
$commands+=("unsubscribe"); 
$commands+=("untag-resource");

return $commands;
}

 function Get-sns-add-permission {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--topic-arn"); 
$flags+=("--label"); 
$flags+=("--aws-account-id"); 
$flags+=("--action-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-check-if-phone-number-is-opted-out {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--phone-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-confirm-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--topic-arn"); 
$flags+=("--token"); 
$flags+=("--authenticate-on-unsubscribe"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-create-platform-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--platform"); 
$flags+=("--attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-create-platform-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--platform-application-arn"); 
$flags+=("--token"); 
$flags+=("--custom-user-data"); 
$flags+=("--attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-create-topic {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--attributes"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-delete-endpoint {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-delete-platform-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--platform-application-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-delete-topic {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--topic-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-get-endpoint-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-get-platform-application-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--platform-application-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-get-sms-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-get-subscription-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-get-topic-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--topic-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-list-endpoints-by-platform-application {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--platform-application-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-list-phone-numbers-opted-out {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-list-platform-applications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-list-subscriptions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-list-subscriptions-by-topic {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--topic-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-list-topics {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-opt-in-phone-number {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--phone-number"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-publish {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--topic-arn"); 
$flags+=("--target-arn"); 
$flags+=("--phone-number"); 
$flags+=("--message"); 
$flags+=("--subject"); 
$flags+=("--message-structure"); 
$flags+=("--message-attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-remove-permission {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--topic-arn"); 
$flags+=("--label"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-set-endpoint-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--endpoint-arn"); 
$flags+=("--attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-set-platform-application-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--platform-application-arn"); 
$flags+=("--attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-set-sms-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-set-subscription-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-arn"); 
$flags+=("--attribute-name"); 
$flags+=("--attribute-value"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-set-topic-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--topic-arn"); 
$flags+=("--attribute-name"); 
$flags+=("--attribute-value"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-subscribe {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--topic-arn"); 
$flags+=("--protocol"); 
$flags+=("--attributes"); 
$flags+=("--return-subscription-arn"); 
$flags+=("--no-return-subscription-arn"); 
$flags+=("--notification-endpoint"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-unsubscribe {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sns-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sqs {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-permission"); 
$commands+=("change-message-visibility"); 
$commands+=("change-message-visibility-batch"); 
$commands+=("create-queue"); 
$commands+=("delete-message"); 
$commands+=("delete-message-batch"); 
$commands+=("delete-queue"); 
$commands+=("get-queue-attributes"); 
$commands+=("get-queue-url"); 
$commands+=("list-dead-letter-source-queues"); 
$commands+=("list-queue-tags"); 
$commands+=("list-queues"); 
$commands+=("purge-queue"); 
$commands+=("receive-message"); 
$commands+=("remove-permission"); 
$commands+=("send-message"); 
$commands+=("send-message-batch"); 
$commands+=("set-queue-attributes"); 
$commands+=("tag-queue"); 
$commands+=("untag-queue");

return $commands;
}

 function Get-sqs-add-permission {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--queue-url"); 
$flags+=("--label"); 
$flags+=("--aws-account-ids"); 
$flags+=("--actions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sqs-change-message-visibility {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--queue-url"); 
$flags+=("--receipt-handle"); 
$flags+=("--visibility-timeout"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sqs-change-message-visibility-batch {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--queue-url"); 
$flags+=("--entries"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sqs-create-queue {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--queue-name"); 
$flags+=("--attributes"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sqs-delete-message {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--queue-url"); 
$flags+=("--receipt-handle"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sqs-delete-message-batch {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--queue-url"); 
$flags+=("--entries"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sqs-delete-queue {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--queue-url"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sqs-get-queue-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--queue-url"); 
$flags+=("--attribute-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sqs-get-queue-url {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--queue-url"); 
$flags+=("--attribute-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sqs-list-dead-letter-source-queues {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--queue-url"); 
$flags+=("--attribute-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sqs-list-queue-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--queue-url"); 
$flags+=("--attribute-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sqs-list-queues {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--queue-url"); 
$flags+=("--attribute-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sqs-purge-queue {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--queue-url"); 
$flags+=("--attribute-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sqs-receive-message {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--queue-url"); 
$flags+=("--attribute-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sqs-remove-permission {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--queue-url"); 
$flags+=("--attribute-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sqs-send-message {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--queue-url"); 
$flags+=("--attribute-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sqs-send-message-batch {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--queue-url"); 
$flags+=("--attribute-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sqs-set-queue-attributes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--queue-url"); 
$flags+=("--attribute-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sqs-tag-queue {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--queue-url"); 
$flags+=("--attribute-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sqs-untag-queue {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--queue-url"); 
$flags+=("--attribute-names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-tags-to-resource"); 
$commands+=("cancel-command"); 
$commands+=("cancel-maintenance-window-execution"); 
$commands+=("create-activation"); 
$commands+=("create-association"); 
$commands+=("create-association-batch"); 
$commands+=("create-document"); 
$commands+=("create-maintenance-window"); 
$commands+=("create-ops-item"); 
$commands+=("create-patch-baseline"); 
$commands+=("create-resource-data-sync"); 
$commands+=("delete-activation"); 
$commands+=("delete-association"); 
$commands+=("delete-document"); 
$commands+=("delete-inventory"); 
$commands+=("delete-maintenance-window"); 
$commands+=("delete-parameter"); 
$commands+=("delete-parameters"); 
$commands+=("delete-patch-baseline"); 
$commands+=("delete-resource-data-sync"); 
$commands+=("deregister-managed-instance"); 
$commands+=("deregister-patch-baseline-for-patch-group"); 
$commands+=("deregister-target-from-maintenance-window"); 
$commands+=("deregister-task-from-maintenance-window"); 
$commands+=("describe-activations"); 
$commands+=("describe-association"); 
$commands+=("describe-association-execution-targets"); 
$commands+=("describe-association-executions"); 
$commands+=("describe-automation-executions"); 
$commands+=("describe-automation-step-executions"); 
$commands+=("describe-available-patches"); 
$commands+=("describe-document"); 
$commands+=("describe-document-permission"); 
$commands+=("describe-effective-instance-associations"); 
$commands+=("describe-effective-patches-for-patch-baseline"); 
$commands+=("describe-instance-associations-status"); 
$commands+=("describe-instance-information"); 
$commands+=("describe-instance-patch-states"); 
$commands+=("describe-instance-patch-states-for-patch-group"); 
$commands+=("describe-instance-patches"); 
$commands+=("describe-inventory-deletions"); 
$commands+=("describe-maintenance-window-execution-task-invocations"); 
$commands+=("describe-maintenance-window-execution-tasks"); 
$commands+=("describe-maintenance-window-executions"); 
$commands+=("describe-maintenance-window-schedule"); 
$commands+=("describe-maintenance-window-targets"); 
$commands+=("describe-maintenance-window-tasks"); 
$commands+=("describe-maintenance-windows"); 
$commands+=("describe-maintenance-windows-for-target"); 
$commands+=("describe-ops-items"); 
$commands+=("describe-parameters"); 
$commands+=("describe-patch-baselines"); 
$commands+=("describe-patch-group-state"); 
$commands+=("describe-patch-groups"); 
$commands+=("describe-patch-properties"); 
$commands+=("describe-sessions"); 
$commands+=("get-automation-execution"); 
$commands+=("get-calendar-state"); 
$commands+=("get-command-invocation"); 
$commands+=("get-connection-status"); 
$commands+=("get-default-patch-baseline"); 
$commands+=("get-deployable-patch-snapshot-for-instance"); 
$commands+=("get-document"); 
$commands+=("get-inventory"); 
$commands+=("get-inventory-schema"); 
$commands+=("get-maintenance-window"); 
$commands+=("get-maintenance-window-execution"); 
$commands+=("get-maintenance-window-execution-task"); 
$commands+=("get-maintenance-window-execution-task-invocation"); 
$commands+=("get-maintenance-window-task"); 
$commands+=("get-ops-item"); 
$commands+=("get-ops-summary"); 
$commands+=("get-parameter"); 
$commands+=("get-parameter-history"); 
$commands+=("get-parameters"); 
$commands+=("get-parameters-by-path"); 
$commands+=("get-patch-baseline"); 
$commands+=("get-patch-baseline-for-patch-group"); 
$commands+=("get-service-setting"); 
$commands+=("label-parameter-version"); 
$commands+=("list-association-versions"); 
$commands+=("list-associations"); 
$commands+=("list-command-invocations"); 
$commands+=("list-commands"); 
$commands+=("list-compliance-items"); 
$commands+=("list-compliance-summaries"); 
$commands+=("list-document-versions"); 
$commands+=("list-documents"); 
$commands+=("list-inventory-entries"); 
$commands+=("list-resource-compliance-summaries"); 
$commands+=("list-resource-data-sync"); 
$commands+=("list-tags-for-resource"); 
$commands+=("modify-document-permission"); 
$commands+=("put-compliance-items"); 
$commands+=("put-inventory"); 
$commands+=("put-parameter"); 
$commands+=("register-default-patch-baseline"); 
$commands+=("register-patch-baseline-for-patch-group"); 
$commands+=("register-target-with-maintenance-window"); 
$commands+=("register-task-with-maintenance-window"); 
$commands+=("remove-tags-from-resource"); 
$commands+=("reset-service-setting"); 
$commands+=("resume-session"); 
$commands+=("send-automation-signal"); 
$commands+=("send-command"); 
$commands+=("start-associations-once"); 
$commands+=("start-automation-execution"); 
$commands+=("start-session"); 
$commands+=("stop-automation-execution"); 
$commands+=("terminate-session"); 
$commands+=("update-association"); 
$commands+=("update-association-status"); 
$commands+=("update-document"); 
$commands+=("update-document-default-version"); 
$commands+=("update-maintenance-window"); 
$commands+=("update-maintenance-window-target"); 
$commands+=("update-maintenance-window-task"); 
$commands+=("update-managed-instance-role"); 
$commands+=("update-ops-item"); 
$commands+=("update-patch-baseline"); 
$commands+=("update-resource-data-sync"); 
$commands+=("update-service-setting");

return $commands;
}

 function Get-ssm-add-tags-to-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-type"); 
$flags+=("--resource-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-cancel-command {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--command-id"); 
$flags+=("--instance-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-cancel-maintenance-window-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--window-execution-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-create-activation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--default-instance-name"); 
$flags+=("--iam-role"); 
$flags+=("--registration-limit"); 
$flags+=("--expiration-date"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-create-association {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--document-version"); 
$flags+=("--instance-id"); 
$flags+=("--parameters"); 
$flags+=("--targets"); 
$flags+=("--schedule-expression"); 
$flags+=("--output-location"); 
$flags+=("--association-name"); 
$flags+=("--automation-target-parameter-name"); 
$flags+=("--max-errors"); 
$flags+=("--max-concurrency"); 
$flags+=("--compliance-severity"); 
$flags+=("--sync-compliance"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-create-association-batch {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--entries"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-create-document {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--content"); 
$flags+=("--requires"); 
$flags+=("--attachments"); 
$flags+=("--name"); 
$flags+=("--version-name"); 
$flags+=("--document-type"); 
$flags+=("--document-format"); 
$flags+=("--target-type"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-create-maintenance-window {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--start-date"); 
$flags+=("--end-date"); 
$flags+=("--schedule"); 
$flags+=("--schedule-timezone"); 
$flags+=("--duration"); 
$flags+=("--cutoff"); 
$flags+=("--allow-unassociated-targets"); 
$flags+=("--no-allow-unassociated-targets"); 
$flags+=("--client-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-create-ops-item {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--operational-data"); 
$flags+=("--notifications"); 
$flags+=("--priority"); 
$flags+=("--related-ops-items"); 
$flags+=("--source"); 
$flags+=("--title"); 
$flags+=("--tags"); 
$flags+=("--category"); 
$flags+=("--severity"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-create-patch-baseline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--operating-system"); 
$flags+=("--name"); 
$flags+=("--global-filters"); 
$flags+=("--approval-rules"); 
$flags+=("--approved-patches"); 
$flags+=("--approved-patches-compliance-level"); 
$flags+=("--approved-patches-enable-non-security"); 
$flags+=("--no-approved-patches-enable-non-security"); 
$flags+=("--rejected-patches"); 
$flags+=("--rejected-patches-action"); 
$flags+=("--description"); 
$flags+=("--sources"); 
$flags+=("--client-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-create-resource-data-sync {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sync-name"); 
$flags+=("--s"); 
$flags+=("--sync-type"); 
$flags+=("--sync-source"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-delete-activation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--activation-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-delete-association {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--instance-id"); 
$flags+=("--association-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-delete-document {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--document-version"); 
$flags+=("--version-name"); 
$flags+=("--force"); 
$flags+=("--no-force"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-delete-inventory {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--type-name"); 
$flags+=("--schema-delete-option"); 
$flags+=("--dry-run"); 
$flags+=("--no-dry-run"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-delete-maintenance-window {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--window-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-delete-parameter {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-delete-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--names"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-delete-patch-baseline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--baseline-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-delete-resource-data-sync {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sync-name"); 
$flags+=("--sync-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-deregister-managed-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-deregister-patch-baseline-for-patch-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--baseline-id"); 
$flags+=("--patch-group"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-deregister-target-from-maintenance-window {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--window-id"); 
$flags+=("--window-target-id"); 
$flags+=("--safe"); 
$flags+=("--no-safe"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-deregister-task-from-maintenance-window {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--window-id"); 
$flags+=("--window-task-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-activations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-association {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--instance-id"); 
$flags+=("--association-id"); 
$flags+=("--association-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-association-execution-targets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--association-id"); 
$flags+=("--execution-id"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-association-executions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--association-id"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-automation-executions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-automation-step-executions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--automation-execution-id"); 
$flags+=("--filters"); 
$flags+=("--reverse-order"); 
$flags+=("--no-reverse-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-available-patches {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-document {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--document-version"); 
$flags+=("--version-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-document-permission {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--permission-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-effective-instance-associations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-effective-patches-for-patch-baseline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--baseline-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-instance-associations-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-instance-information {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-information-filter-list"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-instance-patch-states {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-instance-patch-states-for-patch-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--patch-group"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-instance-patches {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-inventory-deletions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--deletion-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-maintenance-window-execution-task-invocations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--window-execution-id"); 
$flags+=("--task-id"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-maintenance-window-execution-tasks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--window-execution-id"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-maintenance-window-executions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--window-id"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-maintenance-window-schedule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--window-id"); 
$flags+=("--targets"); 
$flags+=("--resource-type"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-maintenance-window-targets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--window-id"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-maintenance-window-tasks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--window-id"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-maintenance-windows {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-maintenance-windows-for-target {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--targets"); 
$flags+=("--resource-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-ops-items {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ops-item-filters"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--parameter-filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-patch-baselines {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-patch-group-state {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--patch-group"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-patch-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-patch-properties {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--operating-system"); 
$flags+=("--property"); 
$flags+=("--patch-set"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-describe-sessions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--state"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-get-automation-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--automation-execution-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-get-calendar-state {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--calendar-names"); 
$flags+=("--at-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-get-command-invocation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--command-id"); 
$flags+=("--instance-id"); 
$flags+=("--plugin-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-get-connection-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--target"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-get-default-patch-baseline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--operating-system"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-get-deployable-patch-snapshot-for-instance {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--snapshot-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-get-document {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--version-name"); 
$flags+=("--document-version"); 
$flags+=("--document-format"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-get-inventory {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--aggregators"); 
$flags+=("--result-attributes"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-get-inventory-schema {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--type-name"); 
$flags+=("--aggregator"); 
$flags+=("--no-aggregator"); 
$flags+=("--sub-type"); 
$flags+=("--no-sub-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-get-maintenance-window {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--window-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-get-maintenance-window-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--window-execution-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-get-maintenance-window-execution-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--window-execution-id"); 
$flags+=("--task-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-get-maintenance-window-execution-task-invocation {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--window-execution-id"); 
$flags+=("--task-id"); 
$flags+=("--invocation-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-get-maintenance-window-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--window-id"); 
$flags+=("--window-task-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-get-ops-item {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ops-item-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-get-ops-summary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sync-name"); 
$flags+=("--filters"); 
$flags+=("--aggregators"); 
$flags+=("--result-attributes"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-get-parameter {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--with-decryption"); 
$flags+=("--no-with-decryption"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-get-parameter-history {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--with-decryption"); 
$flags+=("--no-with-decryption"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-get-parameters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--names"); 
$flags+=("--with-decryption"); 
$flags+=("--no-with-decryption"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-get-parameters-by-path {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--path"); 
$flags+=("--recursive"); 
$flags+=("--no-recursive"); 
$flags+=("--parameter-filters"); 
$flags+=("--with-decryption"); 
$flags+=("--no-with-decryption"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-get-patch-baseline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--baseline-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-get-patch-baseline-for-patch-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--patch-group"); 
$flags+=("--operating-system"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-get-service-setting {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--setting-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-label-parameter-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--parameter-version"); 
$flags+=("--labels"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-list-association-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--association-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-list-associations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--association-filter-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-list-command-invocations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--command-id"); 
$flags+=("--instance-id"); 
$flags+=("--filters"); 
$flags+=("--details"); 
$flags+=("--no-details"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-list-commands {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--command-id"); 
$flags+=("--instance-id"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-list-compliance-items {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--resource-ids"); 
$flags+=("--resource-types"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-list-compliance-summaries {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-list-document-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-list-documents {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--document-filter-list"); 
$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-list-inventory-entries {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--type-name"); 
$flags+=("--filters"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-list-resource-compliance-summaries {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filters"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-list-resource-data-sync {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sync-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-type"); 
$flags+=("--resource-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-modify-document-permission {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--permission-type"); 
$flags+=("--account-ids-to-add"); 
$flags+=("--account-ids-to-remove"); 
$flags+=("--shared-document-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-put-compliance-items {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--resource-type"); 
$flags+=("--compliance-type"); 
$flags+=("--execution-summary"); 
$flags+=("--items"); 
$flags+=("--item-content-hash"); 
$flags+=("--upload-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-put-inventory {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--items"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-put-parameter {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--value"); 
$flags+=("--type"); 
$flags+=("--key-id"); 
$flags+=("--overwrite"); 
$flags+=("--no-overwrite"); 
$flags+=("--allowed-pattern"); 
$flags+=("--tags"); 
$flags+=("--tier"); 
$flags+=("--policies"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-register-default-patch-baseline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--baseline-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-register-patch-baseline-for-patch-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--baseline-id"); 
$flags+=("--patch-group"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-register-target-with-maintenance-window {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--window-id"); 
$flags+=("--resource-type"); 
$flags+=("--targets"); 
$flags+=("--owner-information"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-register-task-with-maintenance-window {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--window-id"); 
$flags+=("--targets"); 
$flags+=("--task-arn"); 
$flags+=("--service-role-arn"); 
$flags+=("--task-type"); 
$flags+=("--task-parameters"); 
$flags+=("--task-invocation-parameters"); 
$flags+=("--priority"); 
$flags+=("--max-concurrency"); 
$flags+=("--max-errors"); 
$flags+=("--logging-info"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-remove-tags-from-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-type"); 
$flags+=("--resource-id"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-reset-service-setting {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--setting-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-resume-session {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--session-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-send-automation-signal {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--automation-execution-id"); 
$flags+=("--signal-type"); 
$flags+=("--payload"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-send-command {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-ids"); 
$flags+=("--targets"); 
$flags+=("--document-name"); 
$flags+=("--document-version"); 
$flags+=("--document-hash"); 
$flags+=("--document-hash-type"); 
$flags+=("--timeout-seconds"); 
$flags+=("--comment"); 
$flags+=("--parameters"); 
$flags+=("--output-s"); 
$flags+=("--output-s"); 
$flags+=("--output-s"); 
$flags+=("--max-concurrency"); 
$flags+=("--max-errors"); 
$flags+=("--service-role-arn"); 
$flags+=("--notification-config"); 
$flags+=("--cloud-watch-output-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-start-associations-once {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--association-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-start-automation-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--document-name"); 
$flags+=("--document-version"); 
$flags+=("--parameters"); 
$flags+=("--client-token"); 
$flags+=("--mode"); 
$flags+=("--target-parameter-name"); 
$flags+=("--targets"); 
$flags+=("--target-maps"); 
$flags+=("--max-concurrency"); 
$flags+=("--max-errors"); 
$flags+=("--target-locations"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-start-session {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--target"); 
$flags+=("--document-name"); 
$flags+=("--parameters"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-stop-automation-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--automation-execution-id"); 
$flags+=("--type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-terminate-session {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--session-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-update-association {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--association-id"); 
$flags+=("--parameters"); 
$flags+=("--document-version"); 
$flags+=("--schedule-expression"); 
$flags+=("--output-location"); 
$flags+=("--name"); 
$flags+=("--targets"); 
$flags+=("--association-name"); 
$flags+=("--association-version"); 
$flags+=("--automation-target-parameter-name"); 
$flags+=("--max-errors"); 
$flags+=("--max-concurrency"); 
$flags+=("--compliance-severity"); 
$flags+=("--sync-compliance"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-update-association-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--instance-id"); 
$flags+=("--association-status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-update-document {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--content"); 
$flags+=("--attachments"); 
$flags+=("--name"); 
$flags+=("--version-name"); 
$flags+=("--document-version"); 
$flags+=("--document-format"); 
$flags+=("--target-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-update-document-default-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--document-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-update-maintenance-window {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--window-id"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--start-date"); 
$flags+=("--end-date"); 
$flags+=("--schedule"); 
$flags+=("--schedule-timezone"); 
$flags+=("--duration"); 
$flags+=("--cutoff"); 
$flags+=("--allow-unassociated-targets"); 
$flags+=("--no-allow-unassociated-targets"); 
$flags+=("--enabled"); 
$flags+=("--no-enabled"); 
$flags+=("--replace"); 
$flags+=("--no-replace"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-update-maintenance-window-target {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--window-id"); 
$flags+=("--window-target-id"); 
$flags+=("--targets"); 
$flags+=("--owner-information"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--replace"); 
$flags+=("--no-replace"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-update-maintenance-window-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--window-id"); 
$flags+=("--window-task-id"); 
$flags+=("--targets"); 
$flags+=("--task-arn"); 
$flags+=("--service-role-arn"); 
$flags+=("--task-parameters"); 
$flags+=("--task-invocation-parameters"); 
$flags+=("--priority"); 
$flags+=("--max-concurrency"); 
$flags+=("--max-errors"); 
$flags+=("--logging-info"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--replace"); 
$flags+=("--no-replace"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-update-managed-instance-role {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--instance-id"); 
$flags+=("--iam-role"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-update-ops-item {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--description"); 
$flags+=("--operational-data"); 
$flags+=("--operational-data-to-delete"); 
$flags+=("--notifications"); 
$flags+=("--priority"); 
$flags+=("--related-ops-items"); 
$flags+=("--status"); 
$flags+=("--ops-item-id"); 
$flags+=("--title"); 
$flags+=("--category"); 
$flags+=("--severity"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-update-patch-baseline {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--baseline-id"); 
$flags+=("--name"); 
$flags+=("--global-filters"); 
$flags+=("--approval-rules"); 
$flags+=("--approved-patches"); 
$flags+=("--approved-patches-compliance-level"); 
$flags+=("--approved-patches-enable-non-security"); 
$flags+=("--no-approved-patches-enable-non-security"); 
$flags+=("--rejected-patches"); 
$flags+=("--rejected-patches-action"); 
$flags+=("--description"); 
$flags+=("--sources"); 
$flags+=("--replace"); 
$flags+=("--no-replace"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-update-resource-data-sync {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sync-name"); 
$flags+=("--sync-type"); 
$flags+=("--sync-source"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-ssm-update-service-setting {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--setting-id"); 
$flags+=("--setting-value"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sso {
    $commands = [System.Collections.ArrayList]@();

$commands+=("get-role-credentials"); 
$commands+=("list-account-roles"); 
$commands+=("list-accounts"); 
$commands+=("logout");

return $commands;
}

 function Get-sso-get-role-credentials {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-name"); 
$flags+=("--account-id"); 
$flags+=("--access-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sso-list-account-roles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--access-token"); 
$flags+=("--account-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sso-list-accounts {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--access-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sso-logout {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--access-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sso-oidc {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-token"); 
$commands+=("register-client"); 
$commands+=("start-device-authorization");

return $commands;
}

 function Get-sso-oidc-create-token {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-id"); 
$flags+=("--client-secret"); 
$flags+=("--grant-type"); 
$flags+=("--device-code"); 
$flags+=("--code"); 
$flags+=("--refresh-token"); 
$flags+=("--scope"); 
$flags+=("--redirect-uri"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sso-oidc-register-client {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-name"); 
$flags+=("--client-type"); 
$flags+=("--scopes"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sso-oidc-start-device-authorization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-id"); 
$flags+=("--client-secret"); 
$flags+=("--start-url"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-stepfunctions {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-activity"); 
$commands+=("create-state-machine"); 
$commands+=("delete-activity"); 
$commands+=("delete-state-machine"); 
$commands+=("describe-activity"); 
$commands+=("describe-execution"); 
$commands+=("describe-state-machine"); 
$commands+=("describe-state-machine-for-execution"); 
$commands+=("get-activity-task"); 
$commands+=("get-execution-history"); 
$commands+=("list-activities"); 
$commands+=("list-executions"); 
$commands+=("list-state-machines"); 
$commands+=("list-tags-for-resource"); 
$commands+=("send-task-failure"); 
$commands+=("send-task-heartbeat"); 
$commands+=("send-task-success"); 
$commands+=("start-execution"); 
$commands+=("stop-execution"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-state-machine");

return $commands;
}

 function Get-stepfunctions-create-activity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-stepfunctions-create-state-machine {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--definition"); 
$flags+=("--role-arn"); 
$flags+=("--type"); 
$flags+=("--logging-configuration"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-stepfunctions-delete-activity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--activity-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-stepfunctions-delete-state-machine {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--state-machine-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-stepfunctions-describe-activity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--activity-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-stepfunctions-describe-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--execution-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-stepfunctions-describe-state-machine {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--state-machine-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-stepfunctions-describe-state-machine-for-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--execution-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-stepfunctions-get-activity-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--activity-arn"); 
$flags+=("--worker-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-stepfunctions-get-execution-history {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--execution-arn"); 
$flags+=("--reverse-order"); 
$flags+=("--no-reverse-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-stepfunctions-list-activities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-stepfunctions-list-executions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--state-machine-arn"); 
$flags+=("--status-filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-stepfunctions-list-state-machines {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-stepfunctions-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-stepfunctions-send-task-failure {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-token"); 
$flags+=("--error"); 
$flags+=("--cause"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-stepfunctions-send-task-heartbeat {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-stepfunctions-send-task-success {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-token"); 
$flags+=("--task-output"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-stepfunctions-start-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--state-machine-arn"); 
$flags+=("--name"); 
$flags+=("--input"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-stepfunctions-stop-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--execution-arn"); 
$flags+=("--error"); 
$flags+=("--cause"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-stepfunctions-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-stepfunctions-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-stepfunctions-update-state-machine {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--state-machine-arn"); 
$flags+=("--definition"); 
$flags+=("--role-arn"); 
$flags+=("--logging-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway {
    $commands = [System.Collections.ArrayList]@();

$commands+=("activate-gateway"); 
$commands+=("add-cache"); 
$commands+=("add-tags-to-resource"); 
$commands+=("add-upload-buffer"); 
$commands+=("add-working-storage"); 
$commands+=("assign-tape-pool"); 
$commands+=("attach-volume"); 
$commands+=("cancel-archival"); 
$commands+=("cancel-retrieval"); 
$commands+=("create-cached-iscsi-volume"); 
$commands+=("create-nfs-file-share"); 
$commands+=("create-smb-file-share"); 
$commands+=("create-snapshot"); 
$commands+=("create-snapshot-from-volume-recovery-point"); 
$commands+=("create-stored-iscsi-volume"); 
$commands+=("create-tape-with-barcode"); 
$commands+=("create-tapes"); 
$commands+=("delete-automatic-tape-creation-policy"); 
$commands+=("delete-bandwidth-rate-limit"); 
$commands+=("delete-chap-credentials"); 
$commands+=("delete-file-share"); 
$commands+=("delete-gateway"); 
$commands+=("delete-snapshot-schedule"); 
$commands+=("delete-tape"); 
$commands+=("delete-tape-archive"); 
$commands+=("delete-volume"); 
$commands+=("describe-availability-monitor-test"); 
$commands+=("describe-bandwidth-rate-limit"); 
$commands+=("describe-cache"); 
$commands+=("describe-cached-iscsi-volumes"); 
$commands+=("describe-chap-credentials"); 
$commands+=("describe-gateway-information"); 
$commands+=("describe-maintenance-start-time"); 
$commands+=("describe-nfs-file-shares"); 
$commands+=("describe-smb-file-shares"); 
$commands+=("describe-smb-settings"); 
$commands+=("describe-snapshot-schedule"); 
$commands+=("describe-stored-iscsi-volumes"); 
$commands+=("describe-tape-archives"); 
$commands+=("describe-tape-recovery-points"); 
$commands+=("describe-tapes"); 
$commands+=("describe-upload-buffer"); 
$commands+=("describe-vtl-devices"); 
$commands+=("describe-working-storage"); 
$commands+=("detach-volume"); 
$commands+=("disable-gateway"); 
$commands+=("join-domain"); 
$commands+=("list-automatic-tape-creation-policies"); 
$commands+=("list-file-shares"); 
$commands+=("list-gateways"); 
$commands+=("list-local-disks"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-tapes"); 
$commands+=("list-volume-initiators"); 
$commands+=("list-volume-recovery-points"); 
$commands+=("list-volumes"); 
$commands+=("notify-when-uploaded"); 
$commands+=("refresh-cache"); 
$commands+=("remove-tags-from-resource"); 
$commands+=("reset-cache"); 
$commands+=("retrieve-tape-archive"); 
$commands+=("retrieve-tape-recovery-point"); 
$commands+=("set-local-console-password"); 
$commands+=("set-smb-guest-password"); 
$commands+=("shutdown-gateway"); 
$commands+=("start-availability-monitor-test"); 
$commands+=("start-gateway"); 
$commands+=("update-automatic-tape-creation-policy"); 
$commands+=("update-bandwidth-rate-limit"); 
$commands+=("update-chap-credentials"); 
$commands+=("update-gateway-information"); 
$commands+=("update-gateway-software-now"); 
$commands+=("update-maintenance-start-time"); 
$commands+=("update-nfs-file-share"); 
$commands+=("update-smb-file-share"); 
$commands+=("update-smb-security-strategy"); 
$commands+=("update-snapshot-schedule"); 
$commands+=("update-vtl-device-type");

return $commands;
}

 function Get-storagegateway-activate-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--activation-key"); 
$flags+=("--gateway-name"); 
$flags+=("--gateway-timezone"); 
$flags+=("--gateway-region"); 
$flags+=("--gateway-type"); 
$flags+=("--tape-drive-type"); 
$flags+=("--medium-changer-type"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-add-cache {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--disk-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-add-tags-to-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-add-upload-buffer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--disk-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-add-working-storage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--disk-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-assign-tape-pool {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--tape-arn"); 
$flags+=("--pool-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-attach-volume {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--target-name"); 
$flags+=("--volume-arn"); 
$flags+=("--network-interface-id"); 
$flags+=("--disk-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-cancel-archival {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--tape-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-cancel-retrieval {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--tape-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-create-cached-iscsi-volume {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--volume-size-in-bytes"); 
$flags+=("--snapshot-id"); 
$flags+=("--target-name"); 
$flags+=("--source-volume-arn"); 
$flags+=("--network-interface-id"); 
$flags+=("--client-token"); 
$flags+=("--kms-encrypted"); 
$flags+=("--no-kms-encrypted"); 
$flags+=("--kms-key"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-create-nfs-file-share {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-token"); 
$flags+=("--nfs-file-share-defaults"); 
$flags+=("--gateway-arn"); 
$flags+=("--kms-encrypted"); 
$flags+=("--no-kms-encrypted"); 
$flags+=("--kms-key"); 
$flags+=("--role"); 
$flags+=("--location-arn"); 
$flags+=("--default-storage-class"); 
$flags+=("--object-acl"); 
$flags+=("--client-list"); 
$flags+=("--squash"); 
$flags+=("--read-only"); 
$flags+=("--no-read-only"); 
$flags+=("--guess-mime-type-enabled"); 
$flags+=("--no-guess-mime-type-enabled"); 
$flags+=("--requester-pays"); 
$flags+=("--no-requester-pays"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-create-smb-file-share {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--client-token"); 
$flags+=("--gateway-arn"); 
$flags+=("--kms-encrypted"); 
$flags+=("--no-kms-encrypted"); 
$flags+=("--kms-key"); 
$flags+=("--role"); 
$flags+=("--location-arn"); 
$flags+=("--default-storage-class"); 
$flags+=("--object-acl"); 
$flags+=("--read-only"); 
$flags+=("--no-read-only"); 
$flags+=("--guess-mime-type-enabled"); 
$flags+=("--no-guess-mime-type-enabled"); 
$flags+=("--requester-pays"); 
$flags+=("--no-requester-pays"); 
$flags+=("--smbacl-enabled"); 
$flags+=("--no-smbacl-enabled"); 
$flags+=("--admin-user-list"); 
$flags+=("--valid-user-list"); 
$flags+=("--invalid-user-list"); 
$flags+=("--audit-destination-arn"); 
$flags+=("--authentication"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-create-snapshot {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--volume-arn"); 
$flags+=("--snapshot-description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-create-snapshot-from-volume-recovery-point {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--volume-arn"); 
$flags+=("--snapshot-description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-create-stored-iscsi-volume {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--disk-id"); 
$flags+=("--snapshot-id"); 
$flags+=("--preserve-existing-data"); 
$flags+=("--no-preserve-existing-data"); 
$flags+=("--target-name"); 
$flags+=("--network-interface-id"); 
$flags+=("--kms-encrypted"); 
$flags+=("--no-kms-encrypted"); 
$flags+=("--kms-key"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-create-tape-with-barcode {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--tape-size-in-bytes"); 
$flags+=("--tape-barcode"); 
$flags+=("--kms-encrypted"); 
$flags+=("--no-kms-encrypted"); 
$flags+=("--kms-key"); 
$flags+=("--pool-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-create-tapes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--tape-size-in-bytes"); 
$flags+=("--client-token"); 
$flags+=("--num-tapes-to-create"); 
$flags+=("--tape-barcode-prefix"); 
$flags+=("--kms-encrypted"); 
$flags+=("--no-kms-encrypted"); 
$flags+=("--kms-key"); 
$flags+=("--pool-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-delete-automatic-tape-creation-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-delete-bandwidth-rate-limit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--bandwidth-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-delete-chap-credentials {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--target-arn"); 
$flags+=("--initiator-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-delete-file-share {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--file-share-arn"); 
$flags+=("--force-delete"); 
$flags+=("--no-force-delete"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-delete-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-delete-snapshot-schedule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--volume-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-delete-tape {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--tape-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-delete-tape-archive {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--tape-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-delete-volume {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--volume-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-describe-availability-monitor-test {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-describe-bandwidth-rate-limit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-describe-cache {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-describe-cached-iscsi-volumes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--volume-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-describe-chap-credentials {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--target-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-describe-gateway-information {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-describe-maintenance-start-time {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-describe-nfs-file-shares {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--file-share-arn-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-describe-smb-file-shares {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--file-share-arn-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-describe-smb-settings {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-describe-snapshot-schedule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--volume-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-describe-stored-iscsi-volumes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--volume-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-describe-tape-archives {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--tape-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-describe-tape-recovery-points {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-describe-tapes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--tape-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-describe-upload-buffer {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-describe-vtl-devices {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--vtl-device-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-describe-working-storage {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-detach-volume {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--volume-arn"); 
$flags+=("--force-detach"); 
$flags+=("--no-force-detach"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-disable-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-join-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--domain-name"); 
$flags+=("--organizational-unit"); 
$flags+=("--domain-controllers"); 
$flags+=("--timeout-in-seconds"); 
$flags+=("--user-name"); 
$flags+=("--password"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-list-automatic-tape-creation-policies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-list-file-shares {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-list-gateways {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-list-local-disks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-list-tapes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--tape-arns"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-list-volume-initiators {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--volume-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-list-volume-recovery-points {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-list-volumes {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-notify-when-uploaded {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--file-share-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-refresh-cache {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--file-share-arn"); 
$flags+=("--folder-list"); 
$flags+=("--recursive"); 
$flags+=("--no-recursive"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-remove-tags-from-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-reset-cache {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-retrieve-tape-archive {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--tape-arn"); 
$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-retrieve-tape-recovery-point {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--tape-arn"); 
$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-set-local-console-password {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--local-console-password"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-set-smb-guest-password {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--password"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-shutdown-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-start-availability-monitor-test {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-start-gateway {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-update-automatic-tape-creation-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--automatic-tape-creation-rules"); 
$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-update-bandwidth-rate-limit {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--average-upload-rate-limit-in-bits-per-sec"); 
$flags+=("--average-download-rate-limit-in-bits-per-sec"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-update-chap-credentials {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--target-arn"); 
$flags+=("--secret-to-authenticate-initiator"); 
$flags+=("--initiator-name"); 
$flags+=("--secret-to-authenticate-target"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-update-gateway-information {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--gateway-name"); 
$flags+=("--gateway-timezone"); 
$flags+=("--cloud-watch-log-group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-update-gateway-software-now {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-update-maintenance-start-time {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--hour-of-day"); 
$flags+=("--minute-of-hour"); 
$flags+=("--day-of-week"); 
$flags+=("--day-of-month"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-update-nfs-file-share {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--file-share-arn"); 
$flags+=("--kms-encrypted"); 
$flags+=("--no-kms-encrypted"); 
$flags+=("--kms-key"); 
$flags+=("--nfs-file-share-defaults"); 
$flags+=("--default-storage-class"); 
$flags+=("--object-acl"); 
$flags+=("--client-list"); 
$flags+=("--squash"); 
$flags+=("--read-only"); 
$flags+=("--no-read-only"); 
$flags+=("--guess-mime-type-enabled"); 
$flags+=("--no-guess-mime-type-enabled"); 
$flags+=("--requester-pays"); 
$flags+=("--no-requester-pays"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-update-smb-file-share {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--file-share-arn"); 
$flags+=("--kms-encrypted"); 
$flags+=("--no-kms-encrypted"); 
$flags+=("--kms-key"); 
$flags+=("--default-storage-class"); 
$flags+=("--object-acl"); 
$flags+=("--read-only"); 
$flags+=("--no-read-only"); 
$flags+=("--guess-mime-type-enabled"); 
$flags+=("--no-guess-mime-type-enabled"); 
$flags+=("--requester-pays"); 
$flags+=("--no-requester-pays"); 
$flags+=("--smbacl-enabled"); 
$flags+=("--no-smbacl-enabled"); 
$flags+=("--admin-user-list"); 
$flags+=("--valid-user-list"); 
$flags+=("--invalid-user-list"); 
$flags+=("--audit-destination-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-update-smb-security-strategy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--gateway-arn"); 
$flags+=("--smb-security-strategy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-update-snapshot-schedule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--volume-arn"); 
$flags+=("--start-at"); 
$flags+=("--recurrence-in-hours"); 
$flags+=("--description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-storagegateway-update-vtl-device-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vtl-device-arn"); 
$flags+=("--device-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sts {
    $commands = [System.Collections.ArrayList]@();

$commands+=("assume-role"); 
$commands+=("assume-role-with-saml"); 
$commands+=("assume-role-with-web-identity"); 
$commands+=("decode-authorization-message"); 
$commands+=("get-access-key-info"); 
$commands+=("get-caller-identity"); 
$commands+=("get-federation-token"); 
$commands+=("get-session-token");

return $commands;
}

 function Get-sts-assume-role {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-arn"); 
$flags+=("--role-session-name"); 
$flags+=("--policy-arns"); 
$flags+=("--policy"); 
$flags+=("--duration-seconds"); 
$flags+=("--tags"); 
$flags+=("--transitive-tag-keys"); 
$flags+=("--external-id"); 
$flags+=("--serial-number"); 
$flags+=("--token-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sts-assume-role-with-saml {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-arn"); 
$flags+=("--principal-arn"); 
$flags+=("--saml-assertion"); 
$flags+=("--policy-arns"); 
$flags+=("--policy"); 
$flags+=("--duration-seconds"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sts-assume-role-with-web-identity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--role-arn"); 
$flags+=("--role-session-name"); 
$flags+=("--web-identity-token"); 
$flags+=("--provider-id"); 
$flags+=("--policy-arns"); 
$flags+=("--policy"); 
$flags+=("--duration-seconds"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sts-decode-authorization-message {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--encoded-message"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sts-get-access-key-info {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--access-key-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sts-get-caller-identity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sts-get-federation-token {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--policy"); 
$flags+=("--policy-arns"); 
$flags+=("--duration-seconds"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-sts-get-session-token {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--duration-seconds"); 
$flags+=("--serial-number"); 
$flags+=("--token-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-support {
    $commands = [System.Collections.ArrayList]@();

$commands+=("add-attachments-to-set"); 
$commands+=("add-communication-to-case"); 
$commands+=("create-case"); 
$commands+=("describe-attachment"); 
$commands+=("describe-cases"); 
$commands+=("describe-communications"); 
$commands+=("describe-services"); 
$commands+=("describe-severity-levels"); 
$commands+=("describe-trusted-advisor-check-refresh-statuses"); 
$commands+=("describe-trusted-advisor-check-result"); 
$commands+=("describe-trusted-advisor-check-summaries"); 
$commands+=("describe-trusted-advisor-checks"); 
$commands+=("refresh-trusted-advisor-check"); 
$commands+=("resolve-case");

return $commands;
}

 function Get-support-add-attachments-to-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--attachment-set-id"); 
$flags+=("--attachments"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-support-add-communication-to-case {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--case-id"); 
$flags+=("--communication-body"); 
$flags+=("--cc-email-addresses"); 
$flags+=("--attachment-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-support-create-case {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subject"); 
$flags+=("--service-code"); 
$flags+=("--severity-code"); 
$flags+=("--category-code"); 
$flags+=("--communication-body"); 
$flags+=("--cc-email-addresses"); 
$flags+=("--language"); 
$flags+=("--issue-type"); 
$flags+=("--attachment-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-support-describe-attachment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--attachment-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-support-describe-cases {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--case-id-list"); 
$flags+=("--display-id"); 
$flags+=("--after-time"); 
$flags+=("--before-time"); 
$flags+=("--include-resolved-cases"); 
$flags+=("--no-include-resolved-cases"); 
$flags+=("--language"); 
$flags+=("--include-communications"); 
$flags+=("--no-include-communications"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-support-describe-communications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--case-id"); 
$flags+=("--before-time"); 
$flags+=("--after-time"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-support-describe-services {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--service-code-list"); 
$flags+=("--language"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-support-describe-severity-levels {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--language"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-support-describe-trusted-advisor-check-refresh-statuses {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--check-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-support-describe-trusted-advisor-check-result {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--check-id"); 
$flags+=("--language"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-support-describe-trusted-advisor-check-summaries {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--check-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-support-describe-trusted-advisor-checks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--language"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-support-refresh-trusted-advisor-check {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--check-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-support-resolve-case {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--case-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf {
    $commands = [System.Collections.ArrayList]@();

$commands+=("count-closed-workflow-executions"); 
$commands+=("count-open-workflow-executions"); 
$commands+=("count-pending-activity-tasks"); 
$commands+=("count-pending-decision-tasks"); 
$commands+=("deprecate-activity-type"); 
$commands+=("deprecate-domain"); 
$commands+=("deprecate-workflow-type"); 
$commands+=("describe-activity-type"); 
$commands+=("describe-domain"); 
$commands+=("describe-workflow-execution"); 
$commands+=("describe-workflow-type"); 
$commands+=("get-workflow-execution-history"); 
$commands+=("list-activity-types"); 
$commands+=("list-closed-workflow-executions"); 
$commands+=("list-domains"); 
$commands+=("list-open-workflow-executions"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-workflow-types"); 
$commands+=("poll-for-activity-task"); 
$commands+=("poll-for-decision-task"); 
$commands+=("record-activity-task-heartbeat"); 
$commands+=("register-activity-type"); 
$commands+=("register-domain"); 
$commands+=("register-workflow-type"); 
$commands+=("request-cancel-workflow-execution"); 
$commands+=("respond-activity-task-canceled"); 
$commands+=("respond-activity-task-completed"); 
$commands+=("respond-activity-task-failed"); 
$commands+=("respond-decision-task-completed"); 
$commands+=("signal-workflow-execution"); 
$commands+=("start-workflow-execution"); 
$commands+=("tag-resource"); 
$commands+=("terminate-workflow-execution"); 
$commands+=("undeprecate-activity-type"); 
$commands+=("undeprecate-domain"); 
$commands+=("undeprecate-workflow-type"); 
$commands+=("untag-resource");

return $commands;
}

 function Get-swf-count-closed-workflow-executions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--start-time-filter"); 
$flags+=("--close-time-filter"); 
$flags+=("--execution-filter"); 
$flags+=("--type-filter"); 
$flags+=("--tag-filter"); 
$flags+=("--close-status-filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-count-open-workflow-executions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--start-time-filter"); 
$flags+=("--type-filter"); 
$flags+=("--tag-filter"); 
$flags+=("--execution-filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-count-pending-activity-tasks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--task-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-count-pending-decision-tasks {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--task-list"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-deprecate-activity-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--activity-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-deprecate-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-deprecate-workflow-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--workflow-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-describe-activity-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--activity-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-describe-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-describe-workflow-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--execution"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-describe-workflow-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--workflow-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-get-workflow-execution-history {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--execution"); 
$flags+=("--reverse-order"); 
$flags+=("--no-reverse-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-list-activity-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--name"); 
$flags+=("--registration-status"); 
$flags+=("--reverse-order"); 
$flags+=("--no-reverse-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-list-closed-workflow-executions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--start-time-filter"); 
$flags+=("--close-time-filter"); 
$flags+=("--execution-filter"); 
$flags+=("--close-status-filter"); 
$flags+=("--type-filter"); 
$flags+=("--tag-filter"); 
$flags+=("--reverse-order"); 
$flags+=("--no-reverse-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-list-domains {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--registration-status"); 
$flags+=("--reverse-order"); 
$flags+=("--no-reverse-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-list-open-workflow-executions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--start-time-filter"); 
$flags+=("--type-filter"); 
$flags+=("--tag-filter"); 
$flags+=("--reverse-order"); 
$flags+=("--no-reverse-order"); 
$flags+=("--execution-filter"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-list-workflow-types {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--name"); 
$flags+=("--registration-status"); 
$flags+=("--reverse-order"); 
$flags+=("--no-reverse-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-poll-for-activity-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--task-list"); 
$flags+=("--identity"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-poll-for-decision-task {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--task-list"); 
$flags+=("--identity"); 
$flags+=("--reverse-order"); 
$flags+=("--no-reverse-order"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-record-activity-task-heartbeat {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-token"); 
$flags+=("--details"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-register-activity-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--default-task-start-to-close-timeout"); 
$flags+=("--default-task-heartbeat-timeout"); 
$flags+=("--default-task-list"); 
$flags+=("--default-task-priority"); 
$flags+=("--default-task-schedule-to-start-timeout"); 
$flags+=("--default-task-schedule-to-close-timeout"); 
$flags+=("--activity-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-register-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--workflow-execution-retention-period-in-days"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-register-workflow-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--default-task-start-to-close-timeout"); 
$flags+=("--default-execution-start-to-close-timeout"); 
$flags+=("--default-task-list"); 
$flags+=("--default-task-priority"); 
$flags+=("--default-child-policy"); 
$flags+=("--default-lambda-role"); 
$flags+=("--workflow-version"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-request-cancel-workflow-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--workflow-id"); 
$flags+=("--run-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-respond-activity-task-canceled {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-token"); 
$flags+=("--details"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-respond-activity-task-completed {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-token"); 
$flags+=("--result"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-respond-activity-task-failed {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-token"); 
$flags+=("--reason"); 
$flags+=("--details"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-respond-decision-task-completed {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--task-token"); 
$flags+=("--decisions"); 
$flags+=("--execution-context"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-signal-workflow-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--workflow-id"); 
$flags+=("--run-id"); 
$flags+=("--signal-name"); 
$flags+=("--input"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-start-workflow-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--workflow-id"); 
$flags+=("--workflow-type"); 
$flags+=("--task-list"); 
$flags+=("--task-priority"); 
$flags+=("--input"); 
$flags+=("--execution-start-to-close-timeout"); 
$flags+=("--tag-list"); 
$flags+=("--task-start-to-close-timeout"); 
$flags+=("--child-policy"); 
$flags+=("--lambda-role"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-terminate-workflow-execution {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--workflow-id"); 
$flags+=("--run-id"); 
$flags+=("--reason"); 
$flags+=("--details"); 
$flags+=("--child-policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-undeprecate-activity-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--activity-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-undeprecate-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-undeprecate-workflow-type {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--domain"); 
$flags+=("--workflow-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-swf-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-synthetics {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-canary"); 
$commands+=("delete-canary"); 
$commands+=("describe-canaries"); 
$commands+=("describe-canaries-last-run"); 
$commands+=("describe-runtime-versions"); 
$commands+=("get-canary"); 
$commands+=("get-canary-runs"); 
$commands+=("list-tags-for-resource"); 
$commands+=("start-canary"); 
$commands+=("stop-canary"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-canary");

return $commands;
}

 function Get-synthetics-create-canary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--code"); 
$flags+=("--artifact-s"); 
$flags+=("--execution-role-arn"); 
$flags+=("--schedule"); 
$flags+=("--run-config"); 
$flags+=("--success-retention-period-in-days"); 
$flags+=("--failure-retention-period-in-days"); 
$flags+=("--runtime-version"); 
$flags+=("--vpc-config"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-synthetics-delete-canary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-synthetics-describe-canaries {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-synthetics-describe-canaries-last-run {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-synthetics-describe-runtime-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-synthetics-get-canary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-synthetics-get-canary-runs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-synthetics-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-synthetics-start-canary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-synthetics-stop-canary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-synthetics-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-synthetics-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-synthetics-update-canary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--code"); 
$flags+=("--execution-role-arn"); 
$flags+=("--runtime-version"); 
$flags+=("--schedule"); 
$flags+=("--run-config"); 
$flags+=("--success-retention-period-in-days"); 
$flags+=("--failure-retention-period-in-days"); 
$flags+=("--vpc-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-textract {
    $commands = [System.Collections.ArrayList]@();

$commands+=("analyze-document"); 
$commands+=("detect-document-text"); 
$commands+=("get-document-analysis"); 
$commands+=("get-document-text-detection"); 
$commands+=("start-document-analysis"); 
$commands+=("start-document-text-detection");

return $commands;
}

 function Get-textract-analyze-document {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--document"); 
$flags+=("--feature-types"); 
$flags+=("--human-loop-config"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-textract-detect-document-text {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--document"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-textract-get-document-analysis {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-textract-get-document-text-detection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-textract-start-document-analysis {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--document-location"); 
$flags+=("--feature-types"); 
$flags+=("--client-request-token"); 
$flags+=("--job-tag"); 
$flags+=("--notification-channel"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-textract-start-document-text-detection {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--document-location"); 
$flags+=("--client-request-token"); 
$flags+=("--job-tag"); 
$flags+=("--notification-channel"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transcribe {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-medical-vocabulary"); 
$commands+=("create-vocabulary"); 
$commands+=("create-vocabulary-filter"); 
$commands+=("delete-medical-transcription-job"); 
$commands+=("delete-medical-vocabulary"); 
$commands+=("delete-transcription-job"); 
$commands+=("delete-vocabulary"); 
$commands+=("delete-vocabulary-filter"); 
$commands+=("get-medical-transcription-job"); 
$commands+=("get-medical-vocabulary"); 
$commands+=("get-transcription-job"); 
$commands+=("get-vocabulary"); 
$commands+=("get-vocabulary-filter"); 
$commands+=("list-medical-transcription-jobs"); 
$commands+=("list-medical-vocabularies"); 
$commands+=("list-transcription-jobs"); 
$commands+=("list-vocabularies"); 
$commands+=("list-vocabulary-filters"); 
$commands+=("start-medical-transcription-job"); 
$commands+=("start-transcription-job"); 
$commands+=("update-medical-vocabulary"); 
$commands+=("update-vocabulary"); 
$commands+=("update-vocabulary-filter");

return $commands;
}

 function Get-transcribe-create-medical-vocabulary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vocabulary-name"); 
$flags+=("--language-code"); 
$flags+=("--vocabulary-file-uri"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transcribe-create-vocabulary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vocabulary-name"); 
$flags+=("--language-code"); 
$flags+=("--phrases"); 
$flags+=("--vocabulary-file-uri"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transcribe-create-vocabulary-filter {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vocabulary-filter-name"); 
$flags+=("--language-code"); 
$flags+=("--words"); 
$flags+=("--vocabulary-filter-file-uri"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transcribe-delete-medical-transcription-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--medical-transcription-job-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transcribe-delete-medical-vocabulary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vocabulary-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transcribe-delete-transcription-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transcription-job-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transcribe-delete-vocabulary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vocabulary-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transcribe-delete-vocabulary-filter {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vocabulary-filter-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transcribe-get-medical-transcription-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--medical-transcription-job-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transcribe-get-medical-vocabulary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vocabulary-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transcribe-get-transcription-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transcription-job-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transcribe-get-vocabulary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vocabulary-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transcribe-get-vocabulary-filter {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vocabulary-filter-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transcribe-list-medical-transcription-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--status"); 
$flags+=("--job-name-contains"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transcribe-list-medical-vocabularies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--state-equals"); 
$flags+=("--name-contains"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transcribe-list-transcription-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--status"); 
$flags+=("--job-name-contains"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transcribe-list-vocabularies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--state-equals"); 
$flags+=("--name-contains"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transcribe-list-vocabulary-filters {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--name-contains"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transcribe-start-medical-transcription-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--medical-transcription-job-name"); 
$flags+=("--language-code"); 
$flags+=("--media-sample-rate-hertz"); 
$flags+=("--media-format"); 
$flags+=("--media"); 
$flags+=("--output-bucket-name"); 
$flags+=("--output-encryption-kms-key-id"); 
$flags+=("--settings"); 
$flags+=("--specialty"); 
$flags+=("--type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transcribe-start-transcription-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--transcription-job-name"); 
$flags+=("--language-code"); 
$flags+=("--media-sample-rate-hertz"); 
$flags+=("--media-format"); 
$flags+=("--media"); 
$flags+=("--output-bucket-name"); 
$flags+=("--output-encryption-kms-key-id"); 
$flags+=("--settings"); 
$flags+=("--job-execution-settings"); 
$flags+=("--content-redaction"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transcribe-update-medical-vocabulary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vocabulary-name"); 
$flags+=("--language-code"); 
$flags+=("--vocabulary-file-uri"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transcribe-update-vocabulary {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vocabulary-name"); 
$flags+=("--language-code"); 
$flags+=("--phrases"); 
$flags+=("--vocabulary-file-uri"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transcribe-update-vocabulary-filter {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vocabulary-filter-name"); 
$flags+=("--words"); 
$flags+=("--vocabulary-filter-file-uri"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transfer {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-server"); 
$commands+=("create-user"); 
$commands+=("delete-server"); 
$commands+=("delete-ssh-public-key"); 
$commands+=("delete-user"); 
$commands+=("describe-server"); 
$commands+=("describe-user"); 
$commands+=("import-ssh-public-key"); 
$commands+=("list-servers"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-users"); 
$commands+=("start-server"); 
$commands+=("stop-server"); 
$commands+=("tag-resource"); 
$commands+=("test-identity-provider"); 
$commands+=("untag-resource"); 
$commands+=("update-server"); 
$commands+=("update-user");

return $commands;
}

 function Get-transfer-create-server {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate"); 
$flags+=("--endpoint-details"); 
$flags+=("--endpoint-type"); 
$flags+=("--host-key"); 
$flags+=("--identity-provider-details"); 
$flags+=("--identity-provider-type"); 
$flags+=("--logging-role"); 
$flags+=("--protocols"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transfer-create-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--home-directory"); 
$flags+=("--home-directory-type"); 
$flags+=("--home-directory-mappings"); 
$flags+=("--policy"); 
$flags+=("--role"); 
$flags+=("--server-id"); 
$flags+=("--ssh-public-key-body"); 
$flags+=("--tags"); 
$flags+=("--user-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transfer-delete-server {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--server-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transfer-delete-ssh-public-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--server-id"); 
$flags+=("--ssh-public-key-id"); 
$flags+=("--user-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transfer-delete-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--server-id"); 
$flags+=("--user-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transfer-describe-server {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--server-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transfer-describe-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--server-id"); 
$flags+=("--user-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transfer-import-ssh-public-key {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--server-id"); 
$flags+=("--ssh-public-key-body"); 
$flags+=("--user-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transfer-list-servers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transfer-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transfer-list-users {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--server-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transfer-start-server {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--server-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transfer-stop-server {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--server-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transfer-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transfer-test-identity-provider {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--server-id"); 
$flags+=("--user-name"); 
$flags+=("--user-password"); 
$flags+=("--server-protocol"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transfer-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transfer-update-server {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--certificate"); 
$flags+=("--endpoint-details"); 
$flags+=("--endpoint-type"); 
$flags+=("--host-key"); 
$flags+=("--identity-provider-details"); 
$flags+=("--logging-role"); 
$flags+=("--protocols"); 
$flags+=("--server-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-transfer-update-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--home-directory"); 
$flags+=("--home-directory-type"); 
$flags+=("--home-directory-mappings"); 
$flags+=("--policy"); 
$flags+=("--role"); 
$flags+=("--server-id"); 
$flags+=("--user-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-translate {
    $commands = [System.Collections.ArrayList]@();

$commands+=("delete-terminology"); 
$commands+=("describe-text-translation-job"); 
$commands+=("get-terminology"); 
$commands+=("import-terminology"); 
$commands+=("list-terminologies"); 
$commands+=("list-text-translation-jobs"); 
$commands+=("start-text-translation-job"); 
$commands+=("stop-text-translation-job"); 
$commands+=("translate-text");

return $commands;
}

 function Get-translate-delete-terminology {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-translate-describe-text-translation-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-translate-get-terminology {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--terminology-data-format"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-translate-import-terminology {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--merge-strategy"); 
$flags+=("--description"); 
$flags+=("--terminology-data"); 
$flags+=("--encryption-key"); 
$flags+=("--data-file"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-translate-list-terminologies {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-translate-list-text-translation-jobs {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--filter"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-translate-start-text-translation-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-name"); 
$flags+=("--input-data-config"); 
$flags+=("--output-data-config"); 
$flags+=("--data-access-role-arn"); 
$flags+=("--source-language-code"); 
$flags+=("--target-language-codes"); 
$flags+=("--terminology-names"); 
$flags+=("--client-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-translate-stop-text-translation-job {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--job-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-translate-translate-text {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--text"); 
$flags+=("--terminology-names"); 
$flags+=("--source-language-code"); 
$flags+=("--target-language-code"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf {
    $commands = [System.Collections.ArrayList]@();

$commands+=("create-byte-match-set"); 
$commands+=("create-geo-match-set"); 
$commands+=("create-ip-set"); 
$commands+=("create-rate-based-rule"); 
$commands+=("create-regex-match-set"); 
$commands+=("create-regex-pattern-set"); 
$commands+=("create-rule"); 
$commands+=("create-rule-group"); 
$commands+=("create-size-constraint-set"); 
$commands+=("create-sql-injection-match-set"); 
$commands+=("create-web-acl"); 
$commands+=("create-web-acl-migration-stack"); 
$commands+=("create-xss-match-set"); 
$commands+=("delete-byte-match-set"); 
$commands+=("delete-geo-match-set"); 
$commands+=("delete-ip-set"); 
$commands+=("delete-logging-configuration"); 
$commands+=("delete-permission-policy"); 
$commands+=("delete-rate-based-rule"); 
$commands+=("delete-regex-match-set"); 
$commands+=("delete-regex-pattern-set"); 
$commands+=("delete-rule"); 
$commands+=("delete-rule-group"); 
$commands+=("delete-size-constraint-set"); 
$commands+=("delete-sql-injection-match-set"); 
$commands+=("delete-web-acl"); 
$commands+=("delete-xss-match-set"); 
$commands+=("get-byte-match-set"); 
$commands+=("get-change-token"); 
$commands+=("get-change-token-status"); 
$commands+=("get-geo-match-set"); 
$commands+=("get-ip-set"); 
$commands+=("get-logging-configuration"); 
$commands+=("get-permission-policy"); 
$commands+=("get-rate-based-rule"); 
$commands+=("get-rate-based-rule-managed-keys"); 
$commands+=("get-regex-match-set"); 
$commands+=("get-regex-pattern-set"); 
$commands+=("get-rule"); 
$commands+=("get-rule-group"); 
$commands+=("get-sampled-requests"); 
$commands+=("get-size-constraint-set"); 
$commands+=("get-sql-injection-match-set"); 
$commands+=("get-web-acl"); 
$commands+=("get-xss-match-set"); 
$commands+=("list-activated-rules-in-rule-group"); 
$commands+=("list-byte-match-sets"); 
$commands+=("list-geo-match-sets"); 
$commands+=("list-ip-sets"); 
$commands+=("list-logging-configurations"); 
$commands+=("list-rate-based-rules"); 
$commands+=("list-regex-match-sets"); 
$commands+=("list-regex-pattern-sets"); 
$commands+=("list-rule-groups"); 
$commands+=("list-rules"); 
$commands+=("list-size-constraint-sets"); 
$commands+=("list-sql-injection-match-sets"); 
$commands+=("list-subscribed-rule-groups"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-web-acls"); 
$commands+=("list-xss-match-sets"); 
$commands+=("put-logging-configuration"); 
$commands+=("put-permission-policy"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-byte-match-set"); 
$commands+=("update-geo-match-set"); 
$commands+=("update-ip-set"); 
$commands+=("update-rate-based-rule"); 
$commands+=("update-regex-match-set"); 
$commands+=("update-regex-pattern-set"); 
$commands+=("update-rule"); 
$commands+=("update-rule-group"); 
$commands+=("update-size-constraint-set"); 
$commands+=("update-sql-injection-match-set"); 
$commands+=("update-web-acl"); 
$commands+=("update-xss-match-set");

return $commands;
}

 function Get-waf-create-byte-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-create-geo-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-create-ip-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-create-rate-based-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--metric-name"); 
$flags+=("--rate-key"); 
$flags+=("--rate-limit"); 
$flags+=("--change-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-create-regex-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-create-regex-pattern-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-create-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--metric-name"); 
$flags+=("--change-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-create-rule-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--metric-name"); 
$flags+=("--change-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-create-size-constraint-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-create-sql-injection-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-create-web-acl {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--metric-name"); 
$flags+=("--default-action"); 
$flags+=("--change-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-create-web-acl-migration-stack {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--web-acl-id"); 
$flags+=("--s"); 
$flags+=("--ignore-unsupported-type"); 
$flags+=("--no-ignore-unsupported-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-create-xss-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-delete-byte-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--byte-match-set-id"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-delete-geo-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--geo-match-set-id"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-delete-ip-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ip-set-id"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-delete-logging-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-delete-permission-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-delete-rate-based-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-id"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-delete-regex-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--regex-match-set-id"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-delete-regex-pattern-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--regex-pattern-set-id"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-delete-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-id"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-delete-rule-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-group-id"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-delete-size-constraint-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--size-constraint-set-id"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-delete-sql-injection-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sql-injection-match-set-id"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-delete-web-acl {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--web-acl-id"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-delete-xss-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--xss-match-set-id"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-get-byte-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--byte-match-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-get-change-token {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-get-change-token-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-get-geo-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--geo-match-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-get-ip-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ip-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-get-logging-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-get-permission-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-get-rate-based-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-get-rate-based-rule-managed-keys {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-get-regex-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--regex-match-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-get-regex-pattern-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--regex-pattern-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-get-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-get-rule-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-get-sampled-requests {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--web-acl-id"); 
$flags+=("--rule-id"); 
$flags+=("--time-window"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-get-size-constraint-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--size-constraint-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-get-sql-injection-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sql-injection-match-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-get-web-acl {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--web-acl-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-get-xss-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--xss-match-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-list-activated-rules-in-rule-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-list-byte-match-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-list-geo-match-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-list-ip-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-list-logging-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-list-rate-based-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-list-regex-match-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-list-regex-pattern-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-list-rule-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-list-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-list-size-constraint-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-list-sql-injection-match-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-list-subscribed-rule-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-marker"); 
$flags+=("--limit"); 
$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-list-web-acls {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-list-xss-match-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-put-logging-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--logging-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-put-permission-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-update-byte-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--byte-match-set-id"); 
$flags+=("--change-token"); 
$flags+=("--updates"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-update-geo-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--geo-match-set-id"); 
$flags+=("--change-token"); 
$flags+=("--updates"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-update-ip-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ip-set-id"); 
$flags+=("--change-token"); 
$flags+=("--updates"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-update-rate-based-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-id"); 
$flags+=("--change-token"); 
$flags+=("--updates"); 
$flags+=("--rate-limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-update-regex-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--regex-match-set-id"); 
$flags+=("--updates"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-update-regex-pattern-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--regex-pattern-set-id"); 
$flags+=("--updates"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-update-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-id"); 
$flags+=("--change-token"); 
$flags+=("--updates"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-update-rule-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-group-id"); 
$flags+=("--updates"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-update-size-constraint-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--size-constraint-set-id"); 
$flags+=("--change-token"); 
$flags+=("--updates"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-update-sql-injection-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sql-injection-match-set-id"); 
$flags+=("--change-token"); 
$flags+=("--updates"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-update-web-acl {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--web-acl-id"); 
$flags+=("--change-token"); 
$flags+=("--updates"); 
$flags+=("--default-action"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-update-xss-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--xss-match-set-id"); 
$flags+=("--change-token"); 
$flags+=("--updates"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-web-acl"); 
$commands+=("create-byte-match-set"); 
$commands+=("create-geo-match-set"); 
$commands+=("create-ip-set"); 
$commands+=("create-rate-based-rule"); 
$commands+=("create-regex-match-set"); 
$commands+=("create-regex-pattern-set"); 
$commands+=("create-rule"); 
$commands+=("create-rule-group"); 
$commands+=("create-size-constraint-set"); 
$commands+=("create-sql-injection-match-set"); 
$commands+=("create-web-acl"); 
$commands+=("create-web-acl-migration-stack"); 
$commands+=("create-xss-match-set"); 
$commands+=("delete-byte-match-set"); 
$commands+=("delete-geo-match-set"); 
$commands+=("delete-ip-set"); 
$commands+=("delete-logging-configuration"); 
$commands+=("delete-permission-policy"); 
$commands+=("delete-rate-based-rule"); 
$commands+=("delete-regex-match-set"); 
$commands+=("delete-regex-pattern-set"); 
$commands+=("delete-rule"); 
$commands+=("delete-rule-group"); 
$commands+=("delete-size-constraint-set"); 
$commands+=("delete-sql-injection-match-set"); 
$commands+=("delete-web-acl"); 
$commands+=("delete-xss-match-set"); 
$commands+=("disassociate-web-acl"); 
$commands+=("get-byte-match-set"); 
$commands+=("get-change-token"); 
$commands+=("get-change-token-status"); 
$commands+=("get-geo-match-set"); 
$commands+=("get-ip-set"); 
$commands+=("get-logging-configuration"); 
$commands+=("get-permission-policy"); 
$commands+=("get-rate-based-rule"); 
$commands+=("get-rate-based-rule-managed-keys"); 
$commands+=("get-regex-match-set"); 
$commands+=("get-regex-pattern-set"); 
$commands+=("get-rule"); 
$commands+=("get-rule-group"); 
$commands+=("get-sampled-requests"); 
$commands+=("get-size-constraint-set"); 
$commands+=("get-sql-injection-match-set"); 
$commands+=("get-web-acl"); 
$commands+=("get-web-acl-for-resource"); 
$commands+=("get-xss-match-set"); 
$commands+=("list-activated-rules-in-rule-group"); 
$commands+=("list-byte-match-sets"); 
$commands+=("list-geo-match-sets"); 
$commands+=("list-ip-sets"); 
$commands+=("list-logging-configurations"); 
$commands+=("list-rate-based-rules"); 
$commands+=("list-regex-match-sets"); 
$commands+=("list-regex-pattern-sets"); 
$commands+=("list-resources-for-web-acl"); 
$commands+=("list-rule-groups"); 
$commands+=("list-rules"); 
$commands+=("list-size-constraint-sets"); 
$commands+=("list-sql-injection-match-sets"); 
$commands+=("list-subscribed-rule-groups"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-web-acls"); 
$commands+=("list-xss-match-sets"); 
$commands+=("put-logging-configuration"); 
$commands+=("put-permission-policy"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-byte-match-set"); 
$commands+=("update-geo-match-set"); 
$commands+=("update-ip-set"); 
$commands+=("update-rate-based-rule"); 
$commands+=("update-regex-match-set"); 
$commands+=("update-regex-pattern-set"); 
$commands+=("update-rule"); 
$commands+=("update-rule-group"); 
$commands+=("update-size-constraint-set"); 
$commands+=("update-sql-injection-match-set"); 
$commands+=("update-web-acl"); 
$commands+=("update-xss-match-set");

return $commands;
}

 function Get-waf-regional-associate-web-acl {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--web-acl-id"); 
$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-create-byte-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-create-geo-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-create-ip-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-create-rate-based-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--metric-name"); 
$flags+=("--rate-key"); 
$flags+=("--rate-limit"); 
$flags+=("--change-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-create-regex-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-create-regex-pattern-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-create-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--metric-name"); 
$flags+=("--change-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-create-rule-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--metric-name"); 
$flags+=("--change-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-create-size-constraint-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-create-sql-injection-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-create-web-acl {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--metric-name"); 
$flags+=("--default-action"); 
$flags+=("--change-token"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-create-web-acl-migration-stack {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--web-acl-id"); 
$flags+=("--s"); 
$flags+=("--ignore-unsupported-type"); 
$flags+=("--no-ignore-unsupported-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-create-xss-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-delete-byte-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--byte-match-set-id"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-delete-geo-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--geo-match-set-id"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-delete-ip-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ip-set-id"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-delete-logging-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-delete-permission-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-delete-rate-based-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-id"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-delete-regex-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--regex-match-set-id"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-delete-regex-pattern-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--regex-pattern-set-id"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-delete-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-id"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-delete-rule-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-group-id"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-delete-size-constraint-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--size-constraint-set-id"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-delete-sql-injection-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sql-injection-match-set-id"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-delete-web-acl {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--web-acl-id"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-delete-xss-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--xss-match-set-id"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-disassociate-web-acl {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-get-byte-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--byte-match-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-get-change-token {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-get-change-token-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-get-geo-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--geo-match-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-get-ip-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ip-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-get-logging-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-get-permission-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-get-rate-based-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-get-rate-based-rule-managed-keys {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-id"); 
$flags+=("--next-marker"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-get-regex-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--regex-match-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-get-regex-pattern-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--regex-pattern-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-get-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-get-rule-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-get-sampled-requests {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--web-acl-id"); 
$flags+=("--rule-id"); 
$flags+=("--time-window"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-get-size-constraint-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--size-constraint-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-get-sql-injection-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sql-injection-match-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-get-web-acl {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--web-acl-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-get-web-acl-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-get-xss-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--xss-match-set-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-list-activated-rules-in-rule-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-group-id"); 
$flags+=("--next-marker"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-list-byte-match-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-marker"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-list-geo-match-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-marker"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-list-ip-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-marker"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-list-logging-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-marker"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-list-rate-based-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-marker"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-list-regex-match-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-marker"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-list-regex-pattern-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-marker"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-list-resources-for-web-acl {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--web-acl-id"); 
$flags+=("--resource-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-list-rule-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-marker"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-list-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-marker"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-list-size-constraint-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-marker"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-list-sql-injection-match-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-marker"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-list-subscribed-rule-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-marker"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-marker"); 
$flags+=("--limit"); 
$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-list-web-acls {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-marker"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-list-xss-match-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-marker"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-put-logging-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--logging-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-put-permission-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-update-byte-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--byte-match-set-id"); 
$flags+=("--change-token"); 
$flags+=("--updates"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-update-geo-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--geo-match-set-id"); 
$flags+=("--change-token"); 
$flags+=("--updates"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-update-ip-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ip-set-id"); 
$flags+=("--change-token"); 
$flags+=("--updates"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-update-rate-based-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-id"); 
$flags+=("--change-token"); 
$flags+=("--updates"); 
$flags+=("--rate-limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-update-regex-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--regex-match-set-id"); 
$flags+=("--updates"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-update-regex-pattern-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--regex-pattern-set-id"); 
$flags+=("--updates"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-update-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-id"); 
$flags+=("--change-token"); 
$flags+=("--updates"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-update-rule-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-group-id"); 
$flags+=("--updates"); 
$flags+=("--change-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-update-size-constraint-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--size-constraint-set-id"); 
$flags+=("--change-token"); 
$flags+=("--updates"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-update-sql-injection-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sql-injection-match-set-id"); 
$flags+=("--change-token"); 
$flags+=("--updates"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-update-web-acl {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--web-acl-id"); 
$flags+=("--change-token"); 
$flags+=("--updates"); 
$flags+=("--default-action"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-waf-regional-update-xss-match-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--xss-match-set-id"); 
$flags+=("--change-token"); 
$flags+=("--updates"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2 {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-web-acl"); 
$commands+=("check-capacity"); 
$commands+=("create-ip-set"); 
$commands+=("create-regex-pattern-set"); 
$commands+=("create-rule-group"); 
$commands+=("create-web-acl"); 
$commands+=("delete-firewall-manager-rule-groups"); 
$commands+=("delete-ip-set"); 
$commands+=("delete-logging-configuration"); 
$commands+=("delete-permission-policy"); 
$commands+=("delete-regex-pattern-set"); 
$commands+=("delete-rule-group"); 
$commands+=("delete-web-acl"); 
$commands+=("describe-managed-rule-group"); 
$commands+=("disassociate-web-acl"); 
$commands+=("get-ip-set"); 
$commands+=("get-logging-configuration"); 
$commands+=("get-permission-policy"); 
$commands+=("get-rate-based-statement-managed-keys"); 
$commands+=("get-regex-pattern-set"); 
$commands+=("get-rule-group"); 
$commands+=("get-sampled-requests"); 
$commands+=("get-web-acl"); 
$commands+=("get-web-acl-for-resource"); 
$commands+=("list-available-managed-rule-groups"); 
$commands+=("list-ip-sets"); 
$commands+=("list-logging-configurations"); 
$commands+=("list-regex-pattern-sets"); 
$commands+=("list-resources-for-web-acl"); 
$commands+=("list-rule-groups"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-web-acls"); 
$commands+=("put-logging-configuration"); 
$commands+=("put-permission-policy"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-ip-set"); 
$commands+=("update-regex-pattern-set"); 
$commands+=("update-rule-group"); 
$commands+=("update-web-acl");

return $commands;
}

 function Get-wafv2-associate-web-acl {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--web-acl-arn"); 
$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-check-capacity {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--scope"); 
$flags+=("--rules"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-create-ip-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--scope"); 
$flags+=("--description"); 
$flags+=("--ip-address-version"); 
$flags+=("--addresses"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-create-regex-pattern-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--scope"); 
$flags+=("--description"); 
$flags+=("--regular-expression-list"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-create-rule-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--scope"); 
$flags+=("--capacity"); 
$flags+=("--description"); 
$flags+=("--rules"); 
$flags+=("--visibility-config"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-create-web-acl {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--scope"); 
$flags+=("--default-action"); 
$flags+=("--description"); 
$flags+=("--rules"); 
$flags+=("--visibility-config"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-delete-firewall-manager-rule-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--web-acl-arn"); 
$flags+=("--web-acl-lock-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-delete-ip-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--scope"); 
$flags+=("--id"); 
$flags+=("--lock-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-delete-logging-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-delete-permission-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-delete-regex-pattern-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--scope"); 
$flags+=("--id"); 
$flags+=("--lock-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-delete-rule-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--scope"); 
$flags+=("--id"); 
$flags+=("--lock-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-delete-web-acl {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--scope"); 
$flags+=("--id"); 
$flags+=("--lock-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-describe-managed-rule-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--vendor-name"); 
$flags+=("--name"); 
$flags+=("--scope"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-disassociate-web-acl {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-get-ip-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--scope"); 
$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-get-logging-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-get-permission-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-get-rate-based-statement-managed-keys {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--scope"); 
$flags+=("--web-acl-name"); 
$flags+=("--web-acl-id"); 
$flags+=("--rule-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-get-regex-pattern-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--scope"); 
$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-get-rule-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--scope"); 
$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-get-sampled-requests {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--web-acl-arn"); 
$flags+=("--rule-metric-name"); 
$flags+=("--scope"); 
$flags+=("--time-window"); 
$flags+=("--max-items"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-get-web-acl {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--scope"); 
$flags+=("--id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-get-web-acl-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-list-available-managed-rule-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--scope"); 
$flags+=("--next-marker"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-list-ip-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--scope"); 
$flags+=("--next-marker"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-list-logging-configurations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--scope"); 
$flags+=("--next-marker"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-list-regex-pattern-sets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--scope"); 
$flags+=("--next-marker"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-list-resources-for-web-acl {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--web-acl-arn"); 
$flags+=("--resource-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-list-rule-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--scope"); 
$flags+=("--next-marker"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-marker"); 
$flags+=("--limit"); 
$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-list-web-acls {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--scope"); 
$flags+=("--next-marker"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-put-logging-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--logging-configuration"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-put-permission-policy {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--policy"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-update-ip-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--scope"); 
$flags+=("--id"); 
$flags+=("--description"); 
$flags+=("--addresses"); 
$flags+=("--lock-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-update-regex-pattern-set {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--scope"); 
$flags+=("--id"); 
$flags+=("--description"); 
$flags+=("--regular-expression-list"); 
$flags+=("--lock-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-update-rule-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--scope"); 
$flags+=("--id"); 
$flags+=("--description"); 
$flags+=("--rules"); 
$flags+=("--visibility-config"); 
$flags+=("--lock-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-wafv2-update-web-acl {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--scope"); 
$flags+=("--id"); 
$flags+=("--default-action"); 
$flags+=("--description"); 
$flags+=("--rules"); 
$flags+=("--visibility-config"); 
$flags+=("--lock-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs {
    $commands = [System.Collections.ArrayList]@();

$commands+=("abort-document-version-upload"); 
$commands+=("activate-user"); 
$commands+=("add-resource-permissions"); 
$commands+=("create-comment"); 
$commands+=("create-custom-metadata"); 
$commands+=("create-folder"); 
$commands+=("create-labels"); 
$commands+=("create-notification-subscription"); 
$commands+=("create-user"); 
$commands+=("deactivate-user"); 
$commands+=("delete-comment"); 
$commands+=("delete-custom-metadata"); 
$commands+=("delete-document"); 
$commands+=("delete-folder"); 
$commands+=("delete-folder-contents"); 
$commands+=("delete-labels"); 
$commands+=("delete-notification-subscription"); 
$commands+=("delete-user"); 
$commands+=("describe-activities"); 
$commands+=("describe-comments"); 
$commands+=("describe-document-versions"); 
$commands+=("describe-folder-contents"); 
$commands+=("describe-groups"); 
$commands+=("describe-notification-subscriptions"); 
$commands+=("describe-resource-permissions"); 
$commands+=("describe-root-folders"); 
$commands+=("describe-users"); 
$commands+=("get-current-user"); 
$commands+=("get-document"); 
$commands+=("get-document-path"); 
$commands+=("get-document-version"); 
$commands+=("get-folder"); 
$commands+=("get-folder-path"); 
$commands+=("get-resources"); 
$commands+=("initiate-document-version-upload"); 
$commands+=("remove-all-resource-permissions"); 
$commands+=("remove-resource-permission"); 
$commands+=("update-document"); 
$commands+=("update-document-version"); 
$commands+=("update-folder"); 
$commands+=("update-user");

return $commands;
}

 function Get-workdocs-abort-document-version-upload {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--document-id"); 
$flags+=("--version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-activate-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-id"); 
$flags+=("--authentication-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-add-resource-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--resource-id"); 
$flags+=("--principals"); 
$flags+=("--notification-options"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-create-comment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--document-id"); 
$flags+=("--version-id"); 
$flags+=("--parent-id"); 
$flags+=("--thread-id"); 
$flags+=("--text"); 
$flags+=("--visibility"); 
$flags+=("--notify-collaborators"); 
$flags+=("--no-notify-collaborators"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-create-custom-metadata {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--resource-id"); 
$flags+=("--version-id"); 
$flags+=("--custom-metadata"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-create-folder {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--name"); 
$flags+=("--parent-folder-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-create-labels {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--labels"); 
$flags+=("--authentication-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-create-notification-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--protocol"); 
$flags+=("--subscription-type"); 
$flags+=("--notification-endpoint"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-create-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--username"); 
$flags+=("--email-address"); 
$flags+=("--given-name"); 
$flags+=("--surname"); 
$flags+=("--password"); 
$flags+=("--time-zone-id"); 
$flags+=("--storage-rule"); 
$flags+=("--authentication-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-deactivate-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--user-id"); 
$flags+=("--authentication-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-delete-comment {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--document-id"); 
$flags+=("--version-id"); 
$flags+=("--comment-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-delete-custom-metadata {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--resource-id"); 
$flags+=("--version-id"); 
$flags+=("--keys"); 
$flags+=("--delete-all"); 
$flags+=("--no-delete-all"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-delete-document {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--document-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-delete-folder {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--folder-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-delete-folder-contents {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--folder-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-delete-labels {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--authentication-token"); 
$flags+=("--labels"); 
$flags+=("--delete-all"); 
$flags+=("--no-delete-all"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-delete-notification-subscription {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--subscription-id"); 
$flags+=("--organization-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-delete-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--user-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-describe-activities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--organization-id"); 
$flags+=("--activity-types"); 
$flags+=("--resource-id"); 
$flags+=("--user-id"); 
$flags+=("--include-indirect-activities"); 
$flags+=("--no-include-indirect-activities"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-describe-comments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--document-id"); 
$flags+=("--version-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-describe-document-versions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--document-id"); 
$flags+=("--include"); 
$flags+=("--fields"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-describe-folder-contents {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--folder-id"); 
$flags+=("--sort"); 
$flags+=("--order"); 
$flags+=("--type"); 
$flags+=("--include"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-describe-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--search-query"); 
$flags+=("--organization-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-describe-notification-subscriptions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-describe-resource-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--resource-id"); 
$flags+=("--principal-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-describe-root-folders {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-describe-users {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--organization-id"); 
$flags+=("--user-ids"); 
$flags+=("--include"); 
$flags+=("--order"); 
$flags+=("--sort"); 
$flags+=("--fields"); 
$flags+=("--user-query"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-get-current-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-get-document {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--document-id"); 
$flags+=("--include-custom-metadata"); 
$flags+=("--no-include-custom-metadata"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-get-document-path {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--document-id"); 
$flags+=("--limit"); 
$flags+=("--fields"); 
$flags+=("--marker"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-get-document-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--document-id"); 
$flags+=("--version-id"); 
$flags+=("--fields"); 
$flags+=("--include-custom-metadata"); 
$flags+=("--no-include-custom-metadata"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-get-folder {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--folder-id"); 
$flags+=("--include-custom-metadata"); 
$flags+=("--no-include-custom-metadata"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-get-folder-path {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--folder-id"); 
$flags+=("--limit"); 
$flags+=("--fields"); 
$flags+=("--marker"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-get-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--user-id"); 
$flags+=("--collection-type"); 
$flags+=("--limit"); 
$flags+=("--marker"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-initiate-document-version-upload {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--id"); 
$flags+=("--name"); 
$flags+=("--content-created-timestamp"); 
$flags+=("--content-modified-timestamp"); 
$flags+=("--content-type"); 
$flags+=("--document-size-in-bytes"); 
$flags+=("--parent-folder-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-remove-all-resource-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--resource-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-remove-resource-permission {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--resource-id"); 
$flags+=("--principal-id"); 
$flags+=("--principal-type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-update-document {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--document-id"); 
$flags+=("--name"); 
$flags+=("--parent-folder-id"); 
$flags+=("--resource-state"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-update-document-version {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--document-id"); 
$flags+=("--version-id"); 
$flags+=("--version-status"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-update-folder {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--folder-id"); 
$flags+=("--name"); 
$flags+=("--parent-folder-id"); 
$flags+=("--resource-state"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workdocs-update-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--authentication-token"); 
$flags+=("--user-id"); 
$flags+=("--given-name"); 
$flags+=("--surname"); 
$flags+=("--type"); 
$flags+=("--storage-rule"); 
$flags+=("--time-zone-id"); 
$flags+=("--locale"); 
$flags+=("--grant-poweruser-privileges"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-domain"); 
$commands+=("associate-website-authorization-provider"); 
$commands+=("associate-website-certificate-authority"); 
$commands+=("create-fleet"); 
$commands+=("delete-fleet"); 
$commands+=("describe-audit-stream-configuration"); 
$commands+=("describe-company-network-configuration"); 
$commands+=("describe-device"); 
$commands+=("describe-device-policy-configuration"); 
$commands+=("describe-domain"); 
$commands+=("describe-fleet-metadata"); 
$commands+=("describe-identity-provider-configuration"); 
$commands+=("describe-website-certificate-authority"); 
$commands+=("disassociate-domain"); 
$commands+=("disassociate-website-authorization-provider"); 
$commands+=("disassociate-website-certificate-authority"); 
$commands+=("list-devices"); 
$commands+=("list-domains"); 
$commands+=("list-fleets"); 
$commands+=("list-website-authorization-providers"); 
$commands+=("list-website-certificate-authorities"); 
$commands+=("restore-domain-access"); 
$commands+=("revoke-domain-access"); 
$commands+=("sign-out-user"); 
$commands+=("update-audit-stream-configuration"); 
$commands+=("update-company-network-configuration"); 
$commands+=("update-device-policy-configuration"); 
$commands+=("update-domain-metadata"); 
$commands+=("update-fleet-metadata"); 
$commands+=("update-identity-provider-configuration");

return $commands;
}

 function Get-worklink-associate-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--domain-name"); 
$flags+=("--display-name"); 
$flags+=("--acm-certificate-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-associate-website-authorization-provider {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--authorization-provider-type"); 
$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-associate-website-certificate-authority {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--certificate"); 
$flags+=("--display-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-create-fleet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-name"); 
$flags+=("--display-name"); 
$flags+=("--optimize-for-end-user-location"); 
$flags+=("--no-optimize-for-end-user-location"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-delete-fleet {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-describe-audit-stream-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-describe-company-network-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-describe-device {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--device-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-describe-device-policy-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-describe-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-describe-fleet-metadata {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-describe-identity-provider-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-describe-website-certificate-authority {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--website-ca-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-disassociate-domain {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-disassociate-website-authorization-provider {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--authorization-provider-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-disassociate-website-certificate-authority {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--website-ca-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-list-devices {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-list-domains {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-list-fleets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-list-website-authorization-providers {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--next-token"); 
$flags+=("--max-results"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-list-website-certificate-authorities {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--max-results"); 
$flags+=("--next-token"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-restore-domain-access {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-revoke-domain-access {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--domain-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-sign-out-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--username"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-update-audit-stream-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--audit-stream-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-update-company-network-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--vpc-id"); 
$flags+=("--subnet-ids"); 
$flags+=("--security-group-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-update-device-policy-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--device-ca-certificate"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-update-domain-metadata {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--domain-name"); 
$flags+=("--display-name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-update-fleet-metadata {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--display-name"); 
$flags+=("--optimize-for-end-user-location"); 
$flags+=("--no-optimize-for-end-user-location"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-worklink-update-identity-provider-configuration {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--fleet-arn"); 
$flags+=("--identity-provider-type"); 
$flags+=("--identity-provider-saml-metadata"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-delegate-to-resource"); 
$commands+=("associate-member-to-group"); 
$commands+=("create-alias"); 
$commands+=("create-group"); 
$commands+=("create-resource"); 
$commands+=("create-user"); 
$commands+=("delete-access-control-rule"); 
$commands+=("delete-alias"); 
$commands+=("delete-group"); 
$commands+=("delete-mailbox-permissions"); 
$commands+=("delete-resource"); 
$commands+=("delete-user"); 
$commands+=("deregister-from-work-mail"); 
$commands+=("describe-group"); 
$commands+=("describe-organization"); 
$commands+=("describe-resource"); 
$commands+=("describe-user"); 
$commands+=("disassociate-delegate-from-resource"); 
$commands+=("disassociate-member-from-group"); 
$commands+=("get-access-control-effect"); 
$commands+=("get-mailbox-details"); 
$commands+=("list-access-control-rules"); 
$commands+=("list-aliases"); 
$commands+=("list-group-members"); 
$commands+=("list-groups"); 
$commands+=("list-mailbox-permissions"); 
$commands+=("list-organizations"); 
$commands+=("list-resource-delegates"); 
$commands+=("list-resources"); 
$commands+=("list-tags-for-resource"); 
$commands+=("list-users"); 
$commands+=("put-access-control-rule"); 
$commands+=("put-mailbox-permissions"); 
$commands+=("register-to-work-mail"); 
$commands+=("reset-password"); 
$commands+=("tag-resource"); 
$commands+=("untag-resource"); 
$commands+=("update-mailbox-quota"); 
$commands+=("update-primary-email-address"); 
$commands+=("update-resource");

return $commands;
}

 function Get-workmail-associate-delegate-to-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--resource-id"); 
$flags+=("--entity-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-associate-member-to-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--group-id"); 
$flags+=("--member-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-create-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--entity-id"); 
$flags+=("--alias"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-create-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-create-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--name"); 
$flags+=("--type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-create-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--name"); 
$flags+=("--display-name"); 
$flags+=("--password"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-delete-access-control-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--name"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-delete-alias {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--entity-id"); 
$flags+=("--alias"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-delete-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-delete-mailbox-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--entity-id"); 
$flags+=("--grantee-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-delete-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--resource-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-delete-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--user-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-deregister-from-work-mail {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--entity-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-describe-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-describe-organization {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-describe-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--resource-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-describe-user {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--user-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-disassociate-delegate-from-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--resource-id"); 
$flags+=("--entity-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-disassociate-member-from-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--group-id"); 
$flags+=("--member-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-get-access-control-effect {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--ip-address"); 
$flags+=("--action"); 
$flags+=("--user-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-get-mailbox-details {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--user-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-list-access-control-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-list-aliases {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--entity-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-list-group-members {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-list-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-list-mailbox-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--entity-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-list-organizations {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-list-resource-delegates {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--resource-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-list-resources {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-list-tags-for-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-list-users {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-put-access-control-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--effect"); 
$flags+=("--description"); 
$flags+=("--ip-ranges"); 
$flags+=("--not-ip-ranges"); 
$flags+=("--actions"); 
$flags+=("--not-actions"); 
$flags+=("--user-ids"); 
$flags+=("--not-user-ids"); 
$flags+=("--organization-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-put-mailbox-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--entity-id"); 
$flags+=("--grantee-id"); 
$flags+=("--permission-values"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-register-to-work-mail {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--entity-id"); 
$flags+=("--email"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-reset-password {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--user-id"); 
$flags+=("--password"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-tag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-untag-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-arn"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-update-mailbox-quota {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--user-id"); 
$flags+=("--mailbox-quota"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-update-primary-email-address {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--entity-id"); 
$flags+=("--email"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmail-update-resource {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--organization-id"); 
$flags+=("--resource-id"); 
$flags+=("--name"); 
$flags+=("--booking-options"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workmailmessageflow {
    $commands = [System.Collections.ArrayList]@();

$commands+=("get-raw-message-content");

return $commands;
}

 function Get-workmailmessageflow-get-raw-message-content {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--message-id");

return $flags;
}

 function Get-workspaces {
    $commands = [System.Collections.ArrayList]@();

$commands+=("associate-ip-groups"); 
$commands+=("authorize-ip-rules"); 
$commands+=("copy-workspace-image"); 
$commands+=("create-ip-group"); 
$commands+=("create-tags"); 
$commands+=("create-workspaces"); 
$commands+=("delete-ip-group"); 
$commands+=("delete-tags"); 
$commands+=("delete-workspace-image"); 
$commands+=("deregister-workspace-directory"); 
$commands+=("describe-account"); 
$commands+=("describe-account-modifications"); 
$commands+=("describe-client-properties"); 
$commands+=("describe-ip-groups"); 
$commands+=("describe-tags"); 
$commands+=("describe-workspace-bundles"); 
$commands+=("describe-workspace-directories"); 
$commands+=("describe-workspace-images"); 
$commands+=("describe-workspace-snapshots"); 
$commands+=("describe-workspaces"); 
$commands+=("describe-workspaces-connection-status"); 
$commands+=("disassociate-ip-groups"); 
$commands+=("import-workspace-image"); 
$commands+=("list-available-management-cidr-ranges"); 
$commands+=("migrate-workspace"); 
$commands+=("modify-account"); 
$commands+=("modify-client-properties"); 
$commands+=("modify-selfservice-permissions"); 
$commands+=("modify-workspace-access-properties"); 
$commands+=("modify-workspace-creation-properties"); 
$commands+=("modify-workspace-properties"); 
$commands+=("modify-workspace-state"); 
$commands+=("reboot-workspaces"); 
$commands+=("rebuild-workspaces"); 
$commands+=("register-workspace-directory"); 
$commands+=("restore-workspace"); 
$commands+=("revoke-ip-rules"); 
$commands+=("start-workspaces"); 
$commands+=("stop-workspaces"); 
$commands+=("terminate-workspaces"); 
$commands+=("update-rules-of-ip-group");

return $commands;
}

 function Get-workspaces-associate-ip-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--group-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-authorize-ip-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-id"); 
$flags+=("--user-rules"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-copy-workspace-image {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--name"); 
$flags+=("--description"); 
$flags+=("--source-image-id"); 
$flags+=("--source-region"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-create-ip-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--group-desc"); 
$flags+=("--user-rules"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-create-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-create-workspaces {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--workspaces"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-delete-ip-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-delete-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--tag-keys"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-delete-workspace-image {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-deregister-workspace-directory {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-describe-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-describe-account-modifications {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-describe-client-properties {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-describe-ip-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-describe-tags {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-describe-workspace-bundles {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--bundle-ids"); 
$flags+=("--owner"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-describe-workspace-directories {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-ids"); 
$flags+=("--limit"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-describe-workspace-images {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--image-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-describe-workspace-snapshots {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--workspace-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-describe-workspaces {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--workspace-ids"); 
$flags+=("--directory-id"); 
$flags+=("--user-name"); 
$flags+=("--bundle-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-describe-workspaces-connection-status {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--workspace-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-disassociate-ip-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--group-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-import-workspace-image {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--ec"); 
$flags+=("--ingestion-process"); 
$flags+=("--image-name"); 
$flags+=("--image-description"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-list-available-management-cidr-ranges {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--management-cidr-range-constraint"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--page-size"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-migrate-workspace {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--source-workspace-id"); 
$flags+=("--bundle-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-modify-account {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--dedicated-tenancy-support"); 
$flags+=("--dedicated-tenancy-management-cidr-range"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-modify-client-properties {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--client-properties"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-modify-selfservice-permissions {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--selfservice-permissions"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-modify-workspace-access-properties {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--workspace-access-properties"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-modify-workspace-creation-properties {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--resource-id"); 
$flags+=("--workspace-creation-properties"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-modify-workspace-properties {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--workspace-id"); 
$flags+=("--workspace-properties"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-modify-workspace-state {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--workspace-id"); 
$flags+=("--workspace-state"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-reboot-workspaces {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--reboot-workspace-requests"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-rebuild-workspaces {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rebuild-workspace-requests"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-register-workspace-directory {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--directory-id"); 
$flags+=("--subnet-ids"); 
$flags+=("--enable-work-docs"); 
$flags+=("--no-enable-work-docs"); 
$flags+=("--enable-self-service"); 
$flags+=("--no-enable-self-service"); 
$flags+=("--tenancy"); 
$flags+=("--tags"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-restore-workspace {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--workspace-id"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-revoke-ip-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-id"); 
$flags+=("--user-rules"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-start-workspaces {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--start-workspace-requests"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-stop-workspaces {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--stop-workspace-requests"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-terminate-workspaces {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--terminate-workspace-requests"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-workspaces-update-rules-of-ip-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-id"); 
$flags+=("--user-rules"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-xray {
    $commands = [System.Collections.ArrayList]@();

$commands+=("batch-get-traces"); 
$commands+=("create-group"); 
$commands+=("create-sampling-rule"); 
$commands+=("delete-group"); 
$commands+=("delete-sampling-rule"); 
$commands+=("get-encryption-config"); 
$commands+=("get-group"); 
$commands+=("get-groups"); 
$commands+=("get-sampling-rules"); 
$commands+=("get-sampling-statistic-summaries"); 
$commands+=("get-sampling-targets"); 
$commands+=("get-service-graph"); 
$commands+=("get-time-series-service-statistics"); 
$commands+=("get-trace-graph"); 
$commands+=("get-trace-summaries"); 
$commands+=("put-encryption-config"); 
$commands+=("put-telemetry-records"); 
$commands+=("put-trace-segments"); 
$commands+=("update-group"); 
$commands+=("update-sampling-rule");

return $commands;
}

 function Get-xray-batch-get-traces {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--trace-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-xray-create-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--filter-expression"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-xray-create-sampling-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sampling-rule"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-xray-delete-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-xray-delete-sampling-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--rule-name"); 
$flags+=("--rule-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-xray-get-encryption-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-xray-get-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-xray-get-groups {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-xray-get-sampling-rules {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-xray-get-sampling-statistic-summaries {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-xray-get-sampling-targets {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sampling-statistics-documents"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-xray-get-service-graph {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--group-name"); 
$flags+=("--group-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-xray-get-time-series-service-statistics {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--group-name"); 
$flags+=("--group-arn"); 
$flags+=("--entity-selector-expression"); 
$flags+=("--period"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-xray-get-trace-graph {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--trace-ids"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-xray-get-trace-summaries {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--start-time"); 
$flags+=("--end-time"); 
$flags+=("--time-range-type"); 
$flags+=("--sampling"); 
$flags+=("--no-sampling"); 
$flags+=("--sampling-strategy"); 
$flags+=("--filter-expression"); 
$flags+=("--cli-input-json"); 
$flags+=("--starting-token"); 
$flags+=("--max-items"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-xray-put-encryption-config {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--key-id"); 
$flags+=("--type"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-xray-put-telemetry-records {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--telemetry-records"); 
$flags+=("--ec"); 
$flags+=("--hostname"); 
$flags+=("--resource-arn"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-xray-put-trace-segments {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--trace-segment-documents"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-xray-update-group {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--group-name"); 
$flags+=("--group-arn"); 
$flags+=("--filter-expression"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

 function Get-xray-update-sampling-rule {
        $flags = [System.Collections.ArrayList]@();

$flags+=("--sampling-rule-update"); 
$flags+=("--cli-input-json"); 
$flags+=("--generate-cli-skeleton");

return $flags;
}

Export-ModuleMember Register-AWSCompleter;